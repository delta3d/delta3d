import os

optCache = 'options.cache'
opts = Options(optCache)
opts.AddOptions(
    BoolOption('debug',    'Build with debugging enabled', 0),
    BoolOption('optimize', 'Build with optimizations', 0),
    BoolOption('distcc', 'Enable compiling with distcc', 0),
    BoolOption('nowarn', 'Disable all warnings', 0),
    BoolOption('warningsAsErrors', 'Treat warnings as errors', 0),
    PathOption('prefix', 'Directory to install under (Default: /usr/local)', '/home/cwosborn/delta/HEAD/delta3d') )

env = Environment(
    ENV = {
      'PATH'       : os.environ['PATH'],
      'HOME'       : os.environ['HOME'], # required for distcc
      'DELTA_ROOT' : os.environ['DELTA_ROOT'].split(':'),
      'DELTA_INC'  : os.environ['DELTA_INC'].split(':'),
      'DELTA_LIB'  : os.environ['DELTA_LIB'].split(':'),
      'DELTA_DATA' : os.environ['DELTA_DATA'].split(':')
    }, options = opts)


env.Replace(CPPPATH = [], LIBS = [], LIBPATH = [], CPPDEFINES = [],
    CXXFLAGS = '', CCFLAGS = '')

Help(opts.GenerateHelpText(env))
opts.Save('delta3d.conf', env)

if env.get('debug'):
    env.Append(CCFLAGS=['-g'], CPPDEFINES=['DEBUG', '_DEBUG'])
if env.get('optimize'):
    env.Append(CCFLAGS=['-O2'], LINKFLAGS=['-s'], CPPDEFINES=['NDEBUG'])
if env.get('distcc'):
    env['CC']  = ['$(', 'distcc', '$)', env['CC']]
    env['CXX'] = ['$(', 'distcc', '$)', env['CXX']]
if env.get('nowarn'):
    env.Append(CCFLAGS=['-w'])
else:
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS=['-Wall'])
    elif env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Wall'])
    if env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Wno-non-virtual-dtor'])
if env.get('warningsAsErrors'):
    if env['CC'] == 'gcc':
        env.Append(CCFLAGS=['-Werror'])
    elif env['CXX'] == 'g++':
        env.Append(CXXFLAGS=['-Werror'])

Help(opts.GenerateHelpText(env))

#env['CPPPATH'] = env['CPPPATH'].append(env['ENV']['DELTA_INC'])
#env['LIBPATH'] = env['LIBPATH'].append(env['ENV']['DELTA_LIB'])

env['CPPPATH'] = env['ENV']['DELTA_INC']
env['LIBPATH'] = env['ENV']['DELTA_LIB']

#############################################
# Configure: Testing for dependencies vX.X.X
#
# osg0.9.8-2, etc.
# ...
##############################################

# do version, config checking

def CheckForOpenSceneGraph(context):

    osgLibs = [ 'osg', 'osgDB', 'osgUtil', 'osgGL2', 'osgText', 'osgSim', 'osgFX', 'osgParticle', 'osg', 'osgGA', 'osgProducer', 'osgTerrain' ]

    for lib in osgLibs:
        if not conf.CheckLib(lib, language='C++'):
            return 0

    return 1

def CheckForProducer(context):
    if conf.CheckLib('Producer',language='C++'):
        return 1
    return 0

def CheckForOpenThreads(context):
    if conf.CheckLib('OpenThreads',language='C++'):
        return 1
    return 0

def CheckForCal3d(context):
    # test for --enable-rtti
    if conf.CheckLib('cal3d',language='C++'):
        return 1
    return 0

def CheckForFltk(context):
    # test for --enable-shared(?), --enable-threads
    if conf.CheckLib('fltk',language='C++'):
        return 1
    return 0

def CheckForGdal(context):
    if conf.CheckLib('gdal',language='C++'):
        return 1
    return 0

def CheckForGlGui(context):
    if conf.CheckLib('glgui',language='C++'):
        return 1
    return 0

def CheckForIsense(context):
    if conf.CheckLib('isense',language='C++'):
        return 1
    return 0

def CheckForOpenAl(context):
    # verify hacks
    if conf.CheckLib('openal',language='C++'):
        return 1
    return 0

def CheckForOde(context):
    # test for single precision, trimesh enabled, RTTI on
    if conf.CheckLib('ode',language='C'):
        return 1
    return 0

def CheckForPlib(context):

    pLibLibs = [ 'plibsg', 'plibul', 'plibjs' ]

    for lib in pLibLibs:
        if not conf.CheckLib(lib, language='C++'):
            return 0

    return 1

def CheckForReplicantBody(context):

    rbodyLibs = [ 'rbodyvortex', 'rbodyvrutils', 'cfgvrutils', 'cfgscript', 'rbody', 'rbodyosg' ]

    for lib in rbodyLibs:
        if not conf.CheckLib(lib, language='C++'):
            return 0

    return 1

def CheckForSignalSlot(context):
    # test for gcc3.4 compatibility
    if conf.CheckHeader('sigslot.h',language='C++'):
        return 1
    return 0

def CheckForTinyXml(context):
    if conf.CheckLib('tinyxml',language='C++'):
        return 1
    return 0

def CheckForRti(context):
    return 0

def CheckForBoost(context):
    return 0

conf = Configure(env, custom_tests = {
    'CheckForOpenSceneGraph' : CheckForOpenSceneGraph,
    'CheckForProducer' : CheckForProducer,
    'CheckForOpenThreads' : CheckForOpenThreads,
    'CheckForCal3d' : CheckForCal3d,
    'CheckForFltk' : CheckForFltk,
    'CheckForGdal' : CheckForGdal,
    'CheckForGlGui' : CheckForGlGui,
    'CheckForIsense' : CheckForIsense,
    'CheckForOpenAl' : CheckForOpenAl,
    'CheckForOde' : CheckForOde,
    'CheckForPlib' : CheckForPlib,
    'CheckForReplicantBody' : CheckForReplicantBody,
    'CheckForSignalSlot' : CheckForSignalSlot,
    'CheckForTinyXml' : CheckForTinyXml
    })

# TODO: don't run for install
if not env.GetOption('clean'):

    if not conf.CheckForGdal():
        Exit(1)

    if not conf.CheckForOpenThreads():
        Exit(1)

    if not conf.CheckForProducer():
        Exit(1)

    if not conf.CheckForOpenSceneGraph():
        Exit(1)

    if not conf.CheckForFltk():
        Exit(1)

    if not conf.CheckForGlGui():
        Exit(1)

    if not conf.CheckForIsense():
        Exit(1)

    if not conf.CheckForOpenAl():
        Exit(1)

    if not conf.CheckForOde():
        Exit(1)

    if not conf.CheckForPlib():
        Exit(1)

    if not conf.CheckForCal3d():
        Exit(1)

    if not conf.CheckForReplicantBody():
        Exit(1)

    if not conf.CheckForSignalSlot():
        Exit(1)

    if not conf.CheckForTinyXml():
        Exit(1)

env = conf.Finish()

#################
# Build Delta3D #
#################

Export('env')

env.Replace(CXXSUFFIX = '.cpp')

env.Alias('install','$prefix/lib')
env.Alias('examples','$prefix/examples')

# TODO: install headers, libs, to $prefix

SConscript(dirs=[ 'src' ])
#SConscript(dirs=[ 'examples' ])
#SConscript(dirs=[ 'utilities' ])
