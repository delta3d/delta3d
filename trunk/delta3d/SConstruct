import os 
import sys
import time
import smtplib
import SCons.Util

from email.MIMEText import MIMEText

# TODO:
# define 'DT_LIBRARY' for libs
# install headers, libs, to prefix
# make clean
# fix dtCore/dtUtil auto-install
# fix conf messages
# doxygen
# make packaged release
# CVS support
# move DLLs to bin

########################
# Build error emailing #
########################

# set this to true to enable build emailing
email = 'false'

# fill this in with interested parties
peopleToEmail = []

# replcae with your local outgoing SMTP server
smtpServer = 'mysmtp@server.com'

# this is who the build email will come from
fromAddress = 'myaddress@company.com'

# Function to calculate current time for logging
def current_time() :
   now = time.localtime()
   display = time.strftime('%A, %B %d %Y, %X', now)
   return display

# Function to email the result of the build
def email_results() :
	file = open('BuildLog.txt', 'r')
	buffer = MIMEText(file.read())
	buffer['Subject'] = 'Editor Build Log'
	file.close()

	s = smtplib.SMTP()
	s.connect(smtpServer) 
	s.sendmail(fromAddress, peopleToEmail, buffer.as_string())
	s.close()

###########
# Options #
###########

# Open the error log
errorLog = open('BuildLog.txt', 'w')

print 'Build started: ' + current_time() + ''
errorLog.write('Build started: ' + current_time() + '\n\n')

# detemine the OS
if sys.platform == 'win32' :
   OS = 'windows'	
elif sys.platform == 'linux2' or sys.platform == 'linux-i386' :
   OS = 'linux'
else :
   print 'Build Failed: Unsupported platform'
   errorLog.write('Build Failed: Unsupported platform: ' + sys.platform)
   errorLog.close()
   env.Exit(-1) 

optCache = 'options.cache'
opts = Options(optCache)
opts.AddOptions(
   EnumOption('mode', 'Build as either debug or release', 'release',
               allowed_values=('debug', 'release'),
               map={}, ignorecase=1),
   BoolOption('no_warnings', 'Disable all warnings', 0),
   PathOption('prefix', 'Directory to install under', os.getcwd() )
)

env = Environment( options = opts )

for K in os.environ.keys():
   if K in env['ENV'].keys() and K in [ 'PATH', 'LD_LIBRARY_PATH', 'LIB', 'INCLUDE' ]:
      env['ENV'][K]=SCons.Util.AppendPath( env['ENV'][K], os.environ[K] )
   else:
      env['ENV'][K]=os.environ[K]
      
env.Append( CPPPATH = [os.path.join( os.getcwd(), 'inc' ) ] )
env.Append( CPPPATH = [os.path.join( os.getcwd(), 'ext', 'inc' ) ] )
env.Append( CPPPATH = [os.path.join( sys.prefix, 'include' ) ] )

env.Append( LIBPATH = [os.path.join( os.getcwd(), 'lib' ) ] )
env.Append( LIBPATH = [os.path.join( os.getcwd(), 'ext', 'lib' ) ] )
env.Append( LIBPATH = [os.path.join( sys.prefix, 'libs' ) ] )
 
rtiFound = os.environ.has_key('RTI_INCLUDE') and os.environ.has_key('RTI_LIB')

if rtiFound :
   env['ENV']['RTI_INCLUDE'] = os.environ['RTI_INCLUDE']  
   env['ENV']['RTI_LIB'] = os.environ['RTI_LIB']  
   env.Append( CPPPATH = [ os.environ['RTI_INCLUDE'] ] )
   env.Append( LIBPATH = [ os.environ['RTI_LIB'] ] )

srcLibPaths = [ 'dtABC', 'dtAudio', 'dtChar','dtCore', 'dtHLA', 'dtScript', 'dtUtil', 'dtVis', 'gui_fl', 'python', 'soarx' ]
env.Append(LIBPATH=[ os.path.join( os.getcwd(), 'src', elem ) for elem in srcLibPaths ])

# TODO: can we remove these?
if OS == 'linux' :
   env.Append(CPPPATH=['/usr/X11R6/include','/usr/include','/usr/local/include'])
   env.Append(LIBPATH=['/usr/X11R6/lib','/usr/lib','/usr/local/lib'])

Help(opts.GenerateHelpText(env))
opts.Save('delta3d.conf', env)

if env.get('mode') == 'debug':
   mode = 'debug'
else:
   mode = 'release'

print 'OS: ' + OS
errorLog.write('OS: ' + OS + '\n\n')

# set compiler options for debug/release modes
if mode == 'debug':

   print 'Build Configuration: Debug'
   errorLog.write('Build Configuration: Debug\n\n')
   
   if OS == 'windows':
      env.Append( CPPDEFINES = ['WIN32', '_DEBUG', '_NOAUTOLIBMSG'],
                  CXXFLAGS = ['/EHsc', '/GR', '/MDd' ],
                  LINKFLAGS = ['/NODEFAULTLIB:LIBCMTD'] ) 
   elif OS == 'linux':
      env.Append( CXXFLAGS=['-g', '-O0', '-pipe'], 
                  CXXDEFINES=['DEBUG', '_DEBUG'] )
                  
else:

   print 'Build Configuration: Release'
   errorLog.write('Build Configuration: Release\n\n')
   
   if OS == 'windows':
      env.Append( CPPDEFINES = ['WIN32', 'NDEBUG', 'DT_LIBRARY', '_NOAUTOLIBMSG'],
                  CXXFLAGS = ['/EHsc', '/GR', '/MD' ],
                  LINKFLAGS = ['/NODEFAULTLIB:LIBCMT'] )  
   elif OS == 'linux':
      env.Append( CXXFLAGS=['-O2', '-pipe'], 
                  CPPDEFINES=['NDEBUG'],
                  LINKFLAGS=['-s'] )
    
if env.get('no_warnings'):
   if OS == 'windows':
      env.Append(CXXFLAGS=['/w'])
   elif OS == 'linux':
      env.Append(CXXFLAGS=['-w'])
else:
   if OS == 'windows':
      env.Append(CXXFLAGS=['/W3'])
   elif OS == 'linux':
      if env['CC'] == 'gcc' or env['CXX'] == 'g++':
         env.Append(CXXFLAGS=['-Wall'])
      if env['CXX'] == 'g++':
            env.Append(CXXFLAGS=['-Wno-non-virtual-dtor'])

#############################################
# Configure: Testing for dependencies vX.X.X
#
# osg0.9.8-2, etc.
# ...
##############################################

# do version, config checking
   
if OS == 'windows' :
   if mode == 'debug' :
      extLibs = { 
         'osg'          : 'osgd',
         'osgDB'        : 'osgDBd',
         'osgUtil'      : 'osgUtild',
         'osgGL2'       : 'osgGL2d',
         'osgText'      : 'osgTextd',
         'osgSim'       : 'osgSimd',
         'osgFX'        : 'osgFXd',
         'osgParticle'  : 'osgParticled',
         'osgGA'        : 'osgGAd',
         'osgProducer'  : 'osgProducerd',
         'osgTerrain'   : 'osgTerraind',
         'Producer'     : 'Producerd',
         'OpenThreads'  : 'OpenThreadsWin32d',
         'cal3d'        : 'cal3d_d',
         'fltk'         : 'fltkd',
         'gdal'         : 'gdal_i',
         'glgui'        : 'glGUI_d',
         'isense'       : 'isensed',
         'openal'       : 'OpenAL32', 
         'ode'          : 'oded', 
         'sg'           : 'sg_d', 
         'ul'           : 'ul_d', 
         'js'           : 'js_d',  
         'rvrutils'     : 'rvrutilsd',
         'rcfgscript'   : 'rcfgscriptd', 
         'rbody'        : 'ReplicandtBodyd',
         'tinyXml'      : 'tinyxmld',
         'User32'       : 'User32'
      }
   else :
      extLibs = { 
         'osg'          : 'osg',
         'osgDB'        : 'osgDB',
         'osgUtil'      : 'osgUtil',
         'osgGL2'       : 'osgGL2',
         'osgText'      : 'osgText',
         'osgSim'       : 'osgSim',
         'osgFX'        : 'osgFX',
         'osgParticle'  : 'osgParticle',
         'osgGA'        : 'osgGA',
         'osgProducer'  : 'osgProducer',
         'osgTerrain'   : 'osgTerrain',
         'Producer'     : 'Producer',
         'OpenThreads'  : 'OpenThreadsWin32',
         'cal3d'        : 'cal3d',
         'fltk'         : 'fltk',
         'gdal'         : 'gdal_i',
         'glgui'        : 'glGUI',
         'isense'       : 'isense',
         'openal'       : 'OpenAL32', 
         'ode'          : 'ode', 
         'sg'           : 'sg', 
         'ul'           : 'ul', 
         'js'           : 'js',  
         'rvrutils'     : 'rvrutils',
         'rcfscript'    : 'rcfgscript', 
         'rbody'        : 'ReplicandtBody',
         'tinyxml'      : 'tinyxml',
         'User32'       : 'User32'
      }
   
elif OS == 'linux' :
      extLibs = { 
         'osg'          : 'osg',
         'osgDB'        : 'osgDB',
         'osgUtil'      : 'osgUtil',
         'osgGL2'       : 'osgGL2',
         'osgText'      : 'osgText',
         'osgSim'       : 'osgSim',
         'osgFX'        : 'osgFX',
         'osgParticle'  : 'osgParticle',
         'osgGA'        : 'osgGA',
         'osgProducer'  : 'osgProducer',
         'osgTerrain'   : 'osgTerrain',
         'Producer'     : 'Producer',
         'OpenThreads'  : 'OpenThreads',
         'cal3d'        : 'cal3d',
         'fltk'         : 'fltk',
         'gdal'         : 'gdal',
         'glgui'        : 'glgui',
         'isense'       : 'isense',
         'openal'       : 'openal', 
         'ode'          : 'ode', 
         'sg'           : 'plibsg', 
         'ul'           : 'plibul', 
         'js'           : 'plibjs',  
         'rvrutils'     : 'rvrutils',
         'rcfscript'    : 'rcfgscript', 
         'rbody'        : 'rbody',
         'tinyxml'      : 'tinyxml' ,
         'Xxf86vm'      : 'Xxf86vm',
         'uuid'         : 'uuid'
      }
else :
   extLibs = {}

conf = Configure(env)

# TODO: don't run for install
if not env.GetOption('clean') and OS != 'windows' and 0:
     
   foundReqLibs = 1
   for lib in extLibs.keys() :
      foundReqLibs = foundReqLibs and conf.CheckLib( extLibs[lib], language = 'C++')         
   foundReqLibs = foundReqLibs and conf.CheckHeader('sigslot.h',language='C++')
   
   if mode == 'debug' :
      boostPython = 'libboost_python_debug.so'
   else :
      boostPython = 'libboost_python.so'

   boostFound = 0
   for path in env['LIBPATH']:
      if os.path.exists(os.path.join(path, boostPython)):
         boostFound = 1
         break
   
   env = conf.Finish()

   if foundReqLibs == 0 :   
      print 'Build Failed: Missing required libraries'
      errorLog.write('Build Failed: Missing required libraries\n\n')
      errorLog.close()

      if email == 'true' :
         email_results()
         
      env.Exit(-1)
      
else :
   # No need to email since this is a clean (scons -c)
   boostFound = 0
   email = 'false'

# Documentation generation system
#doxygenBuilder = Builder(action = 'doxygen $SOURCE')
#env.Append(BUILDERS = { 'DoxygenDoc' : doxygenBuilder })
   
#################
# Build Delta3D #
#################

Export( 'env', 'OS', 'boostFound', 'rtiFound', 'extLibs' )

env.Alias( 'python', [ os.path.join(os.getcwd(), 'src', 'python'),
                       os.path.join(os.getcwd(), 'examples', 'testPython')] )

env.Alias( 'hla', [ os.path.join(os.getcwd(), 'src', 'dtHLA'),
                     os.path.join(os.getcwd(), 'examples', 'testHLA'),
                     os.path.join(os.getcwd(), 'utilities', 'hlaStealthViewer') ] )
                     
SConscript( dirs=['src'] )
#SConscript( dirs=['examples'] )
#SConscript( dirs=['utilities'] )

#if libs == '[]' :
#   errorLog.write('Failed to create the libraries or executable file')
#   errorLog.write('Build Failed: Build ended: ' + current_time() + '\n')
#   errorLog.close()
#   env.Exit(-1)

# Close the error log and print the results
print 'Build Succeeded: Build ended: ' + current_time()
errorLog.write('Build Succeeded: Build ended: ' + current_time() + '\n')
errorLog.close()

# email the results
if email == 'true' :
   email_results() 
