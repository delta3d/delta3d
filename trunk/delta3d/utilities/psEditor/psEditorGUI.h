// generated by Fast Light User Interface Designer (fluid) version 1.0109

#ifndef psEditorGUI_h
#define psEditorGUI_h
#include <FL/Fl.H>
#include "dtABC/fl_dt_window.h"
#include "viewwindow.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
extern void psEditorGUI_New(Fl_Menu_*, void*);
extern void psEditorGUI_Open(Fl_Menu_*, void*);
extern void psEditorGUI_Import(Fl_Menu_*, void*);
extern void psEditorGUI_LoadReference(Fl_Menu_*, void*);
extern void psEditorGUI_Save(Fl_Menu_*, void*);
extern void psEditorGUI_SaveAs(Fl_Menu_*, void*);
extern void psEditorGUI_Quit(Fl_Menu_*, void*);
extern void psEditorGUI_Compass(Fl_Menu_*, void*);
extern void psEditorGUI_XYGrid(Fl_Menu_*, void*);
extern void psEditorGUI_YZGrid(Fl_Menu_*, void*);
extern void psEditorGUI_XZGrid(Fl_Menu_*, void*);
#include <FL/Fl_Tile.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>
extern void psEditorGUI_NewLayer(Fl_Button*, void*);
extern void psEditorGUI_DeleteLayer(Fl_Button*, void*);
extern void psEditorGUI_RenameLayer(Fl_Button*, void*);
#include <FL/Fl_Browser.H>
extern void psEditorGUI_LayerSelect(Fl_Browser*, void*);
#include <FL/Fl_Light_Button.H>
extern void psEditorGUI_HideLayer(Fl_Light_Button*, void*);
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Choice.H>
extern void psEditorGUI_Particles_SetAlignment(Fl_Choice*, void*);
extern void psEditorGUI_Particles_SetShape(Fl_Choice*, void*);
#include <FL/Fl_Value_Input.H>
extern void psEditorGUI_Particles_SetLifetime(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetMinSize(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetMaxSize(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetRadius(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetMass(Fl_Value_Input*, void*);
#include <FL/Fl_Input.H>
extern void psEditorGUI_Particles_SetTexture(Fl_Input*, void*);
extern void psEditorGUI_Particles_ChooseTexture(Fl_Button*, void*);
#include <FL/Fl_Check_Button.H>
extern void psEditorGUI_Particles_SetEmissive(Fl_Check_Button*, void*);
extern void psEditorGUI_Particles_SetLighting(Fl_Check_Button*, void*);
extern void psEditorGUI_Particles_SetMinR(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetMinG(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetMinB(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_ChooseMinColor(Fl_Button*, void*);
extern void psEditorGUI_Particles_SetMinAlpha(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetMaxR(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetMaxG(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetMaxB(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_ChooseMaxColor(Fl_Button*, void*);
extern void psEditorGUI_Particles_SetMaxAlpha(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetEmitterEndless(Fl_Check_Button*, void*);
extern void psEditorGUI_Particles_SetEmitterLifetime(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetEmitterStartTime(Fl_Value_Input*, void*);
extern void psEditorGUI_Particles_SetEmitterResetTime(Fl_Value_Input*, void*);
#include "texturepreview.h"
extern void psEditorGUI_RandomRateCounter_SetMinRate(Fl_Value_Input*, void*);
extern void psEditorGUI_RandomRateCounter_SetMaxRate(Fl_Value_Input*, void*);
extern void psEditorGUI_Counter_SetType(Fl_Choice*, void*);
extern void psEditor_SegmentPlacer_VertexA_SetX(Fl_Value_Input*, void*);
extern void psEditor_SegmentPlacer_VertexA_SetY(Fl_Value_Input*, void*);
extern void psEditor_SegmentPlacer_VertexA_SetZ(Fl_Value_Input*, void*);
extern void psEditor_SegmentPlacer_VertexB_SetX(Fl_Value_Input*, void*);
extern void psEditor_SegmentPlacer_VertexB_SetY(Fl_Value_Input*, void*);
extern void psEditor_SegmentPlacer_VertexB_SetZ(Fl_Value_Input*, void*);
extern void psEditorGUI_SectorPlacer_Center_SetX(Fl_Value_Input*, void*);
extern void psEditorGUI_SectorPlacer_Center_SetY(Fl_Value_Input*, void*);
extern void psEditorGUI_SectorPlacer_Center_SetZ(Fl_Value_Input*, void*);
extern void psEditorGUI_SectorPlacer_SetMinRadius(Fl_Value_Input*, void*);
extern void psEditorGUI_SectorPlacer_SetMaxRadius(Fl_Value_Input*, void*);
extern void psEditorGUI_SectorPlacer_SetMinPhi(Fl_Value_Input*, void*);
extern void psEditorGUI_SectorPlacer_SetMaxPhi(Fl_Value_Input*, void*);
extern void psEditorGUI_PointPlacer_SetX(Fl_Value_Input*, void*);
extern void psEditorGUI_PointPlacer_SetY(Fl_Value_Input*, void*);
extern void psEditorGUI_PointPlacer_SetZ(Fl_Value_Input*, void*);
extern void psEditorGUI_MultiSegmentPlacer_VerticesChanged(Fl_Browser*, void*);
extern void psEditorGUI_MultiSegmentPlacer_AddVertex(Fl_Button*, void*);
extern void psEditorGUI_MultiSegmentPlacer_DeleteVertex(Fl_Button*, void*);
extern void psEditorGUI_MultiSegmentPlacer_Vertex_SetX(Fl_Value_Input*, void*);
extern void psEditorGUI_MultiSegmentPlacer_Vertex_SetY(Fl_Value_Input*, void*);
extern void psEditorGUI_MultiSegmentPlacer_Vertex_SetZ(Fl_Value_Input*, void*);
extern void psEditorGUI_Placer_SetType(Fl_Choice*, void*);
extern void psEditorGUI_RadialShooter_SetMinTheta(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMaxTheta(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMinPhi(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMaxPhi(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMinInitialSpeed(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMaxInitialSpeed(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMinInitialRotationalSpeedX(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMinInitialRotationalSpeedY(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMinInitialRotationalSpeedZ(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMaxInitialRotationalSpeedX(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMaxInitialRotationalSpeedY(Fl_Value_Input*, void*);
extern void psEditorGUI_RadialShooter_SetMaxInitialRotationalSpeedZ(Fl_Value_Input*, void*);
extern void psEditorGUI_Shooter_SetType(Fl_Choice*, void*);
extern void psEditor_Program_OperatorsChanged(Fl_Browser*, void*);
extern void psEditorGUI_Program_NewForce(Fl_Button*, void*);
extern void psEditorGUI_Program_NewAcceleration(Fl_Button*, void*);
extern void psEditorGUI_Program_NewFluidFriction(Fl_Button*, void*);
extern void psEditorGUI_Program_DeleteOperator(Fl_Button*, void*);
extern void psEditorGUI_FluidFriction_Air(Fl_Button*, void*);
extern void psEditorGUI_FluidFriction_Water(Fl_Button*, void*);
extern void psEditorGUI_FluidFriction_SetDensity(Fl_Value_Input*, void*);
extern void psEditorGUI_FluidFriction_SetViscosity(Fl_Value_Input*, void*);
extern void psEditorGUI_FluidFriction_SetOverrideRadius(Fl_Value_Input*, void*);
extern void psEditorGUI_Force_SetX(Fl_Value_Input*, void*);
extern void psEditorGUI_Force_SetY(Fl_Value_Input*, void*);
extern void psEditorGUI_Force_SetZ(Fl_Value_Input*, void*);
extern void psEditorGUI_Acceleration_SetX(Fl_Value_Input*, void*);
extern void psEditorGUI_Acceleration_SetY(Fl_Value_Input*, void*);
extern void psEditorGUI_Acceleration_SetZ(Fl_Value_Input*, void*);
extern void psEditorGUI_ResetLayers(Fl_Button*, void*);

class UserInterface {
public:
  UserInterface( int argc=0L, char** argv=NULL);
  Fl_Double_Window *UIMainWindow;
  Fl_Menu_Bar *MainMenu;
  static Fl_Menu_Item menu_MainMenu[];
  Fl_Button *Layers_DeleteButton;
  Fl_Button *Layers_RenameButton;
  Fl_Browser *Layers;
  Fl_Light_Button *Layers_HideButton;
  ViewWindow *viewWidget;
  Fl_Tabs *ParameterTabs;
  Fl_Choice *Particles_Alignment;
  static Fl_Menu_Item menu_Particles_Alignment[];
  Fl_Choice *Particles_Shape;
  static Fl_Menu_Item menu_Particles_Shape[];
  Fl_Value_Input *Particles_Lifetime;
  Fl_Value_Input *Particles_MinSize;
  Fl_Value_Input *Particles_MaxSize;
  Fl_Value_Input *Particles_Radius;
  Fl_Value_Input *Particles_Mass;
  Fl_Input *Particles_Texture;
  Fl_Check_Button *Particles_Emissive;
  Fl_Check_Button *Particles_Lighting;
  Fl_Value_Input *Particles_MinR;
  Fl_Value_Input *Particles_MinG;
  Fl_Value_Input *Particles_MinB;
  Fl_Button *Particles_MinColor;
  Fl_Value_Input *Particles_MinAlpha;
  Fl_Value_Input *Particles_MaxR;
  Fl_Value_Input *Particles_MaxG;
  Fl_Value_Input *Particles_MaxB;
  Fl_Button *Particles_MaxColor;
  Fl_Value_Input *Particles_MaxAlpha;
  Fl_Check_Button *Particles_Emitter_Endless;
  Fl_Value_Input *Particles_Emitter_Lifetime;
  Fl_Value_Input *Particles_Emitter_StartTime;
  Fl_Value_Input *Particles_Emitter_ResetTime;
  TexturePreview *Particles_TexturePreview;
  Fl_Group *RandomRateCounterParameters;
  Fl_Value_Input *RandomRateCounter_MinRate;
  Fl_Value_Input *RandomRateCounter_MaxRate;
  static Fl_Menu_Item menu_Counter[];
  Fl_Group *SegmentPlacerParameters;
  Fl_Value_Input *SegmentPlacer_A_X;
  Fl_Value_Input *SegmentPlacer_A_Y;
  Fl_Value_Input *SegmentPlacer_A_Z;
  Fl_Value_Input *SegmentPlacer_B_X;
  Fl_Value_Input *SegmentPlacer_B_Y;
  Fl_Value_Input *SegmentPlacer_B_Z;
  Fl_Group *SectorPlacerParameters;
  Fl_Value_Input *SectorPlacer_X;
  Fl_Value_Input *SectorPlacer_Y;
  Fl_Value_Input *SectorPlacer_Z;
  Fl_Value_Input *SectorPlacer_MinRadius;
  Fl_Value_Input *SectorPlacer_MaxRadius;
  Fl_Value_Input *SectorPlacer_MinPhi;
  Fl_Value_Input *SectorPlacer_MaxPhi;
  Fl_Group *PointPlacerParameters;
  Fl_Value_Input *PointPlacer_X;
  Fl_Value_Input *PointPlacer_Y;
  Fl_Value_Input *PointPlacer_Z;
  Fl_Group *MultiSegmentPlacerParameters;
  Fl_Browser *MultiSegmentPlacer_Vertices;
  Fl_Button *MultiSegmentPlacer_DeleteVertex;
  Fl_Group *MultiSegmentPlacer_VertexParameters;
  Fl_Value_Input *MultiSegmentPlacer_X;
  Fl_Value_Input *MultiSegmentPlacer_Y;
  Fl_Value_Input *MultiSegmentPlacer_Z;
  Fl_Choice *Placer_Type;
  static Fl_Menu_Item menu_Placer_Type[];
  Fl_Group *RadialShooterParameters;
  Fl_Value_Input *RadialShooter_MinTheta;
  Fl_Value_Input *RadialShooter_MaxTheta;
  Fl_Value_Input *RadialShooter_MinPhi;
  Fl_Value_Input *RadialShooter_MaxPhi;
  Fl_Value_Input *RadialShooter_MinInitialSpeed;
  Fl_Value_Input *RadialShooter_MaxInitialSpeed;
  Fl_Value_Input *RadialShooter_MinInitialRotationalSpeedX;
  Fl_Value_Input *RadialShooter_MinInitialRotationalSpeedY;
  Fl_Value_Input *RadialShooter_MinInitialRotationalSpeedZ;
  Fl_Value_Input *RadialShooter_MaxInitialRotationalSpeedX;
  Fl_Value_Input *RadialShooter_MaxInitialRotationalSpeedY;
  Fl_Value_Input *RadialShooter_MaxInitialRotationalSpeedZ;
  static Fl_Menu_Item menu_Shooter[];
  Fl_Browser *Program_Operators;
  Fl_Button *Program_DeleteOperator;
  Fl_Group *FluidFrictionParameters;
  Fl_Value_Input *FluidFriction_Density;
  Fl_Value_Input *FluidFriction_Viscosity;
  Fl_Value_Input *FluidFriction_OverrideRadius;
  Fl_Group *ForceParameters;
  Fl_Value_Input *Force_X;
  Fl_Value_Input *Force_Y;
  Fl_Value_Input *Force_Z;
  Fl_Group *AccelerationParameters;
  Fl_Value_Input *Acceleration_X;
  Fl_Value_Input *Acceleration_Y;
  Fl_Value_Input *Acceleration_Z;
  void Show();
};
#endif
