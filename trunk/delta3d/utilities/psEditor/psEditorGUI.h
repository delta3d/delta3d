// generated by Fast Light User Interface Designer (fluid) version 1.0104

#ifndef psEditorGUI_h
#define psEditorGUI_h
#include <FL/Fl.H>
#include "fl_dt_window.h"
#include "dtabc.h"
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Menu_Bar.H>
extern Fl_Menu_Bar *MainMenu;
extern void psEditorGUI_New(Fl_Menu_*, void*);
extern void psEditorGUI_Open(Fl_Menu_*, void*);
extern void psEditorGUI_Save(Fl_Menu_*, void*);
extern void psEditorGUI_SaveAs(Fl_Menu_*, void*);
extern void psEditorGUI_Quit(Fl_Menu_*, void*);
extern void psEditorGUI_Compass(Fl_Menu_*, void*);
extern void psEditorGUI_XYGrid(Fl_Menu_*, void*);
extern void psEditorGUI_YZGrid(Fl_Menu_*, void*);
extern void psEditorGUI_XZGrid(Fl_Menu_*, void*);
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Choice.H>
extern void psEditorGUI_Particles_SetAlignment(Fl_Choice*, void*);
extern Fl_Choice *Particles_Alignment;
extern void psEditorGUI_Particles_SetShape(Fl_Choice*, void*);
extern Fl_Choice *Particles_Shape;
#include <FL/Fl_Value_Input.H>
extern void psEditorGUI_Particles_SetLifetime(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_Lifetime;
extern void psEditorGUI_Particles_SetMinSize(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MinSize;
extern void psEditorGUI_Particles_SetMaxSize(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MaxSize;
extern void psEditorGUI_Particles_SetRadius(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_Radius;
extern void psEditorGUI_Particles_SetMass(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_Mass;
#include <FL/Fl_Input.H>
extern void psEditorGUI_Particles_SetTexture(Fl_Input*, void*);
extern Fl_Input *Particles_Texture;
#include <FL/Fl_Button.H>
extern void psEditorGUI_Particles_ChooseTexture(Fl_Button*, void*);
#include <FL/Fl_Check_Button.H>
extern void psEditorGUI_Particles_SetEmissive(Fl_Check_Button*, void*);
extern Fl_Check_Button *Particles_Emissive;
extern void psEditorGUI_Particles_SetLighting(Fl_Check_Button*, void*);
extern Fl_Check_Button *Particles_Lighting;
extern void psEditorGUI_Particles_SetMinR(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MinR;
extern void psEditorGUI_Particles_SetMinG(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MinG;
extern void psEditorGUI_Particles_SetMinB(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MinB;
extern void psEditorGUI_Particles_ChooseMinColor(Fl_Button*, void*);
extern Fl_Button *Particles_MinColor;
extern void psEditorGUI_Particles_SetMinAlpha(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MinAlpha;
#include <FL/Fl_Box.H>
extern void psEditorGUI_Particles_SetMaxR(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MaxR;
extern void psEditorGUI_Particles_SetMaxG(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MaxG;
extern void psEditorGUI_Particles_SetMaxB(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MaxB;
extern void psEditorGUI_Particles_ChooseMaxColor(Fl_Button*, void*);
extern Fl_Button *Particles_MaxColor;
extern void psEditorGUI_Particles_SetMaxAlpha(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_MaxAlpha;
extern void psEditorGUI_Particles_SetEmitterEndless(Fl_Check_Button*, void*);
extern Fl_Check_Button *Particles_Emitter_Endless;
extern void psEditorGUI_Particles_SetEmitterLifetime(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_Emitter_Lifetime;
extern void psEditorGUI_Particles_SetEmitterStartTime(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_Emitter_StartTime;
extern void psEditorGUI_Particles_SetEmitterResetTime(Fl_Value_Input*, void*);
extern Fl_Value_Input *Particles_Emitter_ResetTime;
#include "texturepreview.h"
extern TexturePreview *Particles_TexturePreview;
extern Fl_Group *RandomRateCounterParameters;
extern void psEditorGUI_RandomRateCounter_SetMinRate(Fl_Value_Input*, void*);
extern Fl_Value_Input *RandomRateCounter_MinRate;
extern void psEditorGUI_RandomRateCounter_SetMaxRate(Fl_Value_Input*, void*);
extern Fl_Value_Input *RandomRateCounter_MaxRate;
extern void psEditorGUI_Counter_SetType(Fl_Choice*, void*);
extern Fl_Group *SegmentPlacerParameters;
extern void psEditor_SegmentPlacer_VertexA_SetX(Fl_Value_Input*, void*);
extern Fl_Value_Input *SegmentPlacer_A_X;
extern void psEditor_SegmentPlacer_VertexA_SetY(Fl_Value_Input*, void*);
extern Fl_Value_Input *SegmentPlacer_A_Y;
extern void psEditor_SegmentPlacer_VertexA_SetZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *SegmentPlacer_A_Z;
extern void psEditor_SegmentPlacer_VertexB_SetX(Fl_Value_Input*, void*);
extern Fl_Value_Input *SegmentPlacer_B_X;
extern void psEditor_SegmentPlacer_VertexB_SetY(Fl_Value_Input*, void*);
extern Fl_Value_Input *SegmentPlacer_B_Y;
extern void psEditor_SegmentPlacer_VertexB_SetZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *SegmentPlacer_B_Z;
extern Fl_Group *SectorPlacerParameters;
extern void psEditorGUI_SectorPlacer_Center_SetX(Fl_Value_Input*, void*);
extern Fl_Value_Input *SectorPlacer_X;
extern void psEditorGUI_SectorPlacer_Center_SetY(Fl_Value_Input*, void*);
extern Fl_Value_Input *SectorPlacer_Y;
extern void psEditorGUI_SectorPlacer_Center_SetZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *SectorPlacer_Z;
extern void psEditorGUI_SectorPlacer_SetMinRadius(Fl_Value_Input*, void*);
extern Fl_Value_Input *SectorPlacer_MinRadius;
extern void psEditorGUI_SectorPlacer_SetMaxRadius(Fl_Value_Input*, void*);
extern Fl_Value_Input *SectorPlacer_MaxRadius;
extern void psEditorGUI_SectorPlacer_SetMinPhi(Fl_Value_Input*, void*);
extern Fl_Value_Input *SectorPlacer_MinPhi;
extern void psEditorGUI_SectorPlacer_SetMaxPhi(Fl_Value_Input*, void*);
extern Fl_Value_Input *SectorPlacer_MaxPhi;
extern Fl_Group *PointPlacerParameters;
extern void psEditorGUI_PointPlacer_SetX(Fl_Value_Input*, void*);
extern Fl_Value_Input *PointPlacer_X;
extern void psEditorGUI_PointPlacer_SetY(Fl_Value_Input*, void*);
extern Fl_Value_Input *PointPlacer_Y;
extern void psEditorGUI_PointPlacer_SetZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *PointPlacer_Z;
extern Fl_Group *MultiSegmentPlacerParameters;
#include <FL/Fl_Browser.H>
extern void psEditorGUI_MultiSegmentPlacer_VerticesChanged(Fl_Browser*, void*);
extern Fl_Browser *MultiSegmentPlacer_Vertices;
extern void psEditorGUI_MultiSegmentPlacer_AddVertex(Fl_Button*, void*);
extern void psEditorGUI_MultiSegmentPlacer_DeleteVertex(Fl_Button*, void*);
extern Fl_Button *MultiSegmentPlacer_DeleteVertex;
extern Fl_Group *MultiSegmentPlacer_VertexParameters;
extern void psEditorGUI_MultiSegmentPlacer_Vertex_SetX(Fl_Value_Input*, void*);
extern Fl_Value_Input *MultiSegmentPlacer_X;
extern void psEditorGUI_MultiSegmentPlacer_Vertex_SetY(Fl_Value_Input*, void*);
extern Fl_Value_Input *MultiSegmentPlacer_Y;
extern void psEditorGUI_MultiSegmentPlacer_Vertex_SetZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *MultiSegmentPlacer_Z;
extern void psEditorGUI_Placer_SetType(Fl_Choice*, void*);
extern Fl_Group *RadialShooterParameters;
extern void psEditorGUI_RadialShooter_SetMinTheta(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MinTheta;
extern void psEditorGUI_RadialShooter_SetMaxTheta(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MaxTheta;
extern void psEditorGUI_RadialShooter_SetMinPhi(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MinPhi;
extern void psEditorGUI_RadialShooter_SetMaxPhi(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MaxPhi;
extern void psEditorGUI_RadialShooter_SetMinInitialSpeed(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MinInitialSpeed;
extern void psEditorGUI_RadialShooter_SetMaxInitialSpeed(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MaxInitialSpeed;
extern void psEditorGUI_RadialShooter_SetMinInitialRotationalSpeedX(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MinInitialRotationalSpeedX;
extern void psEditorGUI_RadialShooter_SetMinInitialRotationalSpeedY(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MinInitialRotationalSpeedY;
extern void psEditorGUI_RadialShooter_SetMinInitialRotationalSpeedZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MinInitialRotationalSpeedZ;
extern void psEditorGUI_RadialShooter_SetMaxInitialRotationalSpeedX(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MaxInitialRotationalSpeedX;
extern void psEditorGUI_RadialShooter_SetMaxInitialRotationalSpeedY(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MaxInitialRotationalSpeedY;
extern void psEditorGUI_RadialShooter_SetMaxInitialRotationalSpeedZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *RadialShooter_MaxInitialRotationalSpeedZ;
extern void psEditorGUI_Shooter_SetType(Fl_Choice*, void*);
extern void psEditor_Program_OperatorsChanged(Fl_Browser*, void*);
extern Fl_Browser *Program_Operators;
extern void psEditorGUI_Program_NewForce(Fl_Button*, void*);
extern void psEditorGUI_Program_NewAcceleration(Fl_Button*, void*);
extern void psEditorGUI_Program_NewFluidFriction(Fl_Button*, void*);
extern void psEditorGUI_Program_DeleteOperator(Fl_Button*, void*);
extern Fl_Button *Program_DeleteOperator;
extern Fl_Group *FluidFrictionParameters;
extern void psEditorGUI_FluidFriction_Air(Fl_Button*, void*);
extern void psEditorGUI_FluidFriction_Water(Fl_Button*, void*);
extern void psEditorGUI_FluidFriction_SetDensity(Fl_Value_Input*, void*);
extern Fl_Value_Input *FluidFriction_Density;
extern void psEditorGUI_FluidFriction_SetViscosity(Fl_Value_Input*, void*);
extern Fl_Value_Input *FluidFriction_Viscosity;
extern void psEditorGUI_FluidFriction_SetOverrideRadius(Fl_Value_Input*, void*);
extern Fl_Value_Input *FluidFriction_OverrideRadius;
extern Fl_Group *ForceParameters;
extern void psEditorGUI_Force_SetX(Fl_Value_Input*, void*);
extern Fl_Value_Input *Force_X;
extern void psEditorGUI_Force_SetY(Fl_Value_Input*, void*);
extern Fl_Value_Input *Force_Y;
extern void psEditorGUI_Force_SetZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *Force_Z;
extern Fl_Group *AccelerationParameters;
extern void psEditorGUI_Acceleration_SetX(Fl_Value_Input*, void*);
extern Fl_Value_Input *Acceleration_X;
extern void psEditorGUI_Acceleration_SetY(Fl_Value_Input*, void*);
extern Fl_Value_Input *Acceleration_Y;
extern void psEditorGUI_Acceleration_SetZ(Fl_Value_Input*, void*);
extern Fl_Value_Input *Acceleration_Z;
extern Fl_DT_Window<dtABC::Widget> *viewWidget;
Fl_Double_Window* make_window();
extern Fl_Menu_Item menu_MainMenu[];
extern Fl_Menu_Item menu_Particles_Alignment[];
extern Fl_Menu_Item menu_Particles_Shape[];
extern Fl_Menu_Item menu_Counter[];
extern Fl_Menu_Item menu_Placer[];
extern Fl_Menu_Item menu_Shooter[];
#endif
