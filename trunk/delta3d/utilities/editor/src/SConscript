# Build script for actual level editor application.
import glob
import sys
import re
import os
import string

# Import the variables defined in the global SConstruct build script.
Import ('*')

if 'qt' in env['TOOLS'] :

   EditorEnv = env.Copy(tools = ['qt'])

   # The function returns a list of header files that contain the Q_OBJECT macro.  These
   # are then passed on the the moc builder.
   def getQObjectHeaders(headers) :
      passed = []
      pattern = re.compile("Q_OBJECT")

      #windows has issues with file paths, and since the headers are based
      # on the build path, we need to adjust.
      path = string.replace(GetBuildPath('SConscript'),  'SConscript', '')
   
      headersFixed = []
      for i in headers:
         headersFixed.append(path + i) 

      for header in headersFixed:
         f = open(header)
         while 1 :
            l = f.readline()
            if not l :
               break
            if re.search(pattern,l):
               passed.append(header)
               break   
         f.close()
   
      return passed
   
   # Environment settings for Qt
   qtdir = EditorEnv['QTDIR']
   
   EditorEnv['QT_AUTOSCAN'] = 0
   EditorEnv['QT_LIB'] = ''
   EditorEnv['CXXFILESUFFIX'] = '.cpp'
   EditorEnv.Append(CPPDEFINES = ['QT_THREAD_SUPPORT',
                   'QT_CORE_LIB',
                   'QT_GUI_LIB',
                   'QT_SHARED'])
   
   if OS == 'linux':
      EditorEnv.Append(CPPDEFINES = ['_REENTRANT'])
   elif OS == 'darwin':
      EditorEnv.Append(CPPDEFINES = ['_REENTRANT'])
   
   if OS == 'darwin':
      EditorEnv.Append(CPPPATH = ['#/utilities/editor/inc'] )
   else:
      EditorEnv.Append(CPPPATH = [qtdir + '/include','#/utilities/editor/inc'] )
   
   if mode == 'debug':
      if OS == 'windows':
         EditorEnv.Append(LIBS = ['QtCored4','QtGuid4','QtOpenGLd4','dtDALd','dtCored','dtUtild','dtAudiod','dtChard','dtABCd','dtGamed'])   
      elif OS == 'darwin':
         EditorEnv.Append(LIBS = ['dtDAL','dtCore','dtUtil','dtAudio','dtChar','dtABC','dtGame','plibul'])
         EditorEnv.Append(LINKFLAGS = ' -F' + qtdir + '/lib' )
         EditorEnv.Append(FRAMEWORKS = [ 'QtCore', 'QtGui', 'QtOpenGL' ])
      else:
         EditorEnv.Append(LIBS = ['QtCore','QtGui','QtOpenGL','dtDAL','dtCore','dtUtil','dtAudio','dtChar','dtABC','dtGame','plibul'])   
   else:
      if OS == 'windows':
         EditorEnv.Append(LIBS = ['QtCore4','QtGui4','QtOpenGL4','dtDAL','dtcore','dtaudio','dtchar','dtutil','dtabc','dtGame'])
      elif OS == 'darwin':
         EditorEnv.Append(LIBS = ['dtDAL','dtCore','dtUtil','dtAudio','dtChar','dtABC','dtGame''plibul']) 
         EditorEnv.Append(LINKFLAGS = ' -F' + qtdir + '/lib -framework QtCore -framework QtGui -framework QtOpenGL ' )   
      else:
         EditorEnv.Append(LIBS = ['QtCore','QtGui','QtOpenGL','dtDAL','dtCore','dtUtil','dtAudio','dtChar','dtABC','dtGame','plibul']) 
   
   # First, glob the header directory to obtain a list of potential files to run
   # the moc builder on.
   if OS == 'windows':
      moc_headers = SGlob('..\inc\dtEditQt\*.h')
   else:
      moc_headers = SGlob('../inc/dtEditQt/*.h')
   
   # Next, grep each header file for the Q_OBJECT macro to determine if moc should be run on 
   # it.
   moc_headers = getQObjectHeaders(moc_headers)
   
   # We want the resulting moc files put in a moc subdirectory under the dtEditQt source
   # directory so we need to modify the pathnames of the sources to create the target output
   # file names.
   moc_targets = []
   for currHeader in moc_headers :
      if OS == 'windows':
         parts = currHeader.split("\\")
         target = "moc\moc_" + parts[len(parts)-1]
      else:
         parts = currHeader.split("/")
         target = "moc/moc_" + parts[len(parts)-1]
         
      parts = target.split(".")
      target = parts[0] + EditorEnv['CXXFILESUFFIX']   
      moc_targets.append(target)
      EditorEnv.Moc(target=target, source=currHeader)

   sources = SGlob('*.cpp') + moc_targets
   
   # Build the icon
   if OS == 'windows' :
      sources += env.RES( '../../dtEditQt.rc' )
   
   if mode == 'debug' and OS == 'windows' :
      app = EditorEnv.Program('#/bin/STAGEd',sources)
   else:   
      if EditorEnv['usePrefixHeaders']:
         EditorEnv.Append(CPPFLAGS = " -include inc/prefix/dtstageprefix.h ")
           
      app = EditorEnv.Program('#/bin/STAGE',sources)
   if (app == '[]') :
      result = 'false'
   else :
      result = 'true'
   
   if (result == 'false') :
      errorLog.write("Failed to build the level editor application.\n")
   
   Return('result')
