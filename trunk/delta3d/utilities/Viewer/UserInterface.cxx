// generated by Fast Light User Interface Designer (fluid) version 1.0105

#include "UserInterface.h"

inline void UserInterface::cb_UIMenuFileOpen_i(Fl_Menu_*, void*) {
  const char* path	= UIViewWindow->GetPath();

	Fl_File_Chooser	fileChooser( path, kDefFltr, Fl_File_Chooser::SINGLE, "Load File" );
	fileChooser.preview( 0 );
	fileChooser.show();

	while( fileChooser.visible() )
		Fl::wait();

	if( fileChooser.count() > 0 )
	{
		UIViewWindow->SetPath( fileChooser.directory() );
		LoadFile( fileChooser.value() );
	};
}
void UserInterface::cb_UIMenuFileOpen(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuFileOpen_i(o,v);
}

inline void UserInterface::cb_UIMenuFileSaveAs_i(Fl_Menu_*, void*) {
  char *filename = fl_file_chooser("Save File", 
	"Geometry Files (*.{osg,ive})\tOSG Files (*.osg)\tIVE Files (*.ive)",
	 UIFileList->text() );

	if (filename != NULL)
	{
		SaveFileAs(filename);
	};
}
void UserInterface::cb_UIMenuFileSaveAs(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuFileSaveAs_i(o,v);
}

inline void UserInterface::cb_UIMenuFileQuit_i(Fl_Menu_*, void*) {
  Quit();
}
void UserInterface::cb_UIMenuFileQuit(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuFileQuit_i(o,v);
}

inline void UserInterface::cb_UIMenuViewDisplayCompass_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::COMPASS, UIMenuViewDisplayCompass->value() != 0L );
CompassButton->value( UIMenuViewDisplayCompass->value() != 0L );
}
void UserInterface::cb_UIMenuViewDisplayCompass(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewDisplayCompass_i(o,v);
}

inline void UserInterface::cb_UIMenuViewDisplayXYPlane_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::XY_PLANE, UIMenuViewDisplayXYPlane->value() != 0L );
XYGridButton->value (UIMenuViewDisplayXYPlane->value() != 0L);
}
void UserInterface::cb_UIMenuViewDisplayXYPlane(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewDisplayXYPlane_i(o,v);
}

inline void UserInterface::cb_UIMenuViewDisplayYZPlane_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::YZ_PLANE, UIMenuViewDisplayYZPlane->value() != 0L );
YZGridButton->value( UIMenuViewDisplayYZPlane->value() != 0L );
}
void UserInterface::cb_UIMenuViewDisplayYZPlane(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewDisplayYZPlane_i(o,v);
}

inline void UserInterface::cb_UIMenuViewDisplayZXPlane_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::ZX_PLANE, UIMenuViewDisplayZXPlane->value() != 0L );
YZGridButton->value(UIMenuViewDisplayZXPlane->value() != 0L );
}
void UserInterface::cb_UIMenuViewDisplayZXPlane(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewDisplayZXPlane_i(o,v);
}

inline void UserInterface::cb_UIMenuViewScenePolygon_i(Fl_Menu_*, void*) {
  bool	on(UIMenuViewScenePolygon->value() != 0L);

	UIViewWindow->SetDisplay( ViewState::SCENEPOLY, on );

	if( on )
	{
		UIMenuViewSceneTexture->activate();
		UIMenuViewSceneLighting->activate();
	};
}
void UserInterface::cb_UIMenuViewScenePolygon(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewScenePolygon_i(o,v);
}

inline void UserInterface::cb_UIMenuViewSceneWireframe_i(Fl_Menu_*, void*) {
  bool	on(UIMenuViewSceneWireframe->value() != 0L);

	UIViewWindow->SetDisplay( ViewState::SCENEWIRE, on );

	if( on )
	{
		UIMenuViewSceneTexture->deactivate();
		UIMenuViewSceneLighting->deactivate();
	};
}
void UserInterface::cb_UIMenuViewSceneWireframe(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewSceneWireframe_i(o,v);
}

inline void UserInterface::cb_UIMenuViewSceneScribe_i(Fl_Menu_*, void*) {
  bool	on(UIMenuViewSceneScribe->value() != 0L);

	UIViewWindow->SetDisplay( ViewState::SCENEPOLY | ViewState::SCENEWIRE, on );

	if( on )
	{
		UIMenuViewSceneTexture->activate();
		UIMenuViewSceneLighting->activate();
	};
}
void UserInterface::cb_UIMenuViewSceneScribe(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewSceneScribe_i(o,v);
}

inline void UserInterface::cb_UIMenuViewSceneTexture_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::SCENETXT, UIMenuViewSceneTexture->value() != 0L );
TextureButton->value(UIMenuViewSceneTexture->value() != 0L);
}
void UserInterface::cb_UIMenuViewSceneTexture(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewSceneTexture_i(o,v);
}

inline void UserInterface::cb_UIMenuViewSceneLighting_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::SCENELIGHT, UIMenuViewSceneLighting->value() != 0L );
LightingButton->value(UIMenuViewSceneLighting->value() != 0L);
}
void UserInterface::cb_UIMenuViewSceneLighting(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewSceneLighting_i(o,v);
}

inline void UserInterface::cb_UIMenuViewModelPolygon_i(Fl_Menu_*, void*) {
  bool	on(UIMenuViewModelPolygon->value() != 0L);

	UIViewWindow->SetDisplay( ViewState::POLYGON, on );

	if( on )
	{
		UIMenuViewModelTexture->activate();
		UIMenuViewModelLighting->activate();
	};
}
void UserInterface::cb_UIMenuViewModelPolygon(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewModelPolygon_i(o,v);
}

inline void UserInterface::cb_UIMenuViewModelWireframe_i(Fl_Menu_*, void*) {
  bool	on(UIMenuViewModelWireframe->value() != 0L);

	UIViewWindow->SetDisplay( ViewState::WIREFRAME, on );

	if( on )
	{
		UIMenuViewModelTexture->deactivate();
		UIMenuViewModelLighting->deactivate();
	};
}
void UserInterface::cb_UIMenuViewModelWireframe(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewModelWireframe_i(o,v);
}

inline void UserInterface::cb_UIMenuViewModelScribe_i(Fl_Menu_*, void*) {
  bool	on(UIMenuViewModelScribe->value() != 0L);

	UIViewWindow->SetDisplay( ViewState::POLYGON | ViewState::WIREFRAME, on );

	if( on )
	{
		UIMenuViewModelTexture->activate();
		UIMenuViewModelLighting->activate();
	};
}
void UserInterface::cb_UIMenuViewModelScribe(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewModelScribe_i(o,v);
}

inline void UserInterface::cb_UIMenuViewModelTexture_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::TEXTURE, UIMenuViewModelTexture->value() != 0L );
}
void UserInterface::cb_UIMenuViewModelTexture(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewModelTexture_i(o,v);
}

inline void UserInterface::cb_UIMenuViewModelLighting_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::LIGHTING, UIMenuViewModelLighting->value() != 0L );
}
void UserInterface::cb_UIMenuViewModelLighting(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewModelLighting_i(o,v);
}

inline void UserInterface::cb_UIMenuViewResetCam_i(Fl_Menu_*, void*) {
  UIViewWindow->SetDisplay( ViewState::RESET );
}
void UserInterface::cb_UIMenuViewResetCam(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuViewResetCam_i(o,v);
}

inline void UserInterface::cb_UIMenuMotionFly_i(Fl_Menu_*, void*) {
  UIViewWindow->SetMotion( ViewState::FLY );
MotionFlyButton->setonly();
}
void UserInterface::cb_UIMenuMotionFly(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuMotionFly_i(o,v);
}

inline void UserInterface::cb_UIMenuMotionOrbit_i(Fl_Menu_*, void*) {
  UIViewWindow->SetMotion( ViewState::ORBIT );
MotionOrbButton->setonly();
}
void UserInterface::cb_UIMenuMotionOrbit(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuMotionOrbit_i(o,v);
}

inline void UserInterface::cb_UIMenuMotionUFO_i(Fl_Menu_*, void*) {
  UIViewWindow->SetMotion( ViewState::UFO );
MotionUFOButton->setonly();
}
void UserInterface::cb_UIMenuMotionUFO(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuMotionUFO_i(o,v);
}

inline void UserInterface::cb_UIMenuMotionWalk_i(Fl_Menu_*, void*) {
  UIViewWindow->SetMotion( ViewState::WALK );
MotionWalkButton->setonly();
}
void UserInterface::cb_UIMenuMotionWalk(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuMotionWalk_i(o,v);
}

inline void UserInterface::cb_UIMenuMotionJoy1_i(Fl_Menu_*, void*) {
  UIViewWindow->SetJoystick( ViewState::JOY_1, UIMenuMotionJoy1->value() != 0L );
}
void UserInterface::cb_UIMenuMotionJoy1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuMotionJoy1_i(o,v);
}

inline void UserInterface::cb_UIMenuMotionJoy2_i(Fl_Menu_*, void*) {
  UIViewWindow->SetJoystick( ViewState::JOY_2, UIMenuMotionJoy2->value() != 0L );
}
void UserInterface::cb_UIMenuMotionJoy2(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_UIMenuMotionJoy2_i(o,v);
}

Fl_Menu_Item UserInterface::menu_UIMenu[] = {
 {"&File", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Open", 0,  (Fl_Callback*)UserInterface::cb_UIMenuFileOpen, 0, 128, 0, 0, 14, 56},
 {"&Save As...", 0,  (Fl_Callback*)UserInterface::cb_UIMenuFileSaveAs, 0, 129, 0, 0, 14, 56},
 {"&Quit", 0,  (Fl_Callback*)UserInterface::cb_UIMenuFileQuit, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"&View", 0,  0, 0, 65, 0, 0, 14, 56},
 {"&Display", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Compass", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewDisplayCompass, 0, 130, 0, 0, 14, 56},
 {"&XY Plane", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewDisplayXYPlane, 0, 2, 0, 0, 14, 56},
 {"&YZ Plane", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewDisplayYZPlane, 0, 2, 0, 0, 14, 56},
 {"&ZX Plane", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewDisplayZXPlane, 0, 2, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"&Scene", 0,  0, 0, 64, 0, 0, 14, 56},
 {"&Polygon", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewScenePolygon, 0, 8, 0, 0, 14, 56},
 {"&Wireframe", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewSceneWireframe, 0, 8, 0, 0, 14, 56},
 {"&Scribe", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewSceneScribe, 0, 136, 0, 0, 14, 56},
 {"&Texture", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewSceneTexture, 0, 2, 0, 0, 14, 56},
 {"&Lighting", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewSceneLighting, 0, 2, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"&Model", 0,  0, 0, 192, 0, 0, 14, 56},
 {"&Polygon", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewModelPolygon, 0, 8, 0, 0, 14, 56},
 {"&Wireframe", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewModelWireframe, 0, 8, 0, 0, 14, 56},
 {"&Scribe", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewModelScribe, 0, 136, 0, 0, 14, 56},
 {"&Texture", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewModelTexture, 0, 2, 0, 0, 14, 56},
 {"&Lighting", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewModelLighting, 0, 2, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"&Reset Camera", 0,  (Fl_Callback*)UserInterface::cb_UIMenuViewResetCam, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {"&Motion", 0,  0, 0, 65, 0, 0, 14, 56},
 {"&Fly", 0,  (Fl_Callback*)UserInterface::cb_UIMenuMotionFly, 0, 8, 0, 0, 14, 56},
 {"&Orbit", 0,  (Fl_Callback*)UserInterface::cb_UIMenuMotionOrbit, 0, 8, 0, 0, 14, 56},
 {"&UFO", 0,  (Fl_Callback*)UserInterface::cb_UIMenuMotionUFO, 0, 8, 0, 0, 14, 56},
 {"&Walk", 0,  (Fl_Callback*)UserInterface::cb_UIMenuMotionWalk, 0, 136, 0, 0, 14, 56},
 {"Joystick &1", 0,  (Fl_Callback*)UserInterface::cb_UIMenuMotionJoy1, 0, 3, 0, 0, 14, 56},
 {"Joystick &2", 0,  (Fl_Callback*)UserInterface::cb_UIMenuMotionJoy2, 0, 3, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* UserInterface::UIMenuFile = UserInterface::menu_UIMenu + 0;
Fl_Menu_Item* UserInterface::UIMenuFileOpen = UserInterface::menu_UIMenu + 1;
Fl_Menu_Item* UserInterface::UIMenuFileSaveAs = UserInterface::menu_UIMenu + 2;
Fl_Menu_Item* UserInterface::UIMenuFileQuit = UserInterface::menu_UIMenu + 3;
Fl_Menu_Item* UserInterface::UIMenuView = UserInterface::menu_UIMenu + 5;
Fl_Menu_Item* UserInterface::UIMenuViewDisplay = UserInterface::menu_UIMenu + 6;
Fl_Menu_Item* UserInterface::UIMenuViewDisplayCompass = UserInterface::menu_UIMenu + 7;
Fl_Menu_Item* UserInterface::UIMenuViewDisplayXYPlane = UserInterface::menu_UIMenu + 8;
Fl_Menu_Item* UserInterface::UIMenuViewDisplayYZPlane = UserInterface::menu_UIMenu + 9;
Fl_Menu_Item* UserInterface::UIMenuViewDisplayZXPlane = UserInterface::menu_UIMenu + 10;
Fl_Menu_Item* UserInterface::UIMenuViewScene = UserInterface::menu_UIMenu + 12;
Fl_Menu_Item* UserInterface::UIMenuViewScenePolygon = UserInterface::menu_UIMenu + 13;
Fl_Menu_Item* UserInterface::UIMenuViewSceneWireframe = UserInterface::menu_UIMenu + 14;
Fl_Menu_Item* UserInterface::UIMenuViewSceneScribe = UserInterface::menu_UIMenu + 15;
Fl_Menu_Item* UserInterface::UIMenuViewSceneTexture = UserInterface::menu_UIMenu + 16;
Fl_Menu_Item* UserInterface::UIMenuViewSceneLighting = UserInterface::menu_UIMenu + 17;
Fl_Menu_Item* UserInterface::UIMenuViewModel = UserInterface::menu_UIMenu + 19;
Fl_Menu_Item* UserInterface::UIMenuViewModelPolygon = UserInterface::menu_UIMenu + 20;
Fl_Menu_Item* UserInterface::UIMenuViewModelWireframe = UserInterface::menu_UIMenu + 21;
Fl_Menu_Item* UserInterface::UIMenuViewModelScribe = UserInterface::menu_UIMenu + 22;
Fl_Menu_Item* UserInterface::UIMenuViewModelTexture = UserInterface::menu_UIMenu + 23;
Fl_Menu_Item* UserInterface::UIMenuViewModelLighting = UserInterface::menu_UIMenu + 24;
Fl_Menu_Item* UserInterface::UIMenuViewResetCam = UserInterface::menu_UIMenu + 26;
Fl_Menu_Item* UserInterface::UIMenuMotion = UserInterface::menu_UIMenu + 28;
Fl_Menu_Item* UserInterface::UIMenuMotionFly = UserInterface::menu_UIMenu + 29;
Fl_Menu_Item* UserInterface::UIMenuMotionOrbit = UserInterface::menu_UIMenu + 30;
Fl_Menu_Item* UserInterface::UIMenuMotionUFO = UserInterface::menu_UIMenu + 31;
Fl_Menu_Item* UserInterface::UIMenuMotionWalk = UserInterface::menu_UIMenu + 32;
Fl_Menu_Item* UserInterface::UIMenuMotionJoy1 = UserInterface::menu_UIMenu + 33;
Fl_Menu_Item* UserInterface::UIMenuMotionJoy2 = UserInterface::menu_UIMenu + 34;

inline void UserInterface::cb_TextureButton_i(Fl_Button*, void*) {
  ToggleTextureScene();
}
void UserInterface::cb_TextureButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_TextureButton_i(o,v);
}

inline void UserInterface::cb_LightingButton_i(Fl_Button*, void*) {
  ToggleLightingScene();
}
void UserInterface::cb_LightingButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightingButton_i(o,v);
}

inline void UserInterface::cb_CompassButton_i(Fl_Button*, void*) {
  ToggleCompass();
}
void UserInterface::cb_CompassButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CompassButton_i(o,v);
}

inline void UserInterface::cb_XYGridButton_i(Fl_Button*, void*) {
  ToggleXYPlane();
}
void UserInterface::cb_XYGridButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_XYGridButton_i(o,v);
}

inline void UserInterface::cb_YZGridButton_i(Fl_Button*, void*) {
  ToggleYZPlane();
}
void UserInterface::cb_YZGridButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_YZGridButton_i(o,v);
}

inline void UserInterface::cb_ZXGridButton_i(Fl_Button*, void*) {
  ToggleZXPlane();
}
void UserInterface::cb_ZXGridButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_ZXGridButton_i(o,v);
}

inline void UserInterface::cb_WireframeButton_i(Fl_Button*, void*) {
  ToggleWireframeScene();
}
void UserInterface::cb_WireframeButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WireframeButton_i(o,v);
}

inline void UserInterface::cb_MotionFlyButton_i(Fl_Button*, void*) {
  UIViewWindow->SetMotion( ViewState::FLY );
UIMenuMotionFly->setonly();
}
void UserInterface::cb_MotionFlyButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MotionFlyButton_i(o,v);
}

inline void UserInterface::cb_MotionOrbButton_i(Fl_Button*, void*) {
  UIViewWindow->SetMotion( ViewState::ORBIT );
UIMenuMotionOrbit->setonly();
}
void UserInterface::cb_MotionOrbButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MotionOrbButton_i(o,v);
}

inline void UserInterface::cb_MotionUFOButton_i(Fl_Button*, void*) {
  UIViewWindow->SetMotion( ViewState::UFO );
UIMenuMotionUFO->setonly();
}
void UserInterface::cb_MotionUFOButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MotionUFOButton_i(o,v);
}

inline void UserInterface::cb_MotionWalkButton_i(Fl_Button*, void*) {
  UIViewWindow->SetMotion( ViewState::WALK );
UIMenuMotionWalk->setonly();
}
void UserInterface::cb_MotionWalkButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_MotionWalkButton_i(o,v);
}

inline void UserInterface::cb_Reset_i(Fl_Button*, void*) {
  ResetCam();
}
void UserInterface::cb_Reset(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

UserInterface::UserInterface( int argc , char** argv ) : mArgc(argc), mArgv(argv), mMenusEnabled(false) {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = UIMainWindow = new Fl_Double_Window(748, 536, "Viewer");
    w = o;
    o->user_data((void*)(this));
    { Fl_Menu_Bar* o = UIMenu = new Fl_Menu_Bar(0, 0, 750, 24);
      o->menu(menu_UIMenu);
    }
    { ChoicePopUp* o = UIFileList = new ChoicePopUp(36, 512, 714, 23, "File:");
      o->box(FL_FLAT_BOX);
      o->down_box(FL_BORDER_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->selection_color(FL_SELECTION_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_BLACK);
      o->align(FL_ALIGN_LEFT);
      o->when(FL_WHEN_RELEASE);
    }
    { Fl_Tile* o = new Fl_Tile(0, 23, 755, 487);
      { Fl_Box* o = new Fl_Box(10, 30, 670, 475);
        o->hide();
        Fl_Tile *t = (Fl_Tile*)o->parent();
        t->resizable(o);
      }
      { Fl_Group* o = ToolBox = new Fl_Group(680, 23, 67, 487);
        o->box(FL_THIN_DOWN_BOX);
        { Fl_Button* o = TextureButton = new Fl_Button(701, 40, 25, 25, "T");
          o->tooltip("Toggle Texture");
          o->type(1);
          o->callback((Fl_Callback*)cb_TextureButton);
          o->value(1);
        }
        { Fl_Button* o = LightingButton = new Fl_Button(701, 67, 25, 25, "L");
          o->tooltip("Toggle Lighting");
          o->type(1);
          o->callback((Fl_Callback*)cb_LightingButton);
          o->value(1);
        }
        { Fl_Button* o = CompassButton = new Fl_Button(701, 235, 25, 25, "C");
          o->tooltip("Toggle Compass");
          o->type(1);
          o->callback((Fl_Callback*)cb_CompassButton);
          o->value(1);
        }
        { Fl_Button* o = XYGridButton = new Fl_Button(701, 150, 25, 25, "XY");
          o->tooltip("Toggle XY Grid");
          o->type(1);
          o->callback((Fl_Callback*)cb_XYGridButton);
          o->value(1);
        }
        { Fl_Button* o = YZGridButton = new Fl_Button(701, 177, 25, 25, "YZ");
          o->tooltip("Toggle YZ grid");
          o->type(1);
          o->callback((Fl_Callback*)cb_YZGridButton);
        }
        { Fl_Button* o = ZXGridButton = new Fl_Button(701, 205, 25, 25, "ZX");
          o->tooltip("Toggle ZX grid");
          o->type(1);
          o->callback((Fl_Callback*)cb_ZXGridButton);
        }
        { Fl_Button* o = WireframeButton = new Fl_Button(701, 95, 25, 25, "W");
          o->tooltip("Toggle Wireframe/scribe");
          o->callback((Fl_Callback*)cb_WireframeButton);
        }
        { Fl_Group* o = new Fl_Group(688, 290, 50, 105);
          { Fl_Button* o = MotionFlyButton = new Fl_Button(688, 290, 50, 25, "Fly");
            o->tooltip("Fly Motion Model");
            o->type(102);
            o->callback((Fl_Callback*)cb_MotionFlyButton);
          }
          { Fl_Button* o = MotionOrbButton = new Fl_Button(688, 316, 50, 25, "Orb");
            o->tooltip("Orbit Motion Model");
            o->type(102);
            o->callback((Fl_Callback*)cb_MotionOrbButton);
            o->value(1);
          }
          { Fl_Button* o = MotionUFOButton = new Fl_Button(688, 343, 50, 25, "UFO");
            o->tooltip("UFO Motion Model");
            o->type(102);
            o->callback((Fl_Callback*)cb_MotionUFOButton);
          }
          { Fl_Button* o = MotionWalkButton = new Fl_Button(688, 370, 50, 25, "Walk");
            o->tooltip("Walk Motion Model");
            o->type(102);
            o->callback((Fl_Callback*)cb_MotionWalkButton);
          }
          o->end();
        }
        { Fl_Button* o = new Fl_Button(688, 397, 50, 25, "Reset");
          o->tooltip("Reset the Camera");
          o->callback((Fl_Callback*)cb_Reset);
        }
        o->end();
      }
      { Fl_Group* o = ViewGroup = new Fl_Group(0, 23, 680, 487);
        o->box(FL_DOWN_BOX);
        { ViewWindow* o = UIViewWindow = new ViewWindow(0, 25, 680, 485, "ViewWindow");
          o->box(FL_NO_BOX);
          o->color(FL_BACKGROUND_COLOR);
          o->selection_color(FL_BACKGROUND_COLOR);
          o->labeltype(FL_NORMAL_LABEL);
          o->labelfont(0);
          o->labelsize(14);
          o->labelcolor(FL_BLACK);
          o->align(FL_ALIGN_CENTER);
          o->when(FL_WHEN_RELEASE);
        }
        o->end();
      }
      o->end();
    }
    o->set_non_modal();
    o->end();
    o->resizable(o);
  }
  UIViewWindow->Container( this );
}

void UserInterface::Show() {
  UIMainWindow->show();
	UIViewWindow->CommandLine( mArgc, mArgv );
}

void UserInterface::Quit() {
  UIMainWindow->hide();
}

void UserInterface::LoadFile( std::string pathfile ) {
  if( pathfile == "" )
		return;

	bool fileLoaded = UIViewWindow->LoadFile( pathfile.c_str() );
	if (fileLoaded)
	{
		UIFileList->InsertFile( pathfile, UIViewWindow );

		if( ! mMenusEnabled )
		{
			UIMenuView->activate();
			UIMenuMotion->activate();
			UIMenuFileSaveAs->activate();
			mMenusEnabled	= true;
		}
	}
}

void UserInterface::SaveFileAs( std::string pathfile ) {
  if( pathfile == "" )
		return;

	bool fileSaved = UIViewWindow->SaveFileAs( pathfile.c_str() );
	
	if (fileSaved)
	{

	}
}

void UserInterface::SelectFile( int indx ) {
  UIViewWindow->SelectFile( indx );
	UIFileList->SelectFile( indx );
}

void UserInterface::UpdateSettings( const ViewState* pViewState ) {
  assert( pViewState );


	// display items
	if( pViewState->GetDisplayFlag( ViewState::COMPASS ) )
		UIMenuViewDisplayCompass->set();
	else
		UIMenuViewDisplayCompass->clear();

	if( pViewState->GetDisplayFlag( ViewState::XY_PLANE ) )
		UIMenuViewDisplayXYPlane->set();
	else
		UIMenuViewDisplayXYPlane->clear();

	if( pViewState->GetDisplayFlag( ViewState::YZ_PLANE ) )
		UIMenuViewDisplayYZPlane->set();
	else
		UIMenuViewDisplayYZPlane->clear();

	if( pViewState->GetDisplayFlag( ViewState::ZX_PLANE ) )
		UIMenuViewDisplayZXPlane->set();
	else
		UIMenuViewDisplayZXPlane->clear();


	// scene features
	if( pViewState->GetDisplayFlag( ViewState::SCENEWIRE ) )
	{
		UIMenuViewSceneWireframe->set();
		UIMenuViewSceneTexture->deactivate();
		UIMenuViewSceneLighting->deactivate();
	}
	else
		UIMenuViewSceneWireframe->clear();

	if( pViewState->GetDisplayFlag( ViewState::SCENEPOLY ) )
	{
		UIMenuViewScenePolygon->set();
		UIMenuViewSceneTexture->activate();
		UIMenuViewSceneLighting->activate();
	}
	else
		UIMenuViewScenePolygon->clear();

	if( pViewState->GetDisplayFlag( ViewState::SCENEWIRE )	&&
	    pViewState->GetDisplayFlag( ViewState::SCENEPOLY )	)
	{
		UIMenuViewScenePolygon->clear();
		UIMenuViewSceneWireframe->clear();
		UIMenuViewSceneScribe->set();
	}
	else
	{
		UIMenuViewSceneScribe->clear();
	}

	if( pViewState->GetDisplayFlag( ViewState::SCENETXT ) )
		UIMenuViewSceneTexture->set();
	else
		UIMenuViewSceneTexture->clear();

	if( pViewState->GetDisplayFlag( ViewState::SCENELIGHT ) )
		UIMenuViewSceneLighting->set();
	else
		UIMenuViewSceneLighting->clear();


	// model features
	if( pViewState->GetDisplayFlag( ViewState::WIREFRAME ) )
	{
		UIMenuViewModelWireframe->set();
		UIMenuViewModelTexture->deactivate();
		UIMenuViewModelLighting->deactivate();
	}
	else
		UIMenuViewModelWireframe->clear();

	if( pViewState->GetDisplayFlag( ViewState::POLYGON ) )
	{
		UIMenuViewModelPolygon->set();
		UIMenuViewModelTexture->activate();
		UIMenuViewModelLighting->activate();
	}
	else
		UIMenuViewModelPolygon->clear();

	if( pViewState->GetDisplayFlag( ViewState::WIREFRAME )	&&
	   pViewState->GetDisplayFlag( ViewState::POLYGON )	)
	{
		UIMenuViewModelPolygon->clear();
		UIMenuViewModelWireframe->clear();
		UIMenuViewModelScribe->set();
	}
	else
	{
		UIMenuViewModelScribe->clear();
	}

	if( pViewState->GetDisplayFlag( ViewState::TEXTURE ) )
		UIMenuViewModelTexture->set();
	else
		UIMenuViewModelTexture->clear();

	if( pViewState->GetDisplayFlag( ViewState::LIGHTING ) )
		UIMenuViewModelLighting->set();
	else
		UIMenuViewModelLighting->clear();


	// motion models
	if( pViewState->GetMotionFlag( ViewState::WALK ) )
		UIMenuMotionWalk->setonly();
	else
		UIMenuMotionWalk->clear();

	if( pViewState->GetMotionFlag( ViewState::FLY ) )
		UIMenuMotionFly->setonly();
	else
		UIMenuMotionFly->clear();

	if( pViewState->GetMotionFlag( ViewState::UFO ) )
		UIMenuMotionUFO->setonly();
	else
		UIMenuMotionUFO->clear();

	if( pViewState->GetMotionFlag( ViewState::ORBIT ) )
		UIMenuMotionOrbit->setonly();
	else
		UIMenuMotionOrbit->clear();


	// joysticks
	if( pViewState->GetJoystickFlag( ViewState::JOY_1 ) )
		UIMenuMotionJoy1->set();
	else
		UIMenuMotionJoy1->clear();

	if( pViewState->GetJoystickFlag( ViewState::JOY_2 ) )
		UIMenuMotionJoy2->set();
	else
		UIMenuMotionJoy2->clear();
}

void UserInterface::ToggleWireframeModel() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewModelPolygon->value() )
	{
		UIViewWindow->SetDisplay( ViewState::WIREFRAME, true );

		UIMenuViewModelWireframe->setonly();

		UIMenuViewModelTexture->deactivate();
		UIMenuViewModelLighting->deactivate();

		return;
	}

	if( UIMenuViewModelWireframe->value() )
	{
		UIViewWindow->SetDisplay( ViewState::POLYGON | ViewState::WIREFRAME, true );

		UIMenuViewModelScribe->setonly();

		UIMenuViewModelTexture->activate();
		UIMenuViewModelLighting->activate();

		return;
	}

	if( UIMenuViewModelScribe->value() )
	{
		UIViewWindow->SetDisplay( ViewState::POLYGON, true );

		UIMenuViewModelPolygon->setonly();

		UIMenuViewModelTexture->activate();
		UIMenuViewModelLighting->activate();

		return;
	}
}

void UserInterface::ToggleWireframeScene() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewScenePolygon->value() )
	{
		UIViewWindow->SetDisplay( ViewState::SCENEWIRE, true );

		UIMenuViewSceneWireframe->setonly();

		UIMenuViewSceneTexture->deactivate();
		UIMenuViewSceneLighting->deactivate();

		return;
	}

	if( UIMenuViewSceneWireframe->value() )
	{
		UIViewWindow->SetDisplay( ViewState::SCENEPOLY | ViewState::SCENEWIRE, true );

		UIMenuViewSceneScribe->setonly();

		UIMenuViewSceneTexture->activate();
		UIMenuViewSceneLighting->activate();

		return;
	}

	if( UIMenuViewSceneScribe->value() )
	{
		UIViewWindow->SetDisplay( ViewState::SCENEPOLY, true );

		UIMenuViewScenePolygon->setonly();

		UIMenuViewSceneTexture->activate();
		UIMenuViewSceneLighting->activate();

		return;
	}
}

void UserInterface::ToggleLightingModel() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewModelLighting->active() )
	{
		if( UIMenuViewModelLighting->value() )
		{
			UIMenuViewModelLighting->clear();
			UIViewWindow->SetDisplay( ViewState::LIGHTING, false );
		}
		else
		{
			UIMenuViewModelLighting->set();
			UIViewWindow->SetDisplay( ViewState::LIGHTING, true );
		}
  	}
}

void UserInterface::ToggleLightingScene() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewSceneLighting->active() )
	{
		if( UIMenuViewSceneLighting->value() )
		{
			UIMenuViewSceneLighting->clear();
			UIViewWindow->SetDisplay( ViewState::SCENELIGHT, false );
		}
		else
		{
			UIMenuViewSceneLighting->set();
			UIViewWindow->SetDisplay( ViewState::SCENELIGHT, true );
		}
  	}
}

void UserInterface::ToggleTextureModel() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewModelTexture->active() )
  	{
		if( UIMenuViewModelTexture->value() )
		{
			UIMenuViewModelTexture->clear();
			UIViewWindow->SetDisplay( ViewState::LIGHTING, false );
		}
		else
		{
			UIMenuViewModelTexture->set();
			UIViewWindow->SetDisplay( ViewState::TEXTURE, true );
		}
  	}
}

void UserInterface::ToggleTextureScene() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewSceneTexture->active() )
  	{
		if( UIMenuViewSceneTexture->value() )
		{
			UIMenuViewSceneTexture->clear();
			UIViewWindow->SetDisplay( ViewState::SCENETXT, false );
		}
		else
		{
			UIMenuViewSceneTexture->set();
			UIViewWindow->SetDisplay( ViewState::SCENETXT, true );
		}
  	}
}

void UserInterface::ResetCam() {
  Fl::focus( UIViewWindow );

	UIViewWindow->SetDisplay( ViewState::RESET );
}

void UserInterface::ToggleCompass() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewDisplayCompass->value() )
	{
		UIMenuViewDisplayCompass->clear();
		UIViewWindow->SetDisplay( ViewState::COMPASS, false );
	}
	else
	{
		UIMenuViewDisplayCompass->set();
		UIViewWindow->SetDisplay( ViewState::COMPASS, true );
	}
}

void UserInterface::ToggleXYPlane() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewDisplayXYPlane->value() )
	{
		UIMenuViewDisplayXYPlane->clear();
		UIViewWindow->SetDisplay( ViewState::XY_PLANE, false );
	}
	else
	{
		UIMenuViewDisplayXYPlane->set();
		UIViewWindow->SetDisplay( ViewState::XY_PLANE, true );
	}
}

void UserInterface::ToggleYZPlane() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewDisplayYZPlane->value() )
	{
		UIMenuViewDisplayYZPlane->clear();
		UIViewWindow->SetDisplay( ViewState::YZ_PLANE, false );
	}
	else
	{
		UIMenuViewDisplayYZPlane->set();
		UIViewWindow->SetDisplay( ViewState::YZ_PLANE, true );
	}
}

void UserInterface::ToggleZXPlane() {
  Fl::focus( UIViewWindow );

	if( UIMenuViewDisplayZXPlane->value() )
	{
		UIMenuViewDisplayZXPlane->clear();
		UIViewWindow->SetDisplay( ViewState::ZX_PLANE, false );
	}
	else
	{
		UIMenuViewDisplayZXPlane->set();
		UIViewWindow->SetDisplay( ViewState::ZX_PLANE, true );
	}
}

ChoicePopUp::ChoicePopUp( int nX, int nY, int nW, int nH, const char* pL ) : Fl_Choice(nX,nY,nW,nH,pL) {
}

void ChoicePopUp::InsertFile( std::string szPathFile, ViewWindow* pViewWindow ) {
  // ::add() will mangle the string so we do an "add/replace"
	int nIndx = Fl_Choice::add( "t" );
	Fl_Choice::replace( nIndx, szPathFile.c_str() );
	Fl_Choice::callback( SelectSCB, pViewWindow );
	Fl_Choice::value( nIndx );

	// call the select callback directly
	// because the ::value() function won't
	SelectCB( pViewWindow );
}

void ChoicePopUp::SelectSCB( Fl_Widget* pWidget, void* pViewWindow ) {
  static_cast<ChoicePopUp*>(pWidget)->SelectCB( static_cast<ViewWindow*>(pViewWindow) );
}

void ChoicePopUp::SelectCB( ViewWindow* pViewWindow ) {
  if( pViewWindow == NULL )
		return;

	pViewWindow->SelectFile( Fl_Choice::value() );
}

void ChoicePopUp::SelectFile( int nIndx ) {
  Fl_Choice::value( nIndx );
	Fl_Choice::damage( FL_DAMAGE_ALL  );
}
