# Build script for Animation Viewer application.
import glob
import sys
import re
import os
import string

# Import the variables defined in the global SConstruct build script.
Import ('*')

if env['ENV'].has_key('QTDIR'):

   # The function returns a list of header files that contain the Q_OBJECT macro.  These
   # are then passed on the the moc builder.
   def getQObjectHeaders(headers) :
      passed = []
      pattern = re.compile("Q_OBJECT")

      #windows has issues with file paths, and since the headers are based
      # on the build path, we need to adjust.
      path = string.replace(GetBuildPath('SConscript'),  'SConscript', '')
   
      headersFixed = []
      for i in headers:
         headersFixed.append(path + i) 

      for header in headersFixed:
         f = open(header)
         while 1 :
            l = f.readline()
            if not l :
               break
            if re.search(pattern,l):
               passed.append(header)
               break   
         f.close()
   
      return passed

   # Environment settings for Qt
   qtdir = env['ENV']['QTDIR']
   
   env['QT4_AUTOSCAN'] = 0
   env['QT4_LIB'] = ''
   env['CXXFILESUFFIX'] = '.cpp'
      
   cppDefines = ['QT_THREAD_SUPPORT',
                   'QT_CORE_LIB',
                   'QT_GUI_LIB',
                   'QT_SHARED']

   if env['OS'] == 'linux' or env['OS'] == 'darwin':
      cppDefines += ['_REENTRANT']


   libs = ['QtCore','QtGui','QtOpenGL','dtDAL','dtAI','dtAnim','dtCore','dtUtil','dtAudio','dtABC','dtGame', 'AGL'] 

   initialSources = env.SGlob('*.cpp')

   if "precomp.cpp" in initialSources:
      initialSources.remove("precomp.cpp")

   # First, glob the header directory to obtain a list of potential files to run
   # the moc builder on.
   mocHeaderCandidates = env.SGlob('*.h')

   # Next, grep each header file for the Q_OBJECT macro to determine if moc should be run on 
   # it.
   moc_headers = getQObjectHeaders(mocHeaderCandidates)

   moc_targets = []

   for currHeader in moc_headers :
      if env['OS'] == 'windows':
         parts = currHeader.split("\\")
      else:
         parts = currHeader.split("/")

      target = parts[len(parts)-1][:-2]

      env['QT4_MOCFROMHFLAGS'] =['-I.']
      moc_targets.append(env.Moc4(target=target, source=currHeader))

   if env.get('fastBuild'):
      path = string.replace(env.GetBuildPath('SConscript'),  'SConscript', '')
      cxxFileName = "AnimationViewer.cxx"
      cxxFile = open(path + cxxFileName, "w")
      for srcFile in initalSources :
         cxxFile.write("#include \"" + srcFile + "\"\n")

      sources = [cxxFileName] + moc_targets
   else:
      sources = initialSources + moc_targets

   sources += env.Qrc('AnimationViewerResources.qrc');

   app = env.BuildProgram('AnimationViewer', sources, libs, cppDefines)
      
   if (app == '[]') :
      result = 'false'
   else :
      result = 'true'

   if (result == 'false') :
      errorLog.write("Failed to build AnimationViewer.\n")

   Return('result')
