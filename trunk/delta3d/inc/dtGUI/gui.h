#ifndef GUI_h__
#define GUI_h__

#include <dtGUI/export.h>
#include <dtCore/base.h>
#include <dtCore/refptr.h>
#include <dtGUI/ceguimouselistener.h>
#include <dtGUI/ceguikeyboardlistener.h>
#include <dtGUI/widget.h>
#include <CEGUI/CEGUIEvent.h>

/// @cond DOXYGEN_SHOULD_SKIP_THIS
namespace osg
{
   class Geode;
   class Camera;
}
/// @endcond

namespace dtCore
{
   class Camera;
   class Keyboard;
   class Mouse;
}

namespace dtGUI
{
   class DT_GUI_EXPORT GUI : public dtCore::Base
   {
   public:
      DECLARE_MANAGEMENT_LAYER(GUI)

      GUI(dtCore::Camera* pTargetCamera,
          dtCore::Keyboard* pObservedKeyboard = NULL,
          dtCore::Mouse* pObservedMouse = NULL);

      ///sets the rendertarget (camera) for the gui-object
      void SetCamera(dtCore::Camera* pTargetCamera);

      ///sets the mouse-object from which the gui receives events
      void SetMouse(dtCore::Mouse* pObservedMouse);

      ///sets keyboard-object which is used for input
      void SetKeyboard(dtCore::Keyboard* pObservedKeyboard);

      /// shortcut/wrapper to CEGUI::SchemeManager::loadScheme
      static void LoadScheme(const std::string& sFileName, const std::string& sResourceGroup = "");

      /// shortcut/wrapper to CEGUI::System::getSingleton().setMouseCursor
      static void SetMouseCursor(const std::string& sImagesetName, const std::string& sImageName);

      ///returns default sheet (autogenerated root-window)
      inline Widget* GetRootSheet() { return m_pRootsheet; }

      ///returns default sheet (autogenerated root-window)
      inline const Widget* GetRootSheet() const { return m_pRootsheet; }

      ///loads a layout-file
      Widget* LoadLayout(const std::string& sFileName, const std::string& sPrefix="", const std::string& sResourceGroup = "");

      ///loads a layout-file and add it to the given Widget(which should a child of the gui)
      Widget* LoadLayout(Widget* pWidgetParent, const std::string& sFileName, const std::string& sPrefix="", const std::string& sResourceGroup = "");


      ///creates/adds a widget to a given parent
      Widget* CreateWidget(Widget* pParentWidget, const std::string& sWidgetTypeName, const std::string& sWidgetName="");

      ///creates/adds a widget to root-sheet
      Widget* CreateWidget(const std::string& sWidgetTypeName, const std::string& sWidgetName="");

      ///searches widget by it's name
      Widget* GetWidget(const std::string& sWidgetName);

      static void SetResourceGroupDirectory(const std::string& resourceType, const std::string& directory);

      typedef CEGUI::Event::Subscriber Subscriber;
      CEGUI::Event::Connection SubscribeEvent(const std::string& widgetName, const std::string& event, GUI::Subscriber subscriber);
      CEGUI::Event::Connection SubscribeEvent(Widget& widget, const std::string& event, GUI::Subscriber subscriber);

   protected:
      virtual ~GUI();
   	
   private:
      void _SetupInternalGraph();
      void _SetupDefaultUI();

      ///used to receive "preframe"-delta-messages
      void OnMessage(dtCore::Base::MessageData *data);

      static void _SetupSystemAndRenderer();
      static bool SystemAndRendererCreatedByHUD;

      dtCore::RefPtr<dtGUI::CEGUIKeyboardListener> m_pKeyboardListener; ///needed for injection mouse-events to the cegui
      dtCore::RefPtr<dtGUI::CEGUIMouseListener>    m_pMouseListener; ///needed for injection keyboard-events to the cegui
      osg::Geode*                                  m_pInternalGraph; ///osg graph used to render the gui
      CEGUI::Window*                        m_pRootsheet; ///auto-generated panel-window

      dtCore::RefPtr<osg::Camera>           m_pCamera; ///camera, whose viewport is used to draw the gui
      dtCore::RefPtr<dtCore::Keyboard>      m_pKeyboard; ///observed keyboard
      dtCore::RefPtr<dtCore::Mouse>         m_pMouse; ///observed mouse

   };
}
#endif // GUI_h__
