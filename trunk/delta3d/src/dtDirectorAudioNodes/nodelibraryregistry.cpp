/*
 * Delta3D Open Source Game and Simulation Engine
 * Copyright (C) 2008 MOVES Institute
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 * Author: Jeff P. Houde
 */

#include <dtDirector/nodetype.h>
#include <dtDirectorAudioNodes/nodelibraryregistry.h>

// Events

// Actions
#include <dtDirectorAudioNodes/soundaction.h>

// Values


using dtCore::RefPtr;

namespace dtDirector
{
   // Category naming convention:
   //  Core        - All Core nodes are nodes that are specifically referenced
   //                in Director and are special cases.
   //
   //  General     - General nodes provide general functionality that can be used
   //                in most, if not all, script types.
   //
   //  Value Ops   - Value Operation nodes are any nodes that perform an operation
   //                on values.
   //
   //  Conditional - Conditional nodes have multiple outputs that get triggered
   //                when a condition is met.
   //
   //  Cinematic   - Cinematic nodes are nodes that are auto-generated by the
   //                cinematic editor tool.

   // Events

   // Actions
   RefPtr<NodeType> NodeLibraryRegistry::SOUND_ACTION_NODE_TYPE(new dtDirector::NodeType("Sound", "Audio", "Audio", "Control a sound resource."));

   // Values

   //////////////////////////////////////////////////////////////////////////
   extern "C" AUDIO_NODE_LIBRARY_EXPORT dtDirector::NodePluginRegistry* CreatePluginRegistry()
   {
      return new NodeLibraryRegistry;
   }

   //////////////////////////////////////////////////////////////////////////
   extern "C" AUDIO_NODE_LIBRARY_EXPORT void DestroyPluginRegistry(dtDirector::NodePluginRegistry* registry)
   {
      delete registry;
   }

   //////////////////////////////////////////////////////////////////////////
   NodeLibraryRegistry::NodeLibraryRegistry()
      : dtDirector::NodePluginRegistry("dtDirectorAudioNodes", "Nodes used with the dtAudio library.")
   {
   }

   //////////////////////////////////////////////////////////////////////////
   void NodeLibraryRegistry::RegisterNodeTypes()
   {
      // Events

      // Actions
      mNodeFactory->RegisterType<SoundAction>(SOUND_ACTION_NODE_TYPE.get());

      // Values
   }
}
