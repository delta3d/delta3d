// generated by Fast Light User Interface Designer (fluid) version 1.0109

#include "../../inc/dtInspector/gui_fltk.h"

void UserInterface::cb_InstanceList_i(Fl_Browser*, void* v) {
  ((UserInterface*)v)->SelectInstance();
}
void UserInterface::cb_InstanceList(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_InstanceList_i(o,v);
}

void UserInterface::cb_BaseName_i(Fl_Input* o, void* v) {
  ((UserInterface*)v)->BaseNameCB(o);
}
void UserInterface::cb_BaseName(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_BaseName_i(o,v);
}

void UserInterface::cb__i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->DrawableAddChildCB(o);
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

void UserInterface::cb_1_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->DrawableRemChildCB(o);
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

void UserInterface::cb_TransformX_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformX(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformX_i(o,v);
}

void UserInterface::cb_TransformY_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformY(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformY_i(o,v);
}

void UserInterface::cb_TransformZ_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformZ(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformZ_i(o,v);
}

void UserInterface::cb_TransformH_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformH(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformH_i(o,v);
}

void UserInterface::cb_TransformP_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformP(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformP_i(o,v);
}

void UserInterface::cb_TransformR_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformR(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformR_i(o,v);
}

void UserInterface::cb_TransformCSAbsButton_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->TransformCSCB(o);
}
void UserInterface::cb_TransformCSAbsButton(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_TransformCSAbsButton_i(o,v);
}

void UserInterface::cb_TransformCSRelButton_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->TransformCSCB(o);
}
void UserInterface::cb_TransformCSRelButton(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_TransformCSRelButton_i(o,v);
}

void UserInterface::cb_LoadableFilename_i(Fl_Input* o, void* v) {
  ((UserInterface*)v)->LoadableFileCB(o);
}
void UserInterface::cb_LoadableFilename(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_LoadableFilename_i(o,v);
}

void UserInterface::cb_2_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->LoadableLoadFileCB(o);
}
void UserInterface::cb_2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

void UserInterface::cb_CameraClearRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CameraClearColorCB(o);
}
void UserInterface::cb_CameraClearRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CameraClearRed_i(o,v);
}

void UserInterface::cb_CameraClearGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CameraClearColorCB(o);
}
void UserInterface::cb_CameraClearGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CameraClearGreen_i(o,v);
}

void UserInterface::cb_CameraClearBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CameraClearColorCB(o);
}
void UserInterface::cb_CameraClearBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CameraClearBlue_i(o,v);
}

void UserInterface::cb_CameraClearLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->CameraClearColorBrowserCB(o);
}
void UserInterface::cb_CameraClearLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CameraClearLoadButton_i(o,v);
}

void UserInterface::cb_CameraWinChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->CameraWinCB(o);
}
void UserInterface::cb_CameraWinChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_CameraWinChoice_i(o,v);
}

void UserInterface::cb_Next_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->CamStatisticsCB(o);
}
void UserInterface::cb_Next(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Next_i(o,v);
}

void UserInterface::cb_WinPosW_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->WinPosCB(o);
}
void UserInterface::cb_WinPosW(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinPosW_i(o,v);
}

void UserInterface::cb_WinPosH_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->WinPosCB(o);
}
void UserInterface::cb_WinPosH(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinPosH_i(o,v);
}

void UserInterface::cb_WinSizeButton_i(Fl_Menu_Button* o, void* v) {
  ((UserInterface*)v)->WinSizeCB(o);
}
void UserInterface::cb_WinSizeButton(Fl_Menu_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinSizeButton_i(o,v);
}

Fl_Menu_Item UserInterface::menu_WinSizeButton[] = {
 {"640x480", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"800x600", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"1024x768", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"1280x1024", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"1600x1200", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_WinPosX_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->WinPosCB(o);
}
void UserInterface::cb_WinPosX(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinPosX_i(o,v);
}

void UserInterface::cb_WinPosY_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->WinPosCB(o);
}
void UserInterface::cb_WinPosY(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinPosY_i(o,v);
}

void UserInterface::cb_WinCursorToggle_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->WinCursorCB(o);
}
void UserInterface::cb_WinCursorToggle(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WinCursorToggle_i(o,v);
}

void UserInterface::cb_WinTitle_i(Fl_Input* o, void* v) {
  ((UserInterface*)v)->WinTitleCB(o);
}
void UserInterface::cb_WinTitle(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WinTitle_i(o,v);
}

void UserInterface::cb_WinFullScreenToggle_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->WinFullScreenCB(o);
}
void UserInterface::cb_WinFullScreenToggle(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WinFullScreenToggle_i(o,v);
}

void UserInterface::cb_ViewSceneChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->ViewSceneCB(o);
}
void UserInterface::cb_ViewSceneChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_ViewSceneChoice_i(o,v);
}

void UserInterface::cb_ViewCameraChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->ViewCameraCB(o);
}
void UserInterface::cb_ViewCameraChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_ViewCameraChoice_i(o,v);
}

void UserInterface::cb_SkyBoxBaseRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->SkyBoxBaseColorCB(o);
}
void UserInterface::cb_SkyBoxBaseRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBoxBaseRed_i(o,v);
}

void UserInterface::cb_SkyBoxBaseGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->SkyBoxBaseColorCB(o);
}
void UserInterface::cb_SkyBoxBaseGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBoxBaseGreen_i(o,v);
}

void UserInterface::cb_SkyBoxBaseBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->SkyBoxBaseColorCB(o);
}
void UserInterface::cb_SkyBoxBaseBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBoxBaseBlue_i(o,v);
}

void UserInterface::cb_SkyBoxBaseColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->SkyBoxBaseColorBrowserCB(o);
}
void UserInterface::cb_SkyBoxBaseColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBoxBaseColorLoadButton_i(o,v);
}

void UserInterface::cb_FogRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogColorCB(o);
}
void UserInterface::cb_FogRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_FogRed_i(o,v);
}

void UserInterface::cb_FogGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogColorCB(o);
}
void UserInterface::cb_FogGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_FogGreen_i(o,v);
}

void UserInterface::cb_FogBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogColorCB(o);
}
void UserInterface::cb_FogBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_FogBlue_i(o,v);
}

void UserInterface::cb_FogColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->EnvFogColorBrowserCB(o);
}
void UserInterface::cb_FogColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_FogColorLoadButton_i(o,v);
}

void UserInterface::cb_AdvFogTurbidity_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvAdvFogCB(o);
}
void UserInterface::cb_AdvFogTurbidity(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_AdvFogTurbidity_i(o,v);
}

void UserInterface::cb_AdvFogEnergy_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvAdvFogCB(o);
}
void UserInterface::cb_AdvFogEnergy(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_AdvFogEnergy_i(o,v);
}

void UserInterface::cb_AdvFogMolecules_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvAdvFogCB(o);
}
void UserInterface::cb_AdvFogMolecules(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_AdvFogMolecules_i(o,v);
}

void UserInterface::cb_EnvFogVis_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogVisCB(o);
}
void UserInterface::cb_EnvFogVis(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_EnvFogVis_i(o,v);
}

void UserInterface::cb_EnvFogNear_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogNearCB(o);
}
void UserInterface::cb_EnvFogNear(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_EnvFogNear_i(o,v);
}

void UserInterface::cb_EnvFogMode_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->EnvFogModeCB(o);
}
void UserInterface::cb_EnvFogMode(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_EnvFogMode_i(o,v);
}

Fl_Menu_Item UserInterface::menu_EnvFogMode[] = {
 {"Linear", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exp", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Exp2", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Advanced", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_EnvFogEnable_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->EnvFogEnableCB(o);
}
void UserInterface::cb_EnvFogEnable(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_EnvFogEnable_i(o,v);
}

void UserInterface::cb_SkyRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvSkyColorCB(o);
}
void UserInterface::cb_SkyRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyRed_i(o,v);
}

void UserInterface::cb_SkyGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvSkyColorCB(o);
}
void UserInterface::cb_SkyGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyGreen_i(o,v);
}

void UserInterface::cb_SkyBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvSkyColorCB(o);
}
void UserInterface::cb_SkyBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBlue_i(o,v);
}

void UserInterface::cb_SkyColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->EnvSkyColorBrowserCB(o);
}
void UserInterface::cb_SkyColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyColorLoadButton_i(o,v);
}

void UserInterface::cb_EnvRefLat_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvRefPosCB(o);
}
void UserInterface::cb_EnvRefLat(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvRefLat_i(o,v);
}

void UserInterface::cb_EnvRefLong_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvRefPosCB(o);
}
void UserInterface::cb_EnvRefLong(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvRefLong_i(o,v);
}

void UserInterface::cb_EnvTimeOfDay_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->EnvTimeCB(o);
}
void UserInterface::cb_EnvTimeOfDay(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvTimeOfDay_i(o,v);
}

void UserInterface::cb_EnvYear_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvDateTimeCB(o);
}
void UserInterface::cb_EnvYear(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvYear_i(o,v);
}

void UserInterface::cb_EnvMonth_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvDateTimeCB(o);
}
void UserInterface::cb_EnvMonth(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvMonth_i(o,v);
}

void UserInterface::cb_EnvDay_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvDateTimeCB(o);
}
void UserInterface::cb_EnvDay(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvDay_i(o,v);
}

void UserInterface::cb_InfRegenerateButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->InfRegenerateCB(o);
}
void UserInterface::cb_InfRegenerateButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_InfRegenerateButton_i(o,v);
}

void UserInterface::cb_InfSmoothCollision_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->InfSmoothCDCB(o);
}
void UserInterface::cb_InfSmoothCollision(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_InfSmoothCollision_i(o,v);
}

void UserInterface::cb_cScale_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudScaleCB(o);
}
void UserInterface::cb_cScale(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cScale_i(o,v);
}

void UserInterface::cb_cCutoff_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudCutoffCB(o);
}
void UserInterface::cb_cCutoff(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cCutoff_i(o,v);
}

void UserInterface::cb_cExponent_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudExponentCB(o);
}
void UserInterface::cb_cExponent(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cExponent_i(o,v);
}

void UserInterface::cb_cBias_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudBiasCB(o);
}
void UserInterface::cb_cBias(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cBias_i(o,v);
}

void UserInterface::cb_CloudRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CloudColorCB(o);
}
void UserInterface::cb_CloudRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CloudRed_i(o,v);
}

void UserInterface::cb_CloudGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CloudColorCB(o);
}
void UserInterface::cb_CloudGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CloudGreen_i(o,v);
}

void UserInterface::cb_CloudBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CloudColorCB(o);
}
void UserInterface::cb_CloudBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CloudBlue_i(o,v);
}

void UserInterface::cb_CloudColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->CloudColorBrowserCB(o);
}
void UserInterface::cb_CloudColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CloudColorLoadButton_i(o,v);
}

void UserInterface::cb_cSpeedX_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudWindCB(o);
}
void UserInterface::cb_cSpeedX(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cSpeedX_i(o,v);
}

void UserInterface::cb_cSpeedY_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudWindCB(o);
}
void UserInterface::cb_cSpeedY(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cSpeedY_i(o,v);
}

void UserInterface::cb_cEnable_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->CloudEnableCB(o);
}
void UserInterface::cb_cEnable(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_cEnable_i(o,v);
}

void UserInterface::cb_WeatherTimePeriodChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->WeatherTimeCB(o);
}
void UserInterface::cb_WeatherTimePeriodChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WeatherTimePeriodChoice_i(o,v);
}

Fl_Menu_Item UserInterface::menu_WeatherTimePeriodChoice[] = {
 {"Dawn", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Day", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Dusk", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Night", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_WeatherSeasonChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->WeatherSeasonCB(o);
}
void UserInterface::cb_WeatherSeasonChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WeatherSeasonChoice_i(o,v);
}

Fl_Menu_Item UserInterface::menu_WeatherSeasonChoice[] = {
 {"Spring", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Summer", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Fall", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Winter", 0,  0, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_WeatherCloudSlider_i(Fl_Slider* o, void* v) {
  ((UserInterface*)v)->WeatherCustomCloudCB(o);
}
void UserInterface::cb_WeatherCloudSlider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherCloudSlider_i(o,v);
}

void UserInterface::cb_WeatherWindSlider_i(Fl_Slider* o, void* v) {
  ((UserInterface*)v)->WeatherCustomWindCB(o);
}
void UserInterface::cb_WeatherWindSlider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherWindSlider_i(o,v);
}

void UserInterface::cb_WeatherVisSlider_i(Fl_Slider* o, void* v) {
  ((UserInterface*)v)->WeatherCustomVisCB(o);
}
void UserInterface::cb_WeatherVisSlider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherVisSlider_i(o,v);
}

void UserInterface::cb_WeatherThemeOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCustomOptionCB(o);
}
void UserInterface::cb_WeatherThemeOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeOption_i(o,v);
}

void UserInterface::cb_WeatherCustomOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCustomOptionCB(o);
}
void UserInterface::cb_WeatherCustomOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherCustomOption_i(o,v);
}

void UserInterface::cb_WeatherThemeClearOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeClearOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeClearOption_i(o,v);
}

void UserInterface::cb_WeatherThemeFairOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeFairOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeFairOption_i(o,v);
}

void UserInterface::cb_WeatherThemeFoggyOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeFoggyOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeFoggyOption_i(o,v);
}

void UserInterface::cb_WeatherThemeRainyOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeRainyOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeRainyOption_i(o,v);
}

void UserInterface::cb_WeatherThemeCustomOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeCustomOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeCustomOption_i(o,v);
}

void UserInterface::cb_WeatherRateOfChangeSlider_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->WeatherRateOfChangeCB(o);
}
void UserInterface::cb_WeatherRateOfChangeSlider(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WeatherRateOfChangeSlider_i(o,v);
}

void UserInterface::cb_LightNumberInput_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightNumCB(o);
}
void UserInterface::cb_LightNumberInput(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_LightNumberInput_i(o,v);
}

void UserInterface::cb_LightModeLocal_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->LightModeCB(o);
}
void UserInterface::cb_LightModeLocal(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightModeLocal_i(o,v);
}

void UserInterface::cb_LightModeGlobal_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->LightModeCB(o);
}
void UserInterface::cb_LightModeGlobal(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightModeGlobal_i(o,v);
}

void UserInterface::cb_LightDifRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightDifColorCB(o);
}
void UserInterface::cb_LightDifRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightDifRed_i(o,v);
}

void UserInterface::cb_LightDifGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightDifColorCB(o);
}
void UserInterface::cb_LightDifGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightDifGreen_i(o,v);
}

void UserInterface::cb_LightDifBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightDifColorCB(o);
}
void UserInterface::cb_LightDifBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightDifBlue_i(o,v);
}

void UserInterface::cb_LightDifColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->LightDifColorBrowserCB(o);
}
void UserInterface::cb_LightDifColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightDifColorLoadButton_i(o,v);
}

void UserInterface::cb_LightAmbRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAmbColorCB(o);
}
void UserInterface::cb_LightAmbRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightAmbRed_i(o,v);
}

void UserInterface::cb_LightAmbGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAmbColorCB(o);
}
void UserInterface::cb_LightAmbGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightAmbGreen_i(o,v);
}

void UserInterface::cb_LightAmbBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAmbColorCB(o);
}
void UserInterface::cb_LightAmbBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightAmbBlue_i(o,v);
}

void UserInterface::cb_LightAmbColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->LightAmbColorBrowserCB(o);
}
void UserInterface::cb_LightAmbColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightAmbColorLoadButton_i(o,v);
}

void UserInterface::cb_LightSpecRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpecColorCB(o);
}
void UserInterface::cb_LightSpecRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightSpecRed_i(o,v);
}

void UserInterface::cb_LightSpecGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpecColorCB(o);
}
void UserInterface::cb_LightSpecGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightSpecGreen_i(o,v);
}

void UserInterface::cb_LightSpecBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpecColorCB(o);
}
void UserInterface::cb_LightSpecBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightSpecBlue_i(o,v);
}

void UserInterface::cb_LightSpecColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->LightSpecColorBrowserCB(o);
}
void UserInterface::cb_LightSpecColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightSpecColorLoadButton_i(o,v);
}

void UserInterface::cb_LightConstAtt_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAttCB(o);
}
void UserInterface::cb_LightConstAtt(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightConstAtt_i(o,v);
}

void UserInterface::cb_LightLinAtt_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAttCB(o);
}
void UserInterface::cb_LightLinAtt(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightLinAtt_i(o,v);
}

void UserInterface::cb_LightQuadAtt_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAttCB(o);
}
void UserInterface::cb_LightQuadAtt(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightQuadAtt_i(o,v);
}

void UserInterface::cb_LightExponentInput_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpotCB(o);
}
void UserInterface::cb_LightExponentInput(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_LightExponentInput_i(o,v);
}

void UserInterface::cb_LightCutoffInput_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpotCB(o);
}
void UserInterface::cb_LightCutoffInput(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_LightCutoffInput_i(o,v);
}

void UserInterface::cb_InfLightAzInput_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->InfLightCB(o);
}
void UserInterface::cb_InfLightAzInput(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_InfLightAzInput_i(o,v);
}

void UserInterface::cb_InfLightElevInput_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->InfLightCB(o);
}
void UserInterface::cb_InfLightElevInput(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_InfLightElevInput_i(o,v);
}

void UserInterface::cb_ParticleEnabled_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->ParticleEnabledCB(o);
}
void UserInterface::cb_ParticleEnabled(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_ParticleEnabled_i(o,v);
}

void UserInterface::cb_ParticleParentRelative_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->ParticleRelativeCB(o);
}
void UserInterface::cb_ParticleParentRelative(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_ParticleParentRelative_i(o,v);
}

Fl_Double_Window* UserInterface::make_window() {
  { MainWindow = new Fl_Double_Window(545, 555, "dtCore");
    MainWindow->user_data((void*)(this));
    { InstanceList = new Fl_Browser(10, 5, 220, 120);
      InstanceList->type(1);
      InstanceList->callback((Fl_Callback*)cb_InstanceList, (void*)(this));
    } // Fl_Browser* InstanceList
    { InstanceClassName = new Fl_Box(235, 15, 300, 30);
      InstanceClassName->box(FL_BORDER_BOX);
      InstanceClassName->color((Fl_Color)46);
      InstanceClassName->labelfont(2);
      InstanceClassName->labelsize(18);
    } // Fl_Box* InstanceClassName
    { BaseGroup = new Fl_Group(235, 60, 300, 65);
      BaseGroup->box(FL_ENGRAVED_FRAME);
      BaseGroup->align(FL_ALIGN_TOP_LEFT);
      { BaseName = new Fl_Input(295, 65, 230, 25, "Name:");
        BaseName->tooltip("The name of this instance");
        BaseName->callback((Fl_Callback*)cb_BaseName, (void*)(this));
        BaseName->when(FL_WHEN_ENTER_KEY);
      } // Fl_Input* BaseName
      { BaseReferenceCount = new Fl_Value_Output(295, 95, 60, 25, "Ref:");
        BaseReferenceCount->tooltip("The current reference count");
      } // Fl_Value_Output* BaseReferenceCount
      BaseGroup->end();
    } // Fl_Group* BaseGroup
    { DrawableGroup = new Fl_Group(10, 145, 230, 105, "Drawable");
      DrawableGroup->box(FL_ENGRAVED_FRAME);
      DrawableGroup->align(FL_ALIGN_TOP_LEFT);
      DrawableGroup->hide();
      { DrawableChildList = new Fl_Browser(70, 180, 135, 65, "Children");
        DrawableChildList->type(3);
        DrawableChildList->align(FL_ALIGN_LEFT);
      } // Fl_Browser* DrawableChildList
      { Fl_Button* o = new Fl_Button(210, 180, 25, 25);
        o->tooltip("Add a child to the list");
        o->callback((Fl_Callback*)cb_, (void*)(this));
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(210, 215, 25, 25);
        o->tooltip("Remove a child from the list");
        o->callback((Fl_Callback*)cb_1, (void*)(this));
      } // Fl_Button* o
      { DrawableParentText = new Fl_Output(75, 150, 130, 25, "Parent:");
        DrawableParentText->box(FL_ENGRAVED_FRAME);
      } // Fl_Output* DrawableParentText
      DrawableGroup->end();
    } // Fl_Group* DrawableGroup
    { TransformGroup = new Fl_Group(245, 145, 295, 105, "Transformable");
      TransformGroup->box(FL_ENGRAVED_FRAME);
      TransformGroup->align(FL_ALIGN_TOP_LEFT);
      TransformGroup->hide();
      { TransformX = new Fl_Value_Input(265, 185, 60, 20, "X:");
        TransformX->minimum(-500000);
        TransformX->maximum(500000);
        TransformX->step(0.1);
        TransformX->callback((Fl_Callback*)cb_TransformX, (void*)(this));
      } // Fl_Value_Input* TransformX
      { TransformY = new Fl_Value_Input(265, 205, 60, 20, "Y:");
        TransformY->minimum(-500000);
        TransformY->maximum(500000);
        TransformY->step(0.1);
        TransformY->callback((Fl_Callback*)cb_TransformY, (void*)(this));
      } // Fl_Value_Input* TransformY
      { TransformZ = new Fl_Value_Input(265, 225, 60, 20, "Z:");
        TransformZ->minimum(-500000);
        TransformZ->maximum(500000);
        TransformZ->step(0.1);
        TransformZ->callback((Fl_Callback*)cb_TransformZ, (void*)(this));
      } // Fl_Value_Input* TransformZ
      { TransformH = new Fl_Value_Input(355, 185, 60, 20, "H:");
        TransformH->minimum(-500000);
        TransformH->maximum(500000);
        TransformH->step(0.1);
        TransformH->callback((Fl_Callback*)cb_TransformH, (void*)(this));
      } // Fl_Value_Input* TransformH
      { TransformP = new Fl_Value_Input(355, 205, 60, 20, "P:");
        TransformP->minimum(-500000);
        TransformP->maximum(500000);
        TransformP->step(0.1);
        TransformP->callback((Fl_Callback*)cb_TransformP, (void*)(this));
      } // Fl_Value_Input* TransformP
      { TransformR = new Fl_Value_Input(355, 225, 60, 20, "R:");
        TransformR->minimum(-500000);
        TransformR->maximum(500000);
        TransformR->step(0.1);
        TransformR->callback((Fl_Callback*)cb_TransformR, (void*)(this));
      } // Fl_Value_Input* TransformR
      { Fl_Group* o = new Fl_Group(310, 150, 165, 30, "System");
        o->box(FL_THIN_DOWN_FRAME);
        o->align(FL_ALIGN_LEFT);
        { TransformCSAbsButton = new Fl_Round_Button(315, 155, 80, 20, "Absolute");
          TransformCSAbsButton->tooltip("The position/attitude reflects an Absolute Coordinate System");
          TransformCSAbsButton->type(102);
          TransformCSAbsButton->down_box(FL_ROUND_DOWN_BOX);
          TransformCSAbsButton->value(1);
          TransformCSAbsButton->callback((Fl_Callback*)cb_TransformCSAbsButton, (void*)(this));
        } // Fl_Round_Button* TransformCSAbsButton
        { TransformCSRelButton = new Fl_Round_Button(395, 155, 75, 20, "Relative");
          TransformCSRelButton->tooltip("The position/attitude reflects a Relative Coordinate System");
          TransformCSRelButton->type(102);
          TransformCSRelButton->down_box(FL_ROUND_DOWN_BOX);
          TransformCSRelButton->callback((Fl_Callback*)cb_TransformCSRelButton, (void*)(this));
        } // Fl_Round_Button* TransformCSRelButton
        o->end();
      } // Fl_Group* o
      TransformGroup->end();
    } // Fl_Group* TransformGroup
    { LoadableGroup = new Fl_Group(245, 259, 290, 36);
      LoadableGroup->box(FL_ENGRAVED_FRAME);
      LoadableGroup->align(FL_ALIGN_TOP_LEFT);
      LoadableGroup->hide();
      { LoadableFilename = new Fl_Input(285, 265, 210, 25, "File");
        LoadableFilename->callback((Fl_Callback*)cb_LoadableFilename, (void*)(this));
        LoadableFilename->when(FL_WHEN_ENTER_KEY);
      } // Fl_Input* LoadableFilename
      { Fl_Button* o = new Fl_Button(500, 265, 25, 25, "...");
        o->callback((Fl_Callback*)cb_2, (void*)(this));
      } // Fl_Button* o
      LoadableGroup->end();
    } // Fl_Group* LoadableGroup
    { CameraGroup = new Fl_Group(10, 265, 530, 120);
      CameraGroup->box(FL_ENGRAVED_FRAME);
      CameraGroup->align(FL_ALIGN_TOP_LEFT);
      CameraGroup->hide();
      { Fl_Group* o = new Fl_Group(225, 290, 130, 85, "Clear Color");
        o->box(FL_THIN_DOWN_FRAME);
        { CameraClearRed = new Fl_Value_Input(275, 295, 45, 25, "Red:");
          CameraClearRed->step(0.01);
          CameraClearRed->value(8.888);
          CameraClearRed->callback((Fl_Callback*)cb_CameraClearRed, (void*)(this));
        } // Fl_Value_Input* CameraClearRed
        { CameraClearGreen = new Fl_Value_Input(275, 320, 45, 25, "Green:");
          CameraClearGreen->step(0.01);
          CameraClearGreen->value(8.888);
          CameraClearGreen->callback((Fl_Callback*)cb_CameraClearGreen, (void*)(this));
        } // Fl_Value_Input* CameraClearGreen
        { CameraClearBlue = new Fl_Value_Input(275, 345, 45, 25, "Blue:");
          CameraClearBlue->step(0.01);
          CameraClearBlue->value(8.888);
          CameraClearBlue->callback((Fl_Callback*)cb_CameraClearBlue, (void*)(this));
        } // Fl_Value_Input* CameraClearBlue
        { CameraClearLoadButton = new Fl_Button(325, 295, 25, 75, "...");
          CameraClearLoadButton->callback((Fl_Callback*)cb_CameraClearLoadButton, (void*)(this));
        } // Fl_Button* CameraClearLoadButton
        o->end();
      } // Fl_Group* o
      { CameraWinChoice = new Fl_Choice(420, 315, 110, 25, "Window:");
        CameraWinChoice->down_box(FL_BORDER_BOX);
        CameraWinChoice->callback((Fl_Callback*)cb_CameraWinChoice, (void*)(this));
      } // Fl_Choice* CameraWinChoice
      { Fl_Button* o = new Fl_Button(115, 290, 80, 25, "Next Stats");
        o->callback((Fl_Callback*)cb_Next, (void*)(this));
      } // Fl_Button* o
      CameraGroup->end();
    } // Fl_Group* CameraGroup
    { WindowGroup = new Fl_Group(175, 165, 320, 260);
      WindowGroup->box(FL_ENGRAVED_FRAME);
      WindowGroup->align(FL_ALIGN_TOP_LEFT);
      WindowGroup->hide();
      { Fl_Group* o = new Fl_Group(195, 185, 175, 95, "Position");
        o->box(FL_THIN_DOWN_BOX);
        { WinPosW = new Fl_Value_Input(215, 205, 45, 25, "Width");
          WinPosW->tooltip("The width of the window");
          WinPosW->maximum(1600);
          WinPosW->step(1);
          WinPosW->value(8888);
          WinPosW->callback((Fl_Callback*)cb_WinPosW, (void*)(this));
          WinPosW->align(FL_ALIGN_TOP);
        } // Fl_Value_Input* WinPosW
        { WinPosH = new Fl_Value_Input(285, 205, 45, 25, "Height");
          WinPosH->tooltip("The height of the window");
          WinPosH->maximum(1600);
          WinPosH->step(1);
          WinPosH->value(8888);
          WinPosH->callback((Fl_Callback*)cb_WinPosH, (void*)(this));
          WinPosH->align(FL_ALIGN_TOP);
        } // Fl_Value_Input* WinPosH
        { WinSizeButton = new Fl_Menu_Button(340, 205, 25, 25);
          WinSizeButton->tooltip("Preset Window sizes");
          WinSizeButton->callback((Fl_Callback*)cb_WinSizeButton, (void*)(this));
          WinSizeButton->menu(menu_WinSizeButton);
        } // Fl_Menu_Button* WinSizeButton
        { WinPosX = new Fl_Value_Input(215, 245, 45, 25, "X:");
          WinPosX->tooltip("Position of left edge of window (0=leftmost edge of display)");
          WinPosX->maximum(1600);
          WinPosX->step(1);
          WinPosX->value(8888);
          WinPosX->callback((Fl_Callback*)cb_WinPosX, (void*)(this));
        } // Fl_Value_Input* WinPosX
        { WinPosY = new Fl_Value_Input(285, 245, 45, 25, "Y:");
          WinPosY->tooltip("Posiiton of bottom of window (0=bottom of display)");
          WinPosY->maximum(1600);
          WinPosY->step(1);
          WinPosY->value(8888);
          WinPosY->callback((Fl_Callback*)cb_WinPosY, (void*)(this));
        } // Fl_Value_Input* WinPosY
        o->end();
      } // Fl_Group* o
      { WinCursorToggle = new Fl_Check_Button(275, 330, 25, 25, "Show Cursor");
        WinCursorToggle->tooltip("Show the cursor on the Window.");
        WinCursorToggle->down_box(FL_DOWN_BOX);
        WinCursorToggle->value(1);
        WinCursorToggle->callback((Fl_Callback*)cb_WinCursorToggle, (void*)(this));
        WinCursorToggle->align(FL_ALIGN_LEFT);
      } // Fl_Check_Button* WinCursorToggle
      { WinTitle = new Fl_Input(225, 295, 245, 25, "Title:");
        WinTitle->tooltip("The title on the Window title bar");
        WinTitle->callback((Fl_Callback*)cb_WinTitle, (void*)(this));
      } // Fl_Input* WinTitle
      { WinFullScreenToggle = new Fl_Check_Button(275, 350, 25, 25, "Full Screen");
        WinFullScreenToggle->tooltip("Resize the window to full-screen and remove the window border");
        WinFullScreenToggle->down_box(FL_DOWN_BOX);
        WinFullScreenToggle->callback((Fl_Callback*)cb_WinFullScreenToggle, (void*)(this));
        WinFullScreenToggle->align(FL_ALIGN_LEFT);
      } // Fl_Check_Button* WinFullScreenToggle
      WindowGroup->end();
    } // Fl_Group* WindowGroup
    { ViewGroup = new Fl_Group(175, 165, 355, 260);
      ViewGroup->box(FL_ENGRAVED_BOX);
      ViewGroup->align(FL_ALIGN_TOP_LEFT);
      ViewGroup->hide();
      { ViewSceneChoice = new Fl_Choice(420, 280, 110, 25, "Scene:");
        ViewSceneChoice->down_box(FL_BORDER_BOX);
        ViewSceneChoice->callback((Fl_Callback*)cb_ViewSceneChoice, (void*)(this));
      } // Fl_Choice* ViewSceneChoice
      { ViewCameraChoice = new Fl_Choice(420, 309, 110, 25, "Camera:");
        ViewCameraChoice->down_box(FL_BORDER_BOX);
        ViewCameraChoice->callback((Fl_Callback*)cb_ViewCameraChoice, (void*)(this));
      } // Fl_Choice* ViewCameraChoice
      ViewGroup->end();
    } // Fl_Group* ViewGroup
    { SkyBoxGroup = new Fl_Group(60, 155, 430, 229);
      SkyBoxGroup->hide();
      { Fl_Group* o = new Fl_Group(205, 190, 130, 85, "Base Color");
        o->box(FL_THIN_DOWN_FRAME);
        { SkyBoxBaseRed = new Fl_Value_Input(255, 195, 45, 25, "Red:");
          SkyBoxBaseRed->step(0.01);
          SkyBoxBaseRed->value(8.888);
          SkyBoxBaseRed->callback((Fl_Callback*)cb_SkyBoxBaseRed, (void*)(this));
        } // Fl_Value_Input* SkyBoxBaseRed
        { SkyBoxBaseGreen = new Fl_Value_Input(255, 220, 45, 25, "Green:");
          SkyBoxBaseGreen->step(0.01);
          SkyBoxBaseGreen->value(8.888);
          SkyBoxBaseGreen->callback((Fl_Callback*)cb_SkyBoxBaseGreen, (void*)(this));
        } // Fl_Value_Input* SkyBoxBaseGreen
        { SkyBoxBaseBlue = new Fl_Value_Input(255, 245, 45, 25, "Blue:");
          SkyBoxBaseBlue->step(0.01);
          SkyBoxBaseBlue->value(8.888);
          SkyBoxBaseBlue->callback((Fl_Callback*)cb_SkyBoxBaseBlue, (void*)(this));
        } // Fl_Value_Input* SkyBoxBaseBlue
        { SkyBoxBaseColorLoadButton = new Fl_Button(305, 195, 25, 75, "...");
          SkyBoxBaseColorLoadButton->callback((Fl_Callback*)cb_SkyBoxBaseColorLoadButton, (void*)(this));
        } // Fl_Button* SkyBoxBaseColorLoadButton
        o->end();
      } // Fl_Group* o
      SkyBoxGroup->end();
    } // Fl_Group* SkyBoxGroup
    { EnvironmentGroup = new Fl_Group(70, 255, 450, 285);
      EnvironmentGroup->box(FL_ENGRAVED_FRAME);
      EnvironmentGroup->hide();
      { EnvFogColorGroup = new Fl_Group(376, 274, 130, 85, "Fog Color");
        EnvFogColorGroup->box(FL_THIN_DOWN_FRAME);
        EnvFogColorGroup->hide();
        { FogRed = new Fl_Value_Input(426, 279, 45, 25, "Red:");
          FogRed->step(0.01);
          FogRed->value(8.888);
          FogRed->callback((Fl_Callback*)cb_FogRed, (void*)(this));
        } // Fl_Value_Input* FogRed
        { FogGreen = new Fl_Value_Input(426, 304, 45, 25, "Green:");
          FogGreen->step(0.01);
          FogGreen->value(8.888);
          FogGreen->callback((Fl_Callback*)cb_FogGreen, (void*)(this));
        } // Fl_Value_Input* FogGreen
        { FogBlue = new Fl_Value_Input(426, 329, 45, 25, "Blue:");
          FogBlue->step(0.01);
          FogBlue->value(8.888);
          FogBlue->callback((Fl_Callback*)cb_FogBlue, (void*)(this));
        } // Fl_Value_Input* FogBlue
        { FogColorLoadButton = new Fl_Button(476, 279, 25, 75, "...");
          FogColorLoadButton->callback((Fl_Callback*)cb_FogColorLoadButton, (void*)(this));
        } // Fl_Button* FogColorLoadButton
        EnvFogColorGroup->end();
      } // Fl_Group* EnvFogColorGroup
      { EnvAdvFogGroup = new Fl_Group(374, 280, 126, 87, "Adv Fog");
        EnvAdvFogGroup->box(FL_THIN_DOWN_FRAME);
        { AdvFogTurbidity = new Fl_Value_Input(425, 284, 68, 22, "Turb:");
          AdvFogTurbidity->tooltip("Quality of the Air (~1.0 is a good choice)");
          AdvFogTurbidity->minimum(0.01);
          AdvFogTurbidity->maximum(64);
          AdvFogTurbidity->step(0.01);
          AdvFogTurbidity->value(88.88);
          AdvFogTurbidity->callback((Fl_Callback*)cb_AdvFogTurbidity, (void*)(this));
        } // Fl_Value_Input* AdvFogTurbidity
        { AdvFogEnergy = new Fl_Value_Input(426, 311, 67, 25, "Engy:");
          AdvFogEnergy->tooltip("Energy passed to the atmosphere (0=dark; + = brighter)");
          AdvFogEnergy->minimum(0.1);
          AdvFogEnergy->maximum(100);
          AdvFogEnergy->step(0.01);
          AdvFogEnergy->value(888.88);
          AdvFogEnergy->callback((Fl_Callback*)cb_AdvFogEnergy, (void*)(this));
        } // Fl_Value_Input* AdvFogEnergy
        { AdvFogMolecules = new Fl_Value_Input(426, 338, 67, 25, "Vis:");
          AdvFogMolecules->tooltip("Visibility ratio (0=no visibility; + = increased visibility)");
          AdvFogMolecules->maximum(100);
          AdvFogMolecules->step(0.01);
          AdvFogMolecules->value(888.88);
          AdvFogMolecules->callback((Fl_Callback*)cb_AdvFogMolecules, (void*)(this));
        } // Fl_Value_Input* AdvFogMolecules
        EnvAdvFogGroup->end();
      } // Fl_Group* EnvAdvFogGroup
      { EnvFogVis = new Fl_Value_Input(265, 266, 61, 25, "Visibility Distance:");
        EnvFogVis->maximum(500000);
        EnvFogVis->step(1);
        EnvFogVis->value(88888);
        EnvFogVis->callback((Fl_Callback*)cb_EnvFogVis, (void*)(this));
      } // Fl_Value_Input* EnvFogVis
      { EnvFogNear = new Fl_Value_Input(265, 293, 61, 25, "Fog Start:");
        EnvFogNear->tooltip("Start of fog (only used for Linear fog)");
        EnvFogNear->maximum(99999);
        EnvFogNear->step(1);
        EnvFogNear->value(88888);
        EnvFogNear->callback((Fl_Callback*)cb_EnvFogNear, (void*)(this));
      } // Fl_Value_Input* EnvFogNear
      { EnvFogMode = new Fl_Choice(244, 322, 101, 25, "Fog Mode:");
        EnvFogMode->down_box(FL_BORDER_BOX);
        EnvFogMode->callback((Fl_Callback*)cb_EnvFogMode, (void*)(this));
        EnvFogMode->menu(menu_EnvFogMode);
      } // Fl_Choice* EnvFogMode
      { EnvFogEnable = new Fl_Check_Button(121, 323, 45, 25, "Fog:");
        EnvFogEnable->down_box(FL_DOWN_BOX);
        EnvFogEnable->value(1);
        EnvFogEnable->callback((Fl_Callback*)cb_EnvFogEnable, (void*)(this));
        EnvFogEnable->align(FL_ALIGN_LEFT);
      } // Fl_Check_Button* EnvFogEnable
      { Fl_Group* o = new Fl_Group(380, 449, 130, 85, "Sky Color");
        o->box(FL_THIN_DOWN_FRAME);
        { SkyRed = new Fl_Value_Input(430, 454, 45, 25, "Red:");
          SkyRed->step(0.01);
          SkyRed->value(8.888);
          SkyRed->callback((Fl_Callback*)cb_SkyRed, (void*)(this));
        } // Fl_Value_Input* SkyRed
        { SkyGreen = new Fl_Value_Input(430, 479, 45, 25, "Green:");
          SkyGreen->step(0.01);
          SkyGreen->value(8.888);
          SkyGreen->callback((Fl_Callback*)cb_SkyGreen, (void*)(this));
        } // Fl_Value_Input* SkyGreen
        { SkyBlue = new Fl_Value_Input(430, 504, 45, 25, "Blue:");
          SkyBlue->step(0.01);
          SkyBlue->value(8.888);
          SkyBlue->callback((Fl_Callback*)cb_SkyBlue, (void*)(this));
        } // Fl_Value_Input* SkyBlue
        { SkyColorLoadButton = new Fl_Button(480, 454, 25, 75, "...");
          SkyColorLoadButton->callback((Fl_Callback*)cb_SkyColorLoadButton, (void*)(this));
        } // Fl_Button* SkyColorLoadButton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(234, 450, 109, 85, "Sun Color");
        o->box(FL_THIN_DOWN_FRAME);
        { EnvSunRed = new Fl_Value_Input(284, 455, 45, 25, "Red:");
          EnvSunRed->step(0.01);
          EnvSunRed->value(8.888);
          EnvSunRed->user_data((void*)(this));
        } // Fl_Value_Input* EnvSunRed
        { EnvSunGreen = new Fl_Value_Input(284, 480, 45, 25, "Green:");
          EnvSunGreen->step(0.01);
          EnvSunGreen->value(8.888);
          EnvSunGreen->user_data((void*)(this));
        } // Fl_Value_Input* EnvSunGreen
        { EnvSunBlue = new Fl_Value_Input(284, 505, 45, 25, "Blue:");
          EnvSunBlue->step(0.01);
          EnvSunBlue->value(8.888);
          EnvSunBlue->user_data((void*)(this));
        } // Fl_Value_Input* EnvSunBlue
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(78, 450, 109, 85, "Ref Position");
        o->box(FL_THIN_DOWN_FRAME);
        { EnvRefLat = new Fl_Value_Input(119, 455, 60, 25, "Lat:");
          EnvRefLat->tooltip("Ephemeris Reference Lattitude (deg)");
          EnvRefLat->minimum(-90);
          EnvRefLat->maximum(90);
          EnvRefLat->step(0.001);
          EnvRefLat->value(8.888);
          EnvRefLat->callback((Fl_Callback*)cb_EnvRefLat, (void*)(this));
        } // Fl_Value_Input* EnvRefLat
        { EnvRefLong = new Fl_Value_Input(119, 480, 60, 25, "Long:");
          EnvRefLong->tooltip("Ephemeris Reference Longitude (deg)");
          EnvRefLong->minimum(-180);
          EnvRefLong->maximum(180);
          EnvRefLong->step(0.001);
          EnvRefLong->value(8.888);
          EnvRefLong->callback((Fl_Callback*)cb_EnvRefLong, (void*)(this));
        } // Fl_Value_Input* EnvRefLong
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(105, 370, 315, 60, "Date/Time");
        o->box(FL_THIN_DOWN_FRAME);
        { EnvTimeOfDay = new Fl_Value_Slider(154, 403, 241, 23, "Time");
          EnvTimeOfDay->type(5);
          EnvTimeOfDay->maximum(24);
          EnvTimeOfDay->value(12);
          EnvTimeOfDay->callback((Fl_Callback*)cb_EnvTimeOfDay, (void*)(this));
          EnvTimeOfDay->align(FL_ALIGN_LEFT);
        } // Fl_Value_Slider* EnvTimeOfDay
        { EnvYear = new Fl_Value_Input(168, 376, 45, 23, "Year:");
          EnvYear->tooltip("Year (1970-2023)");
          EnvYear->minimum(1970);
          EnvYear->maximum(2023);
          EnvYear->step(1);
          EnvYear->value(8888);
          EnvYear->callback((Fl_Callback*)cb_EnvYear, (void*)(this));
        } // Fl_Value_Input* EnvYear
        { EnvMonth = new Fl_Value_Input(273, 376, 35, 23, "Month:");
          EnvMonth->tooltip("Month (1-12)");
          EnvMonth->minimum(1);
          EnvMonth->maximum(12);
          EnvMonth->step(1);
          EnvMonth->value(88);
          EnvMonth->callback((Fl_Callback*)cb_EnvMonth, (void*)(this));
        } // Fl_Value_Input* EnvMonth
        { EnvDay = new Fl_Value_Input(361, 376, 30, 23, "Day:");
          EnvDay->tooltip("Day (1-31)");
          EnvDay->minimum(1);
          EnvDay->maximum(31);
          EnvDay->step(1);
          EnvDay->value(88);
          EnvDay->callback((Fl_Callback*)cb_EnvDay, (void*)(this));
        } // Fl_Value_Input* EnvDay
        o->end();
      } // Fl_Group* o
      EnvironmentGroup->end();
    } // Fl_Group* EnvironmentGroup
    { InfTerrainGroup = new Fl_Group(185, 280, 190, 215, "InfiniteTerrain");
      InfTerrainGroup->box(FL_ENGRAVED_FRAME);
      InfTerrainGroup->align(FL_ALIGN_TOP_LEFT);
      InfTerrainGroup->hide();
      { InfBuildDistance = new Fl_Value_Input(300, 290, 65, 25, "Build Distance:");
        InfBuildDistance->tooltip("How far (meters) into the distance should there be terrain");
        InfBuildDistance->minimum(1);
        InfBuildDistance->maximum(999999);
        InfBuildDistance->value(888888);
      } // Fl_Value_Input* InfBuildDistance
      { InfSegSize = new Fl_Value_Input(300, 315, 65, 25, "Seg Size:");
        InfSegSize->tooltip("The size (meters) of each side of a block of terrain");
        InfSegSize->minimum(1);
        InfSegSize->maximum(999999);
        InfSegSize->value(888888);
      } // Fl_Value_Input* InfSegSize
      { InfSegDivisions = new Fl_Value_Input(300, 340, 65, 25, "Seg Divisions:");
        InfSegDivisions->tooltip("The number of divisions in each block of terrain");
        InfSegDivisions->minimum(1);
        InfSegDivisions->maximum(999999);
        InfSegDivisions->value(888888);
      } // Fl_Value_Input* InfSegDivisions
      { InfVertScale = new Fl_Value_Input(300, 365, 65, 25, "Vertical Scale:");
        InfVertScale->tooltip("The vertical scaling factor of the terrain");
        InfVertScale->minimum(1);
        InfVertScale->maximum(999999);
        InfVertScale->value(888888);
      } // Fl_Value_Input* InfVertScale
      { InfHorizScale = new Fl_Value_Input(300, 390, 65, 25, "Horiz Scale:");
        InfHorizScale->tooltip("The horizontal scaling factor of the terrain (spreads out the terrain feature\
s)");
        InfHorizScale->minimum(1);
        InfHorizScale->maximum(999999);
        InfHorizScale->value(888888);
      } // Fl_Value_Input* InfHorizScale
      { InfRegenerateButton = new Fl_Button(245, 425, 90, 30, "Regenerate!");
        InfRegenerateButton->callback((Fl_Callback*)cb_InfRegenerateButton, (void*)(this));
      } // Fl_Button* InfRegenerateButton
      { InfSmoothCollision = new Fl_Check_Button(320, 465, 20, 20, "Smooth Collisions");
        InfSmoothCollision->tooltip("Enables smoothed collision detection");
        InfSmoothCollision->down_box(FL_DOWN_BOX);
        InfSmoothCollision->callback((Fl_Callback*)cb_InfSmoothCollision, (void*)(this));
        InfSmoothCollision->align(FL_ALIGN_LEFT);
      } // Fl_Check_Button* InfSmoothCollision
      InfTerrainGroup->end();
    } // Fl_Group* InfTerrainGroup
    { CloudEditor = new Fl_Group(30, 165, 500, 260, "Cloud Shaders Properties");
      CloudEditor->box(FL_ENGRAVED_BOX);
      CloudEditor->labeltype(FL_EMBOSSED_LABEL);
      CloudEditor->hide();
      { Fl_Group* o = new Fl_Group(45, 200, 215, 225, "Parameters");
        o->labeltype(FL_EMBOSSED_LABEL);
        { cScale = new Fl_Value_Slider(45, 215, 200, 25, "Scale");
          cScale->tooltip("Scale the noise texture");
          cScale->type(5);
          cScale->step(0.001);
          cScale->value(0.2);
          cScale->callback((Fl_Callback*)cb_cScale, (void*)(this));
        } // Fl_Value_Slider* cScale
        { cCutoff = new Fl_Value_Slider(45, 268, 200, 25, "Cutoff");
          cCutoff->tooltip("Cloud coverage");
          cCutoff->type(5);
          cCutoff->step(0.001);
          cCutoff->value(0.5);
          cCutoff->callback((Fl_Callback*)cb_cCutoff, (void*)(this));
        } // Fl_Value_Slider* cCutoff
        { cExponent = new Fl_Value_Slider(45, 321, 200, 25, "Exponent");
          cExponent->tooltip("Saturation of the clouds");
          cExponent->type(5);
          cExponent->minimum(1);
          cExponent->maximum(10);
          cExponent->step(1);
          cExponent->value(5);
          cExponent->callback((Fl_Callback*)cb_cExponent, (void*)(this));
        } // Fl_Value_Slider* cExponent
        { cBias = new Fl_Value_Slider(45, 375, 200, 25, "Bias");
          cBias->tooltip("Cloud brightness");
          cBias->type(5);
          cBias->maximum(2);
          cBias->value(1.2);
          cBias->callback((Fl_Callback*)cb_cBias, (void*)(this));
        } // Fl_Value_Slider* cBias
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(440, 200, 70, 90, "Cloud Color");
        o->box(FL_FLAT_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
        { CloudRed = new Fl_Value_Input(462, 215, 25, 25, "Red:");
          CloudRed->step(0.1);
          CloudRed->value(1);
          CloudRed->callback((Fl_Callback*)cb_CloudRed, (void*)(this));
        } // Fl_Value_Input* CloudRed
        { CloudGreen = new Fl_Value_Input(462, 240, 25, 25, "Green:");
          CloudGreen->step(0.1);
          CloudGreen->value(1);
          CloudGreen->callback((Fl_Callback*)cb_CloudGreen, (void*)(this));
        } // Fl_Value_Input* CloudGreen
        { CloudBlue = new Fl_Value_Input(462, 265, 25, 25, "Blue:");
          CloudBlue->step(0.1);
          CloudBlue->value(1);
          CloudBlue->callback((Fl_Callback*)cb_CloudBlue, (void*)(this));
        } // Fl_Value_Input* CloudBlue
        { CloudColorLoadButton = new Fl_Button(485, 215, 25, 75, "...");
          CloudColorLoadButton->callback((Fl_Callback*)cb_CloudColorLoadButton, (void*)(this));
        } // Fl_Button* CloudColorLoadButton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(285, 200, 105, 95, "Cloud Speed");
        o->labeltype(FL_EMBOSSED_LABEL);
        { cSpeedX = new Fl_Value_Slider(285, 215, 100, 25, "X speed");
          cSpeedX->type(5);
          cSpeedX->maximum(5);
          cSpeedX->step(0.1);
          cSpeedX->value(0.1);
          cSpeedX->callback((Fl_Callback*)cb_cSpeedX, (void*)(this));
        } // Fl_Value_Slider* cSpeedX
        { cSpeedY = new Fl_Value_Slider(285, 260, 100, 25, "Y speed");
          cSpeedY->type(5);
          cSpeedY->maximum(5);
          cSpeedY->step(0.1);
          cSpeedY->value(0.1);
          cSpeedY->callback((Fl_Callback*)cb_cSpeedY, (void*)(this));
        } // Fl_Value_Slider* cSpeedY
        o->end();
      } // Fl_Group* o
      { cEnable = new Fl_Check_Button(400, 380, 25, 25, "Shader Enabled");
        cEnable->tooltip("Enables/Disables the cloud shader");
        cEnable->down_box(FL_DOWN_BOX);
        cEnable->value(1);
        cEnable->labeltype(FL_EMBOSSED_LABEL);
        cEnable->callback((Fl_Callback*)cb_cEnable, (void*)(this));
      } // Fl_Check_Button* cEnable
      CloudEditor->end();
    } // Fl_Group* CloudEditor
    { WeatherGroup = new Fl_Group(31, 165, 500, 260);
      WeatherGroup->box(FL_ENGRAVED_BOX);
      WeatherGroup->labeltype(FL_EMBOSSED_LABEL);
      WeatherGroup->user_data((void*)(this));
      WeatherGroup->hide();
      { WeatherTimePeriodChoice = new Fl_Choice(270, 185, 90, 30, "Time:");
        WeatherTimePeriodChoice->down_box(FL_BORDER_BOX);
        WeatherTimePeriodChoice->callback((Fl_Callback*)cb_WeatherTimePeriodChoice, (void*)(this));
        WeatherTimePeriodChoice->menu(menu_WeatherTimePeriodChoice);
      } // Fl_Choice* WeatherTimePeriodChoice
      { WeatherSeasonChoice = new Fl_Choice(425, 185, 90, 30, "Season:");
        WeatherSeasonChoice->down_box(FL_BORDER_BOX);
        WeatherSeasonChoice->callback((Fl_Callback*)cb_WeatherSeasonChoice, (void*)(this));
        WeatherSeasonChoice->menu(menu_WeatherSeasonChoice);
      } // Fl_Choice* WeatherSeasonChoice
      { WeatherCustomGroup = new Fl_Group(115, 335, 405, 67, "Custom");
        WeatherCustomGroup->box(FL_EMBOSSED_FRAME);
        WeatherCustomGroup->align(FL_ALIGN_LEFT);
        { WeatherCloudSlider = new Fl_Slider(131, 366, 120, 25, "Cloud");
          WeatherCloudSlider->type(1);
          WeatherCloudSlider->maximum(4);
          WeatherCloudSlider->step(1);
          WeatherCloudSlider->callback((Fl_Callback*)cb_WeatherCloudSlider, (void*)(this));
          WeatherCloudSlider->align(FL_ALIGN_TOP);
        } // Fl_Slider* WeatherCloudSlider
        { WeatherWindSlider = new Fl_Slider(265, 366, 120, 25, "Wind");
          WeatherWindSlider->type(1);
          WeatherWindSlider->maximum(5);
          WeatherWindSlider->step(1);
          WeatherWindSlider->callback((Fl_Callback*)cb_WeatherWindSlider, (void*)(this));
          WeatherWindSlider->align(FL_ALIGN_TOP);
        } // Fl_Slider* WeatherWindSlider
        { WeatherVisSlider = new Fl_Slider(395, 366, 120, 25, "Visibility");
          WeatherVisSlider->type(1);
          WeatherVisSlider->maximum(4);
          WeatherVisSlider->step(1);
          WeatherVisSlider->callback((Fl_Callback*)cb_WeatherVisSlider, (void*)(this));
          WeatherVisSlider->align(FL_ALIGN_TOP);
        } // Fl_Slider* WeatherVisSlider
        WeatherCustomGroup->end();
      } // Fl_Group* WeatherCustomGroup
      { Fl_Group* o = new Fl_Group(45, 235, 25, 150);
        o->user_data((void*)(this));
        { WeatherThemeOption = new Fl_Round_Button(45, 235, 25, 25);
          WeatherThemeOption->type(102);
          WeatherThemeOption->down_box(FL_ROUND_DOWN_BOX);
          WeatherThemeOption->value(1);
          WeatherThemeOption->callback((Fl_Callback*)cb_WeatherThemeOption, (void*)(this));
        } // Fl_Round_Button* WeatherThemeOption
        { WeatherCustomOption = new Fl_Round_Button(45, 360, 25, 25);
          WeatherCustomOption->type(102);
          WeatherCustomOption->down_box(FL_ROUND_DOWN_BOX);
          WeatherCustomOption->callback((Fl_Callback*)cb_WeatherCustomOption, (void*)(this));
        } // Fl_Round_Button* WeatherCustomOption
        o->end();
      } // Fl_Group* o
      { WeatherThemeGroup = new Fl_Group(115, 185, 92, 145, "Theme:");
        WeatherThemeGroup->box(FL_EMBOSSED_FRAME);
        WeatherThemeGroup->align(FL_ALIGN_LEFT);
        { WeatherThemeClearOption = new Fl_Round_Button(117, 213, 80, 25, "Clear");
          WeatherThemeClearOption->type(102);
          WeatherThemeClearOption->down_box(FL_ROUND_DOWN_BOX);
          WeatherThemeClearOption->value(1);
          WeatherThemeClearOption->callback((Fl_Callback*)cb_WeatherThemeClearOption, (void*)(this));
        } // Fl_Round_Button* WeatherThemeClearOption
        { WeatherThemeFairOption = new Fl_Round_Button(117, 243, 80, 25, "Fair");
          WeatherThemeFairOption->type(102);
          WeatherThemeFairOption->down_box(FL_ROUND_DOWN_BOX);
          WeatherThemeFairOption->callback((Fl_Callback*)cb_WeatherThemeFairOption, (void*)(this));
        } // Fl_Round_Button* WeatherThemeFairOption
        { WeatherThemeFoggyOption = new Fl_Round_Button(117, 273, 80, 25, "Foggy");
          WeatherThemeFoggyOption->type(102);
          WeatherThemeFoggyOption->down_box(FL_ROUND_DOWN_BOX);
          WeatherThemeFoggyOption->callback((Fl_Callback*)cb_WeatherThemeFoggyOption, (void*)(this));
        } // Fl_Round_Button* WeatherThemeFoggyOption
        { WeatherThemeRainyOption = new Fl_Round_Button(117, 301, 80, 25, "Rainy");
          WeatherThemeRainyOption->type(102);
          WeatherThemeRainyOption->down_box(FL_ROUND_DOWN_BOX);
          WeatherThemeRainyOption->callback((Fl_Callback*)cb_WeatherThemeRainyOption, (void*)(this));
        } // Fl_Round_Button* WeatherThemeRainyOption
        { WeatherThemeCustomOption = new Fl_Round_Button(115, 185, 80, 25, "Custom");
          WeatherThemeCustomOption->type(102);
          WeatherThemeCustomOption->down_box(FL_ROUND_DOWN_BOX);
          WeatherThemeCustomOption->callback((Fl_Callback*)cb_WeatherThemeCustomOption, (void*)(this));
        } // Fl_Round_Button* WeatherThemeCustomOption
        WeatherThemeGroup->end();
      } // Fl_Group* WeatherThemeGroup
      { WeatherRateOfChangeSlider = new Fl_Value_Slider(310, 240, 140, 25, "Rate of Change");
        WeatherRateOfChangeSlider->type(1);
        WeatherRateOfChangeSlider->minimum(-1);
        WeatherRateOfChangeSlider->callback((Fl_Callback*)cb_WeatherRateOfChangeSlider, (void*)(this));
      } // Fl_Value_Slider* WeatherRateOfChangeSlider
      WeatherGroup->end();
    } // Fl_Group* WeatherGroup
    { LightGroup = new Fl_Group(15, 255, 520, 180);
      LightGroup->box(FL_ENGRAVED_BOX);
      LightGroup->labeltype(FL_EMBOSSED_LABEL);
      LightGroup->user_data((void*)(this));
      LightGroup->hide();
      { LightNumberInput = new Fl_Value_Input(81, 280, 25, 25, "Light Number");
        LightNumberInput->minimum(1);
        LightNumberInput->maximum(8);
        LightNumberInput->step(1);
        LightNumberInput->callback((Fl_Callback*)cb_LightNumberInput, (void*)(this));
        LightNumberInput->align(132);
      } // Fl_Value_Input* LightNumberInput
      { Fl_Group* o = new Fl_Group(455, 353, 65, 45, "Mode");
        o->box(FL_ENGRAVED_FRAME);
        { LightModeLocal = new Fl_Round_Button(455, 353, 65, 25, "Local");
          LightModeLocal->type(102);
          LightModeLocal->down_box(FL_ROUND_DOWN_BOX);
          LightModeLocal->callback((Fl_Callback*)cb_LightModeLocal, (void*)(this));
        } // Fl_Round_Button* LightModeLocal
        { LightModeGlobal = new Fl_Round_Button(455, 373, 65, 25, "Global");
          LightModeGlobal->type(102);
          LightModeGlobal->down_box(FL_ROUND_DOWN_BOX);
          LightModeGlobal->value(1);
          LightModeGlobal->callback((Fl_Callback*)cb_LightModeGlobal, (void*)(this));
        } // Fl_Round_Button* LightModeGlobal
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(29, 344, 130, 85, "Diffuse");
        o->box(FL_THIN_DOWN_FRAME);
        { LightDifRed = new Fl_Value_Input(79, 349, 45, 25, "Red:");
          LightDifRed->step(0.01);
          LightDifRed->value(8.888);
          LightDifRed->callback((Fl_Callback*)cb_LightDifRed, (void*)(this));
        } // Fl_Value_Input* LightDifRed
        { LightDifGreen = new Fl_Value_Input(79, 374, 45, 25, "Green:");
          LightDifGreen->step(0.01);
          LightDifGreen->value(8.888);
          LightDifGreen->callback((Fl_Callback*)cb_LightDifGreen, (void*)(this));
        } // Fl_Value_Input* LightDifGreen
        { LightDifBlue = new Fl_Value_Input(79, 399, 45, 25, "Blue:");
          LightDifBlue->step(0.01);
          LightDifBlue->value(8.888);
          LightDifBlue->callback((Fl_Callback*)cb_LightDifBlue, (void*)(this));
        } // Fl_Value_Input* LightDifBlue
        { LightDifColorLoadButton = new Fl_Button(129, 349, 25, 75, "...");
          LightDifColorLoadButton->callback((Fl_Callback*)cb_LightDifColorLoadButton, (void*)(this));
        } // Fl_Button* LightDifColorLoadButton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(170, 344, 130, 85, "Ambient");
        o->box(FL_THIN_DOWN_FRAME);
        { LightAmbRed = new Fl_Value_Input(220, 349, 45, 25, "Red:");
          LightAmbRed->step(0.01);
          LightAmbRed->value(8.888);
          LightAmbRed->callback((Fl_Callback*)cb_LightAmbRed, (void*)(this));
        } // Fl_Value_Input* LightAmbRed
        { LightAmbGreen = new Fl_Value_Input(220, 374, 45, 25, "Green:");
          LightAmbGreen->step(0.01);
          LightAmbGreen->value(8.888);
          LightAmbGreen->callback((Fl_Callback*)cb_LightAmbGreen, (void*)(this));
        } // Fl_Value_Input* LightAmbGreen
        { LightAmbBlue = new Fl_Value_Input(220, 399, 45, 25, "Blue:");
          LightAmbBlue->step(0.01);
          LightAmbBlue->value(8.888);
          LightAmbBlue->callback((Fl_Callback*)cb_LightAmbBlue, (void*)(this));
        } // Fl_Value_Input* LightAmbBlue
        { LightAmbColorLoadButton = new Fl_Button(270, 349, 25, 75, "...");
          LightAmbColorLoadButton->callback((Fl_Callback*)cb_LightAmbColorLoadButton, (void*)(this));
        } // Fl_Button* LightAmbColorLoadButton
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(310, 343, 130, 85, "Specular");
        o->box(FL_THIN_DOWN_FRAME);
        { LightSpecRed = new Fl_Value_Input(360, 348, 45, 25, "Red:");
          LightSpecRed->step(0.01);
          LightSpecRed->value(8.888);
          LightSpecRed->callback((Fl_Callback*)cb_LightSpecRed, (void*)(this));
        } // Fl_Value_Input* LightSpecRed
        { LightSpecGreen = new Fl_Value_Input(360, 373, 45, 25, "Green:");
          LightSpecGreen->step(0.01);
          LightSpecGreen->value(8.888);
          LightSpecGreen->callback((Fl_Callback*)cb_LightSpecGreen, (void*)(this));
        } // Fl_Value_Input* LightSpecGreen
        { LightSpecBlue = new Fl_Value_Input(360, 398, 45, 25, "Blue:");
          LightSpecBlue->step(0.01);
          LightSpecBlue->value(8.888);
          LightSpecBlue->callback((Fl_Callback*)cb_LightSpecBlue, (void*)(this));
        } // Fl_Value_Input* LightSpecBlue
        { LightSpecColorLoadButton = new Fl_Button(410, 348, 25, 75, "...");
          LightSpecColorLoadButton->callback((Fl_Callback*)cb_LightSpecColorLoadButton, (void*)(this));
        } // Fl_Button* LightSpecColorLoadButton
        o->end();
      } // Fl_Group* o
      LightGroup->end();
    } // Fl_Group* LightGroup
    { PositionalLightGroup = new Fl_Group(280, 259, 235, 71);
      PositionalLightGroup->box(FL_ENGRAVED_BOX);
      PositionalLightGroup->user_data((void*)(this));
      PositionalLightGroup->hide();
      { Fl_Group* o = new Fl_Group(290, 275, 205, 50, "Attenuation");
        o->box(FL_THIN_DOWN_BOX);
        { LightConstAtt = new Fl_Value_Input(295, 295, 60, 25, "Constant");
          LightConstAtt->maximum(100);
          LightConstAtt->step(0.001);
          LightConstAtt->callback((Fl_Callback*)cb_LightConstAtt, (void*)(this));
          LightConstAtt->align(FL_ALIGN_TOP);
        } // Fl_Value_Input* LightConstAtt
        { LightLinAtt = new Fl_Value_Input(360, 295, 60, 25, "Linear");
          LightLinAtt->maximum(100);
          LightLinAtt->step(0.001);
          LightLinAtt->callback((Fl_Callback*)cb_LightLinAtt, (void*)(this));
          LightLinAtt->align(FL_ALIGN_TOP);
        } // Fl_Value_Input* LightLinAtt
        { LightQuadAtt = new Fl_Value_Input(427, 295, 60, 25, "Quadratic");
          LightQuadAtt->maximum(100);
          LightQuadAtt->step(0.001);
          LightQuadAtt->callback((Fl_Callback*)cb_LightQuadAtt, (void*)(this));
          LightQuadAtt->align(FL_ALIGN_TOP);
        } // Fl_Value_Input* LightQuadAtt
        o->end();
      } // Fl_Group* o
      PositionalLightGroup->end();
    } // Fl_Group* PositionalLightGroup
    { LightSpotGroup = new Fl_Group(130, 279, 139, 50, "Spot");
      LightSpotGroup->box(FL_THIN_DOWN_BOX);
      LightSpotGroup->hide();
      { LightExponentInput = new Fl_Value_Input(202, 300, 60, 25, "Exp");
        LightExponentInput->maximum(500000);
        LightExponentInput->step(0.1);
        LightExponentInput->callback((Fl_Callback*)cb_LightExponentInput, (void*)(this));
        LightExponentInput->align(FL_ALIGN_TOP);
      } // Fl_Value_Input* LightExponentInput
      { LightCutoffInput = new Fl_Value_Input(134, 300, 60, 25, "Cutoff");
        LightCutoffInput->maximum(500000);
        LightCutoffInput->step(0.1);
        LightCutoffInput->callback((Fl_Callback*)cb_LightCutoffInput, (void*)(this));
        LightCutoffInput->align(FL_ALIGN_TOP);
      } // Fl_Value_Input* LightCutoffInput
      LightSpotGroup->end();
    } // Fl_Group* LightSpotGroup
    { InfiniteLightGroup = new Fl_Group(130, 279, 142, 50, "Azimuth/Elevation");
      InfiniteLightGroup->box(FL_THIN_DOWN_BOX);
      { InfLightAzInput = new Fl_Value_Input(134, 300, 60, 25, "Az.");
        InfLightAzInput->maximum(500000);
        InfLightAzInput->step(0.1);
        InfLightAzInput->callback((Fl_Callback*)cb_InfLightAzInput, (void*)(this));
        InfLightAzInput->align(FL_ALIGN_TOP);
      } // Fl_Value_Input* InfLightAzInput
      { InfLightElevInput = new Fl_Value_Input(202, 300, 60, 25, "Elev.");
        InfLightElevInput->maximum(500000);
        InfLightElevInput->step(0.1);
        InfLightElevInput->callback((Fl_Callback*)cb_InfLightElevInput, (void*)(this));
        InfLightElevInput->align(FL_ALIGN_TOP);
      } // Fl_Value_Input* InfLightElevInput
      InfiniteLightGroup->end();
    } // Fl_Group* InfiniteLightGroup
    { ParticleGroup = new Fl_Group(15, 270, 135, 60, "Particle System");
      ParticleGroup->box(FL_ENGRAVED_FRAME);
      ParticleGroup->align(FL_ALIGN_TOP_LEFT);
      ParticleGroup->hide();
      { ParticleEnabled = new Fl_Check_Button(20, 275, 75, 25, "Enabled");
        ParticleEnabled->down_box(FL_DOWN_BOX);
        ParticleEnabled->callback((Fl_Callback*)cb_ParticleEnabled, (void*)(this));
      } // Fl_Check_Button* ParticleEnabled
      { ParticleParentRelative = new Fl_Check_Button(20, 300, 125, 25, "Parent Relative");
        ParticleParentRelative->down_box(FL_DOWN_BOX);
        ParticleParentRelative->callback((Fl_Callback*)cb_ParticleParentRelative, (void*)(this));
      } // Fl_Check_Button* ParticleParentRelative
      ParticleGroup->end();
    } // Fl_Group* ParticleGroup
    MainWindow->end();
  } // Fl_Double_Window* MainWindow
  { SelectWindow = new Fl_Double_Window(274, 249, "Add Child");
    SelectWindow->user_data((void*)(this));
    { SelectList = new Fl_Check_Browser(20, 15, 205, 160);
    } // Fl_Check_Browser* SelectList
    { SelectWinAddButton = new Fl_Return_Button(170, 190, 70, 40, "Add");
    } // Fl_Return_Button* SelectWinAddButton
    { SelectWinCancelButton = new Fl_Button(40, 190, 55, 40, "Cancel");
    } // Fl_Button* SelectWinCancelButton
    SelectWindow->set_modal();
    SelectWindow->end();
  } // Fl_Double_Window* SelectWindow
  return SelectWindow;
}
