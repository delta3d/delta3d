import os

Import('*')

#####################
# Delcare src files #
#####################

if CheckForBoost() :

   pythonSrcs = { 
   
      'dtCore' : [   'basebindings.cpp',
                     'camerabindings.cpp',
                     'clouddomebindings.cpp',
                     'cloudplanebindings.cpp',
                     'collisionmotionmodelbindings.cpp',
                     'compassbindings.cpp',
                     'deltadrawablebindings.cpp',
                     'deltawinbindings.cpp',
                     'dtcorebindings.cpp',
                     'effectmanagerbindings.cpp',
                     'enveffectbindings.cpp',
                     'environmentbindings.cpp',
                     'flymotionmodelbindings.cpp',
                     'fpsmotionmodelbindings.cpp',
                     'fpscolliderbindings.cpp',
                     'infinitelightbindings.cpp',
                     'infiniteterrainbindings.cpp',
                     'inputdevicebindings.cpp',
                     'inputmapperbindings.cpp',
                     'isectorbindings.cpp',
                     'keyboardbindings.cpp',
                     'lightbindings.cpp',
                     'loadablebindings.cpp',
                     'logicalinputdevicebindings.cpp',
                     'motionmodelbindings.cpp',
                     'mousebindings.cpp',
                     'objectbindings.cpp',
                     'orbitmotionmodelbindings.cpp',
                     'osgvec2.cpp',
                     'osgvec3.cpp',
                     'osgvec4.cpp',
                     'osgmath.cpp',
                     'osgmatrix.cpp',
                     'particlesystembindings.cpp',
                     'physicalbindings.cpp',
                     'pointaxisbindings.cpp',
                     'positionallightbindings.cpp',
                     'recorderbindings.cpp',
                     'scenebindings.cpp',
                     'skyboxbindings.cpp',
                     'skydomebindings.cpp',
                     'spotlightbindings.cpp',
                     'systembindings.cpp',
                     'transformablebindings.cpp',
                     'transformbindings.cpp',
                     'tripodbindings.cpp',
                     'ufomotionmodelbindings.cpp',
                     'walkmotionmodelbindings.cpp' ],

   
   'dtABC' : [      'applicationbindings.cpp', 
                    'baseabcbindings.cpp', 
                    'dtabcbindings.cpp', 
                    'proximitytriggerbindings.cpp', 
                    'weatherbindings.cpp', 
                    'triggerbindings.cpp', 
                    'widgetbindings.cpp' ],
    
   'dtAudio' : [    'audiomanagerbindings.cpp', 
                    'dtaudiobindings.cpp', 
                    'listenerbindings.cpp', 
                    'soundeffectbinderbindings.cpp' ],
    
   'dtChar' : [     'characterbindings.cpp', 
                    'dtcharbindings.cpp' ],

   'dtDAL'  : [     'actorpropertybindings.cpp',
                    'actorproxybindings.cpp',                   
                    'datatypebindings.cpp',
                    'dtdalbindings.cpp', 
                    'mapbindings.cpp', 
                    'projectbindings.cpp' ],

   'dtAI'   : [     'dtaibindings.cpp',
                    'astarconfigbindings.cpp',
                    'waypointbindings.cpp',
                    'waypointpairbindings.cpp',
                    'waypointmanagerbindings.cpp',
                    'waypointastarbindings.cpp'],
    
   'dtInspector' : [ 'dtinspectorbindings.cpp' ],
    
   'dtHLA' : [      'distypebindings.cpp', 
                    'dthlabindings.cpp', 
                    'entitybindings.cpp', 
                    'rticonnectionbindings.cpp' ],

   'dtTerrain' : [  'dtTerrainBindings.cpp',
                    'geocoordinateBindings.cpp',
                    'terrainBindings.cpp' ],
    
   'dtUtil' : [     'dtutilbindings.cpp',
                    'enumerationbindings.cpp',
                    'logbindings.cpp', 
                    'matrixutilbindings.cpp', 
                    'noisebindings.cpp',
                    'polardecompbindings.cpp' ] }
       
   ##############
   # Build libs #
   ##############
      
   if env['OS'] == 'windows' :
      boostLib = 'boost_python-vc71-mt'
   elif env['OS'] == 'darwin' :
      # This only has a hard-coded version since Boost.Python does not output
      # with the same file naming convention as other platform (as of 1.33.1)
      boostLib = 'boost_python-1_33_1'
   else :
      boostLib = 'boost_python-gcc-mt'
   
   pythonDeps = ['osg','Producer','OpenThreads','xerces-c','python','osgUtil','osgText','osgParticle','osgDB','ode','cal3d','rbody','rvrutils','rcfgscript']
   
   if env['OS'] == 'windows' :
      pythonDeps += [  'User32' ] 
      
   pythonDeps = [ env['extLibs'][lib] for lib in pythonDeps if env['extLibs'].has_key(lib) ] + [boostLib]

   addToLibs = []
   addToFrameworks = []
   if env['OS'] == 'darwin':
      for lib_name in pythonDeps:
        if env['foundLibs'].has_key(lib_name):
          if env['foundLibs'][lib_name] == 'framework':
            addToFrameworks.append(lib_name)
          else:
            addToLibs.append(lib_name)
        else:
          addToLibs.append(lib_name);
   else:
      addToLibs = pythonDeps
   
   if env['OS'] == 'windows' and env['mode'] == 'debug' :
      dtCoreBindingsTarget = 'dtCoreBindingsd'
      dtAbcBindingsTarget = 'dtABCBindingsd'
      dtAudioBindingsTarget = 'dtAudioBindingsd'
      dtCharBindingsTarget = 'dtCharBindingsd'
      dtDALBindingsTarget = 'dtDALBindingsd'
      dtAIBindingsTarget = 'dtAIBindingsd'
      dtInspectorBindingsTarget = 'dtInspectorBindingsd'
      dtHlaBindingsTarget = 'dtHLABindingsd'
      dtTerrainBindingsTarget = 'dtTerrainBindingsd'
      dtUtilBindingsTarget = 'dtUtilBindingsd'
   else :
      dtCoreBindingsTarget = 'dtCoreBindings'
      dtAbcBindingsTarget = 'dtABCBindings'
      dtAudioBindingsTarget = 'dtAudioBindings'
      dtCharBindingsTarget = 'dtCharBindings'
      dtDALBindingsTarget = 'dtDALBindings'
      dtAIBindingsTarget = 'dtAIBindings'
      dtInspectorBindingsTarget = 'dtInspectorBindings'
      dtHlaBindingsTarget = 'dtHLABindings'
      dtTerrainBindingsTarget = 'dtTerrainBindings'
      dtUtilBindingsTarget = 'dtUtilBindings'
    
   pythonCPPFlags = ""
   if env.has_key('CPPFLAGS') :
      pythonCPPFlags = env['CPPFLAGS'] + pythonCPPFlags
   
   pythonDtCoreLib = env.SharedLibrary(  dtCoreBindingsTarget,    pythonSrcs['dtCore'],   LIBS = addToLibs + [env['dtLibs']['dtCore'],env['dtLibs']['dtUtil']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )
   pythonDtAbcLib = env.SharedLibrary(   dtAbcBindingsTarget,     pythonSrcs['dtABC'],    LIBS = addToLibs + [env['dtLibs']['dtABC'],env['dtLibs']['dtCore'],env['dtLibs']['dtDAL']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )
   pythonDtAudioLib = env.SharedLibrary( dtAudioBindingsTarget,   pythonSrcs['dtAudio'],  LIBS = addToLibs + [env['dtLibs']['dtAudio'],env['dtLibs']['dtCore']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )
   pythonDtCharLib = env.SharedLibrary(  dtCharBindingsTarget,    pythonSrcs['dtChar'],   LIBS = addToLibs + [env['dtLibs']['dtChar'],env['dtLibs']['dtCore'],env['dtLibs']['dtUtil']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )
   pythonDtDALLib = env.SharedLibrary(   dtDALBindingsTarget,     pythonSrcs['dtDAL'],    LIBS = addToLibs + [env['dtLibs']['dtDAL'],env['dtLibs']['dtCore'],env['dtLibs']['dtAI']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )
   pythonDtAILib = env.SharedLibrary(   dtAIBindingsTarget,     pythonSrcs['dtAI'],    LIBS = addToLibs + [env['dtLibs']['dtAI'],env['dtLibs']['dtCore'],env['dtLibs']['dtUtil']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )   
   pythonDtInspectorLib = env.SharedLibrary(  dtInspectorBindingsTarget,  pythonSrcs['dtInspector'],   LIBS = addToLibs + [env['dtLibs']['dtInspector'],env['dtLibs']['dtCore']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )
   pythonDtTerrainLib = env.SharedLibrary(  dtTerrainBindingsTarget,  pythonSrcs['dtTerrain'],   LIBS = addToLibs + [env['dtLibs']['dtTerrain'],env['dtLibs']['dtCore'],env['dtLibs']['dtUtil']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )
   pythonDtUtilLib = env.SharedLibrary(  dtUtilBindingsTarget,    pythonSrcs['dtUtil'],   LIBS = addToLibs + [env['dtLibs']['dtUtil']], FRAMEWORKS = addToFrameworks, CPPFLAGS=pythonCPPFlags )
   
   env.Precious( pythonDtCoreLib, pythonDtAbcLib, pythonDtAudioLib, pythonDtCharLib, pythonDtDALLib, pythonDtAILib, pythonDtInspectorLib, pythonDtTerrainLib, pythonDtUtilLib )
   
   if env.get('rti') != 0 :
      pythonDtHlaLib = env.SharedLibrary( dtHlaBindingsTarget, pythonSrcs['dtHLA'], LIBS = addToLibs + [env['dtLibs'][ 'dtHLA' ]], CPPFLAGS=pythonCPPFlags )
      env.Precious( pythonDtHlaLib )
   else :
      pythonDtHlaLib = None

   ################
   # Install libs #
   ################

   if env['OS'] == 'windows' :
      dir = 'bin'
      suffix = 'pyd'
   else :
      dir = 'lib'
      suffix = 'so'

   if env['OS'] == 'windows' and env['mode'] == 'debug' :
      dtCorePydTarget = '#'+dir+'/PyDtCored.'+suffix
      dtAbcPydTarget = '#'+dir+'/PyDtABCd.'+suffix
      dtAudioPydTarget = '#'+dir+'/PyDtAudiod.'+suffix
      dtCharPydTarget = '#'+dir+'/PyDtChard.'+suffix
      dtDALPydTarget = '#'+dir+'/PyDtDALd.'+suffix
      dtAIPydTarget = '#'+dir+'/PyDtAId.'+suffix
      dtInspectorPydTarget = '#'+dir+'/PyDtInspectord.'+suffix
      dtHlaPydTarget = '#'+dir+'/PyDtHLAd.'+suffix
      dtTerrainPydTarget = '#'+dir+'/PyDtTerraind.'+suffix
      dtUtilPydTarget = '#'+dir+'/PyDtUtild.'+suffix
   else :
      dtCorePydTarget = '#'+dir+'/PyDtCore.'+suffix
      dtAbcPydTarget = '#'+dir+'/PyDtABC.'+suffix
      dtAudioPydTarget = '#'+dir+'/PyDtAudio.'+suffix
      dtCharPydTarget = '#'+dir+'/PyDtChar.'+suffix
      dtDALPydTarget = '#'+dir+'/PyDtDAL.'+suffix
      dtAIPydTarget = '#'+dir+'/PyDtAI.'+suffix
      dtInspectorPydTarget = '#'+dir+'/PyDtInspector.'+suffix
      dtHlaPydTarget = '#'+dir+'/PyDtHLA.'+suffix
      dtTerrainPydTarget = '#'+dir+'/PyDtTerrain.'+suffix
      dtUtilPydTarget = '#'+dir+'/PyDtUtil.'+suffix
  
   env.InstallAs( [  dtCorePydTarget, \
                     dtAbcPydTarget, \
                     dtAudioPydTarget, \
                     dtCharPydTarget, \
                     dtDALPydTarget, \
                     dtAIPydTarget, \
                     dtInspectorPydTarget, \
                     dtTerrainPydTarget, \
                     dtUtilPydTarget ], \
                  [  pythonDtCoreLib[0], \
                     pythonDtAbcLib[0], \
                     pythonDtAudioLib[0], \
                     pythonDtCharLib[0], \
                     pythonDtDALLib[0], \
                     pythonDtAILib[0], \
                     pythonDtInspectorLib[0], \
                     pythonDtTerrainLib[0], \
                     pythonDtUtilLib[0] ] )

   if pythonDtHlaLib is not None:
         env.InstallAs( dtHlaPydTarget, pythonDtHlaLib[0] )

   if env['OS'] == 'windows' :
      
      env.Install( '#/lib', [ pythonDtCoreLib[1:], \
                              pythonDtAbcLib[1:], \
                              pythonDtAudioLib[1:], \
                              pythonDtCharLib[1:], \
                              pythonDtDALLib[1:], \
                              pythonDtAILib[1:], \
                              pythonDtInspectorLib[1:], \
                              pythonDtTerrainLib[1:], \
                              pythonDtUtilLib[1:] ] )

      if pythonDtHlaLib is not None:
         env.Install( '#/lib', pythonDtHlaLib[1:] )
