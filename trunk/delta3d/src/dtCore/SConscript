import os

Import('*')

dtCoreSrcs = [ 'base.cpp',
               'camera.cpp',
               'clouddome.cpp',
               'cloudplane.cpp',
               'compass.cpp',
               'cui_openglrenderer.cpp',
               'cui_openglshader.cpp',
               'deltadrawable.cpp',
               'deltarendersurface.cpp',
               'deltawin.cpp',
               'effectmanager.cpp',
               'enveffect.cpp',
               'environment.cpp',
               'ephemeris.cpp',
               'flymotionmodel.cpp',
               'globals.cpp',
               'infinitelight.cpp',
               'infiniteterrain.cpp',
               'inputdevice.cpp',
               'inputmapper.cpp',
               'isector.cpp',
               'joystick.cpp',
               'keyboard.cpp',
               'light.cpp',
               'loadable.cpp',
               'logicalinputdevice.cpp',
               'motionmodel.cpp',
               'mouse.cpp',
               'notify.cpp',
               'object.cpp',
               'orbitmotionmodel.cpp',
               'particlesystem.cpp',
               'physical.cpp',
               'pnoise.cpp',
               'pointaxis.cpp',
               'positionallight.cpp',
               'recorder.cpp',
               'scene.cpp',
               'skybox.cpp',
               'skydome.cpp',
               'skydomeshader.cpp',
               'spotlight.cpp',
               'stats.cpp',
               'sunlightshader.cpp',
               'system.cpp',
               'terrain.cpp',
               'timer.cpp',
               'tracker.cpp',
               'transform.cpp',
               'transformable.cpp',
               'tripod.cpp',
               'uidrawable.cpp',
               'ufomotionmodel.cpp',
               'walkmotionmodel.cpp' ]

dtCoreDeps = [ 'glgui', 'isense', 'ode', 'OpenThreads', 'osg', 'osgDB', 'osgGL2', 'osgParticle', 'osgTerrain', 'osgText', 'osgUtil', 'sg', 'ul', 'js', 'Producer', 'tinyxml' ]
                
if OS == 'windows' :
   dtCoreSrcs.extend( [ 'deltawin_win32.cpp', 'uniqueid_win32.cpp' ] )
   dtCoreDeps += [ 'User32', 'Advapi32', 'Rpcrt4', 'Winmm', 'Gdi32' ]
else:
   dtCoreSrcs.extend( [ 'deltawin_x11.cpp', 'uniqueid_linux.cpp' ] )
   dtCoreDeps += [ 'uuid' ]

dtCoreDeps = [ extLibs[lib] for lib in dtCoreDeps if extLibs.has_key(lib) ]

if mode == 'debug' :
   dtCoreDeps += [ 'dtutild' ]
else :
   dtCoreDeps += [ 'dtutil' ]
    
build_delta3d_lib( 'dtcore', dtCoreSrcs, dtCoreDeps )
