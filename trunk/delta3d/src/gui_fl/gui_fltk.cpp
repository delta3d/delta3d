// generated by Fast Light User Interface Designer (fluid) version 1.0105

#include "gui_fltk.h"

inline void UserInterface::cb_InstanceList_i(Fl_Browser*, void* v) {
  ((UserInterface*)v)->SelectInstance();
}
void UserInterface::cb_InstanceList(Fl_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_InstanceList_i(o,v);
}

inline void UserInterface::cb_BaseName_i(Fl_Input* o, void* v) {
  ((UserInterface*)v)->BaseNameCB(o);
}
void UserInterface::cb_BaseName(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_BaseName_i(o,v);
}

inline void UserInterface::cb_TransformX_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformX(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformX_i(o,v);
}

inline void UserInterface::cb_TransformY_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformY(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformY_i(o,v);
}

inline void UserInterface::cb_TransformZ_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformZ(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformZ_i(o,v);
}

inline void UserInterface::cb_TransformH_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformH(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformH_i(o,v);
}

inline void UserInterface::cb_TransformP_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformP(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformP_i(o,v);
}

inline void UserInterface::cb_TransformR_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->TransformPosCB(o);
}
void UserInterface::cb_TransformR(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_TransformR_i(o,v);
}

inline void UserInterface::cb_TransformCSAbsButton_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->TransformCSCB(o);
}
void UserInterface::cb_TransformCSAbsButton(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_TransformCSAbsButton_i(o,v);
}

inline void UserInterface::cb_TransformCSRelButton_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->TransformCSCB(o);
}
void UserInterface::cb_TransformCSRelButton(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_TransformCSRelButton_i(o,v);
}

inline void UserInterface::cb__i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->TransformAddChildCB(o);
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb__i(o,v);
}

inline void UserInterface::cb_1_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->TransformRemChildCB(o);
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_1_i(o,v);
}

inline void UserInterface::cb_ObjectFilename_i(Fl_Input* o, void* v) {
  ((UserInterface*)v)->ObjectFileCB(o);
}
void UserInterface::cb_ObjectFilename(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_ObjectFilename_i(o,v);
}

inline void UserInterface::cb_2_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->ObjectLoadFileCB(o);
}
void UserInterface::cb_2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_2_i(o,v);
}

inline void UserInterface::cb_CameraClearRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CameraClearColorCB(o);
}
void UserInterface::cb_CameraClearRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CameraClearRed_i(o,v);
}

inline void UserInterface::cb_CameraClearGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CameraClearColorCB(o);
}
void UserInterface::cb_CameraClearGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CameraClearGreen_i(o,v);
}

inline void UserInterface::cb_CameraClearBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CameraClearColorCB(o);
}
void UserInterface::cb_CameraClearBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CameraClearBlue_i(o,v);
}

inline void UserInterface::cb_CameraClearLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->CameraClearColorBrowserCB(o);
}
void UserInterface::cb_CameraClearLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CameraClearLoadButton_i(o,v);
}

inline void UserInterface::cb_CameraSceneChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->CameraSceneCB(o);
}
void UserInterface::cb_CameraSceneChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_CameraSceneChoice_i(o,v);
}

inline void UserInterface::cb_CameraWinChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->CameraWinCB(o);
}
void UserInterface::cb_CameraWinChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_CameraWinChoice_i(o,v);
}

inline void UserInterface::cb_WinPosW_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->WinPosCB(o);
}
void UserInterface::cb_WinPosW(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinPosW_i(o,v);
}

inline void UserInterface::cb_WinPosH_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->WinPosCB(o);
}
void UserInterface::cb_WinPosH(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinPosH_i(o,v);
}

inline void UserInterface::cb_WinSizeButton_i(Fl_Menu_Button* o, void* v) {
  ((UserInterface*)v)->WinSizeCB(o);
}
void UserInterface::cb_WinSizeButton(Fl_Menu_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinSizeButton_i(o,v);
}

Fl_Menu_Item UserInterface::menu_WinSizeButton[] = {
 {"640x480", 0,  0, 0, 0, 0, 0, 14, 56},
 {"800x600", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1024x768", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1280x1024", 0,  0, 0, 0, 0, 0, 14, 56},
 {"1600x1200", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

inline void UserInterface::cb_WinPosX_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->WinPosCB(o);
}
void UserInterface::cb_WinPosX(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinPosX_i(o,v);
}

inline void UserInterface::cb_WinPosY_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->WinPosCB(o);
}
void UserInterface::cb_WinPosY(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WinPosY_i(o,v);
}

inline void UserInterface::cb_WinCursorToggle_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->WinCursorCB(o);
}
void UserInterface::cb_WinCursorToggle(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WinCursorToggle_i(o,v);
}

inline void UserInterface::cb_WinTitle_i(Fl_Input* o, void* v) {
  ((UserInterface*)v)->WinTitleCB(o);
}
void UserInterface::cb_WinTitle(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WinTitle_i(o,v);
}

inline void UserInterface::cb_WinFullScreenToggle_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->WinFullScreenCB(o);
}
void UserInterface::cb_WinFullScreenToggle(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WinFullScreenToggle_i(o,v);
}

inline void UserInterface::cb_SkyBoxBaseRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->SkyBoxBaseColorCB(o);
}
void UserInterface::cb_SkyBoxBaseRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBoxBaseRed_i(o,v);
}

inline void UserInterface::cb_SkyBoxBaseGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->SkyBoxBaseColorCB(o);
}
void UserInterface::cb_SkyBoxBaseGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBoxBaseGreen_i(o,v);
}

inline void UserInterface::cb_SkyBoxBaseBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->SkyBoxBaseColorCB(o);
}
void UserInterface::cb_SkyBoxBaseBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBoxBaseBlue_i(o,v);
}

inline void UserInterface::cb_SkyBoxBaseColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->SkyBoxBaseColorBrowserCB(o);
}
void UserInterface::cb_SkyBoxBaseColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBoxBaseColorLoadButton_i(o,v);
}

inline void UserInterface::cb_FogRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogColorCB(o);
}
void UserInterface::cb_FogRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_FogRed_i(o,v);
}

inline void UserInterface::cb_FogGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogColorCB(o);
}
void UserInterface::cb_FogGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_FogGreen_i(o,v);
}

inline void UserInterface::cb_FogBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogColorCB(o);
}
void UserInterface::cb_FogBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_FogBlue_i(o,v);
}

inline void UserInterface::cb_FogColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->EnvFogColorBrowserCB(o);
}
void UserInterface::cb_FogColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_FogColorLoadButton_i(o,v);
}

inline void UserInterface::cb_AdvFogTurbidity_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvAdvFogCB(o);
}
void UserInterface::cb_AdvFogTurbidity(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_AdvFogTurbidity_i(o,v);
}

inline void UserInterface::cb_AdvFogEnergy_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvAdvFogCB(o);
}
void UserInterface::cb_AdvFogEnergy(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_AdvFogEnergy_i(o,v);
}

inline void UserInterface::cb_AdvFogMolecules_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvAdvFogCB(o);
}
void UserInterface::cb_AdvFogMolecules(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_AdvFogMolecules_i(o,v);
}

inline void UserInterface::cb_EnvFogVis_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogVisCB(o);
}
void UserInterface::cb_EnvFogVis(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_EnvFogVis_i(o,v);
}

inline void UserInterface::cb_EnvFogNear_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvFogNearCB(o);
}
void UserInterface::cb_EnvFogNear(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_EnvFogNear_i(o,v);
}

inline void UserInterface::cb_EnvFogMode_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->EnvFogModeCB(o);
}
void UserInterface::cb_EnvFogMode(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_EnvFogMode_i(o,v);
}

Fl_Menu_Item UserInterface::menu_EnvFogMode[] = {
 {"Linear", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Exp", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Exp2", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Advanced", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

inline void UserInterface::cb_EnvFogEnable_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->EnvFogEnableCB(o);
}
void UserInterface::cb_EnvFogEnable(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_EnvFogEnable_i(o,v);
}

inline void UserInterface::cb_SkyRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvSkyColorCB(o);
}
void UserInterface::cb_SkyRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyRed_i(o,v);
}

inline void UserInterface::cb_SkyGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvSkyColorCB(o);
}
void UserInterface::cb_SkyGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyGreen_i(o,v);
}

inline void UserInterface::cb_SkyBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvSkyColorCB(o);
}
void UserInterface::cb_SkyBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyBlue_i(o,v);
}

inline void UserInterface::cb_SkyColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->EnvSkyColorBrowserCB(o);
}
void UserInterface::cb_SkyColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_SkyColorLoadButton_i(o,v);
}

inline void UserInterface::cb_EnvRefLat_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvRefPosCB(o);
}
void UserInterface::cb_EnvRefLat(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvRefLat_i(o,v);
}

inline void UserInterface::cb_EnvRefLong_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvRefPosCB(o);
}
void UserInterface::cb_EnvRefLong(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvRefLong_i(o,v);
}

inline void UserInterface::cb_EnvTimeOfDay_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->EnvTimeCB(o);
}
void UserInterface::cb_EnvTimeOfDay(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvTimeOfDay_i(o,v);
}

inline void UserInterface::cb_EnvYear_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvDateTimeCB(o);
}
void UserInterface::cb_EnvYear(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvYear_i(o,v);
}

inline void UserInterface::cb_EnvMonth_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvDateTimeCB(o);
}
void UserInterface::cb_EnvMonth(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvMonth_i(o,v);
}

inline void UserInterface::cb_EnvDay_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->EnvDateTimeCB(o);
}
void UserInterface::cb_EnvDay(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_EnvDay_i(o,v);
}

inline void UserInterface::cb_InfRegenerateButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->InfRegenerateCB(o);
}
void UserInterface::cb_InfRegenerateButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_InfRegenerateButton_i(o,v);
}

inline void UserInterface::cb_InfSmoothCollision_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->InfSmoothCDCB(o);
}
void UserInterface::cb_InfSmoothCollision(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_InfSmoothCollision_i(o,v);
}

inline void UserInterface::cb_cScale_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudScaleCB(o);
}
void UserInterface::cb_cScale(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cScale_i(o,v);
}

inline void UserInterface::cb_cCutoff_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudCutoffCB(o);
}
void UserInterface::cb_cCutoff(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cCutoff_i(o,v);
}

inline void UserInterface::cb_cExponent_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudExponentCB(o);
}
void UserInterface::cb_cExponent(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cExponent_i(o,v);
}

inline void UserInterface::cb_cBias_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudBiasCB(o);
}
void UserInterface::cb_cBias(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cBias_i(o,v);
}

inline void UserInterface::cb_CloudRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CloudColorCB(o);
}
void UserInterface::cb_CloudRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CloudRed_i(o,v);
}

inline void UserInterface::cb_CloudGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CloudColorCB(o);
}
void UserInterface::cb_CloudGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CloudGreen_i(o,v);
}

inline void UserInterface::cb_CloudBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->CloudColorCB(o);
}
void UserInterface::cb_CloudBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CloudBlue_i(o,v);
}

inline void UserInterface::cb_CloudColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->CloudColorBrowserCB(o);
}
void UserInterface::cb_CloudColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_CloudColorLoadButton_i(o,v);
}

inline void UserInterface::cb_cSpeedX_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudWindCB(o);
}
void UserInterface::cb_cSpeedX(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cSpeedX_i(o,v);
}

inline void UserInterface::cb_cSpeedY_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->CloudWindCB(o);
}
void UserInterface::cb_cSpeedY(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_cSpeedY_i(o,v);
}

inline void UserInterface::cb_cEnable_i(Fl_Check_Button* o, void* v) {
  ((UserInterface*)v)->CloudEnableCB(o);
}
void UserInterface::cb_cEnable(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_cEnable_i(o,v);
}

inline void UserInterface::cb_WeatherTimePeriodChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->WeatherTimeCB(o);
}
void UserInterface::cb_WeatherTimePeriodChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WeatherTimePeriodChoice_i(o,v);
}

Fl_Menu_Item UserInterface::menu_WeatherTimePeriodChoice[] = {
 {"Dawn", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Day", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Dusk", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Night", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

inline void UserInterface::cb_WeatherSeasonChoice_i(Fl_Choice* o, void* v) {
  ((UserInterface*)v)->WeatherSeasonCB(o);
}
void UserInterface::cb_WeatherSeasonChoice(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WeatherSeasonChoice_i(o,v);
}

Fl_Menu_Item UserInterface::menu_WeatherSeasonChoice[] = {
 {"Spring", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Summer", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Fall", 0,  0, 0, 0, 0, 0, 14, 56},
 {"Winter", 0,  0, 0, 0, 0, 0, 14, 56},
 {0,0,0,0,0,0,0,0,0}
};

inline void UserInterface::cb_WeatherCloudSlider_i(Fl_Slider* o, void* v) {
  ((UserInterface*)v)->WeatherCustomCloudCB(o);
}
void UserInterface::cb_WeatherCloudSlider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherCloudSlider_i(o,v);
}

inline void UserInterface::cb_WeatherWindSlider_i(Fl_Slider* o, void* v) {
  ((UserInterface*)v)->WeatherCustomWindCB(o);
}
void UserInterface::cb_WeatherWindSlider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherWindSlider_i(o,v);
}

inline void UserInterface::cb_WeatherVisSlider_i(Fl_Slider* o, void* v) {
  ((UserInterface*)v)->WeatherCustomVisCB(o);
}
void UserInterface::cb_WeatherVisSlider(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherVisSlider_i(o,v);
}

inline void UserInterface::cb_WeatherThemeOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCustomOptionCB(o);
}
void UserInterface::cb_WeatherThemeOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeOption_i(o,v);
}

inline void UserInterface::cb_WeatherCustomOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCustomOptionCB(o);
}
void UserInterface::cb_WeatherCustomOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherCustomOption_i(o,v);
}

inline void UserInterface::cb_WeatherThemeClearOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeClearOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeClearOption_i(o,v);
}

inline void UserInterface::cb_WeatherThemeFairOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeFairOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeFairOption_i(o,v);
}

inline void UserInterface::cb_WeatherThemeFoggyOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeFoggyOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeFoggyOption_i(o,v);
}

inline void UserInterface::cb_WeatherThemeRainyOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeRainyOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeRainyOption_i(o,v);
}

inline void UserInterface::cb_WeatherThemeCustomOption_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->WeatherThemeCB(o);
}
void UserInterface::cb_WeatherThemeCustomOption(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_WeatherThemeCustomOption_i(o,v);
}

inline void UserInterface::cb_WeatherRateOfChangeSlider_i(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)v)->WeatherRateOfChangeCB(o);
}
void UserInterface::cb_WeatherRateOfChangeSlider(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_WeatherRateOfChangeSlider_i(o,v);
}

inline void UserInterface::cb_LightNumberInput_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightNumCB(o);
}
void UserInterface::cb_LightNumberInput(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_LightNumberInput_i(o,v);
}

inline void UserInterface::cb_LightModeLocal_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->LightModeCB(o);
}
void UserInterface::cb_LightModeLocal(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightModeLocal_i(o,v);
}

inline void UserInterface::cb_LightModeGlobal_i(Fl_Round_Button* o, void* v) {
  ((UserInterface*)v)->LightModeCB(o);
}
void UserInterface::cb_LightModeGlobal(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightModeGlobal_i(o,v);
}

inline void UserInterface::cb_LightConstAtt_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAttCB(o);
}
void UserInterface::cb_LightConstAtt(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightConstAtt_i(o,v);
}

inline void UserInterface::cb_LightLinAtt_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAttCB(o);
}
void UserInterface::cb_LightLinAtt(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightLinAtt_i(o,v);
}

inline void UserInterface::cb_LightQuadAtt_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAttCB(o);
}
void UserInterface::cb_LightQuadAtt(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightQuadAtt_i(o,v);
}

inline void UserInterface::cb_LightDifRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightDifColorCB(o);
}
void UserInterface::cb_LightDifRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightDifRed_i(o,v);
}

inline void UserInterface::cb_LightDifGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightDifColorCB(o);
}
void UserInterface::cb_LightDifGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightDifGreen_i(o,v);
}

inline void UserInterface::cb_LightDifBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightDifColorCB(o);
}
void UserInterface::cb_LightDifBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightDifBlue_i(o,v);
}

inline void UserInterface::cb_LightDifColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->LightDifColorBrowserCB(o);
}
void UserInterface::cb_LightDifColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightDifColorLoadButton_i(o,v);
}

inline void UserInterface::cb_LightAmbRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAmbColorCB(o);
}
void UserInterface::cb_LightAmbRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightAmbRed_i(o,v);
}

inline void UserInterface::cb_LightAmbGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAmbColorCB(o);
}
void UserInterface::cb_LightAmbGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightAmbGreen_i(o,v);
}

inline void UserInterface::cb_LightAmbBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightAmbColorCB(o);
}
void UserInterface::cb_LightAmbBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightAmbBlue_i(o,v);
}

inline void UserInterface::cb_LightAmbColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->LightAmbColorBrowserCB(o);
}
void UserInterface::cb_LightAmbColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightAmbColorLoadButton_i(o,v);
}

inline void UserInterface::cb_LightSpecRed_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpecColorCB(o);
}
void UserInterface::cb_LightSpecRed(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightSpecRed_i(o,v);
}

inline void UserInterface::cb_LightSpecGreen_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpecColorCB(o);
}
void UserInterface::cb_LightSpecGreen(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightSpecGreen_i(o,v);
}

inline void UserInterface::cb_LightSpecBlue_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpecColorCB(o);
}
void UserInterface::cb_LightSpecBlue(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightSpecBlue_i(o,v);
}

inline void UserInterface::cb_LightSpecColorLoadButton_i(Fl_Button* o, void* v) {
  ((UserInterface*)v)->LightSpecColorBrowserCB(o);
}
void UserInterface::cb_LightSpecColorLoadButton(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightSpecColorLoadButton_i(o,v);
}

inline void UserInterface::cb_LightExponentInput_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpotCB(o);
}
void UserInterface::cb_LightExponentInput(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightExponentInput_i(o,v);
}

inline void UserInterface::cb_LightCutoffInput_i(Fl_Value_Input* o, void* v) {
  ((UserInterface*)v)->LightSpotCB(o);
}
void UserInterface::cb_LightCutoffInput(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_LightCutoffInput_i(o,v);
}

Fl_Double_Window* UserInterface::make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = MainWindow = new Fl_Double_Window(545, 438, "dtCore");
    w = o;
    o->user_data((void*)(this));
    { Fl_Browser* o = InstanceList = new Fl_Browser(15, 25, 145, 100);
      o->type(1);
      o->callback((Fl_Callback*)cb_InstanceList, (void*)(this));
    }
    { Fl_Box* o = InstanceClassName = new Fl_Box(210, 15, 300, 30);
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)46);
      o->labelfont(2);
      o->labelsize(18);
    }
    { Fl_Group* o = new Fl_Group(175, 70, 185, 60);
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
      { Fl_Input* o = BaseName = new Fl_Input(230, 90, 90, 25, "Name:");
        o->tooltip("The name of this instance");
        o->callback((Fl_Callback*)cb_BaseName, (void*)(this));
        o->when(FL_WHEN_ENTER_KEY);
      }
      o->end();
    }
    { Fl_Group* o = TransformGroup = new Fl_Group(15, 150, 520, 105, "Transformable");
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Value_Input* o = TransformX = new Fl_Value_Input(42, 169, 60, 25, "X:");
        o->minimum(-500000);
        o->maximum(500000);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_TransformX, (void*)(this));
      }
      { Fl_Value_Input* o = TransformY = new Fl_Value_Input(42, 194, 60, 25, "Y:");
        o->minimum(-500000);
        o->maximum(500000);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_TransformY, (void*)(this));
      }
      { Fl_Value_Input* o = TransformZ = new Fl_Value_Input(42, 219, 60, 25, "Z:");
        o->minimum(-500000);
        o->maximum(500000);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_TransformZ, (void*)(this));
      }
      { Fl_Value_Input* o = TransformH = new Fl_Value_Input(132, 169, 60, 25, "H:");
        o->minimum(-500000);
        o->maximum(500000);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_TransformH, (void*)(this));
      }
      { Fl_Value_Input* o = TransformP = new Fl_Value_Input(132, 194, 60, 25, "P:");
        o->minimum(-500000);
        o->maximum(500000);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_TransformP, (void*)(this));
      }
      { Fl_Value_Input* o = TransformR = new Fl_Value_Input(132, 219, 60, 25, "R:");
        o->minimum(-500000);
        o->maximum(500000);
        o->step(0.1);
        o->callback((Fl_Callback*)cb_TransformR, (void*)(this));
      }
      { Fl_Group* o = new Fl_Group(245, 170, 95, 40, "System");
        o->box(FL_ENGRAVED_FRAME);
        o->align(FL_ALIGN_LEFT);
        { Fl_Round_Button* o = TransformCSAbsButton = new Fl_Round_Button(245, 170, 95, 25, "Absolute");
          o->tooltip("The position/attitude reflects an Absolute Coordinate System");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_TransformCSAbsButton, (void*)(this));
        }
        { Fl_Round_Button* o = TransformCSRelButton = new Fl_Round_Button(245, 190, 95, 20, "Relative");
          o->tooltip("The position/attitude reflects a Relative Coordinate System");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_TransformCSRelButton, (void*)(this));
        }
        o->end();
      }
      { Fl_Browser* o = TransformChildList = new Fl_Browser(350, 170, 144, 75, "Children");
        o->type(3);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Button* o = new Fl_Button(499, 180, 25, 25);
        o->tooltip("Add a child to the list");
        o->callback((Fl_Callback*)cb_, (void*)(this));
      }
      { Fl_Button* o = new Fl_Button(499, 210, 25, 25);
        o->tooltip("Remove a child from the list");
        o->callback((Fl_Callback*)cb_1, (void*)(this));
      }
      { Fl_Output* o = TransformParentText = new Fl_Output(245, 219, 95, 25, "Parent:");
        o->box(FL_ENGRAVED_FRAME);
      }
      o->end();
    }
    { Fl_Group* o = ObjectGroup = new Fl_Group(180, 259, 290, 75);
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Input* o = ObjectFilename = new Fl_Input(220, 284, 210, 25, "File");
        o->callback((Fl_Callback*)cb_ObjectFilename, (void*)(this));
        o->when(FL_WHEN_ENTER_KEY);
      }
      { Fl_Button* o = new Fl_Button(435, 284, 25, 25, "...");
        o->callback((Fl_Callback*)cb_2, (void*)(this));
      }
      o->end();
    }
    { Fl_Group* o = CameraGroup = new Fl_Group(185, 265, 325, 120);
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Group* o = new Fl_Group(195, 290, 130, 85, "Clear Color");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = CameraClearRed = new Fl_Value_Input(245, 295, 45, 25, "Red:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_CameraClearRed, (void*)(this));
        }
        { Fl_Value_Input* o = CameraClearGreen = new Fl_Value_Input(245, 320, 45, 25, "Green:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_CameraClearGreen, (void*)(this));
        }
        { Fl_Value_Input* o = CameraClearBlue = new Fl_Value_Input(245, 345, 45, 25, "Blue:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_CameraClearBlue, (void*)(this));
        }
        { Fl_Button* o = CameraClearLoadButton = new Fl_Button(295, 295, 25, 75, "...");
          o->callback((Fl_Callback*)cb_CameraClearLoadButton, (void*)(this));
        }
        o->end();
      }
      { Fl_Choice* o = CameraSceneChoice = new Fl_Choice(390, 280, 110, 25, "Scene:");
        o->down_box(FL_BORDER_BOX);
        o->callback((Fl_Callback*)cb_CameraSceneChoice, (void*)(this));
      }
      { Fl_Choice* o = CameraWinChoice = new Fl_Choice(390, 315, 110, 25, "Window:");
        o->down_box(FL_BORDER_BOX);
        o->callback((Fl_Callback*)cb_CameraWinChoice, (void*)(this));
      }
      o->end();
    }
    { Fl_Group* o = WindowGroup = new Fl_Group(175, 165, 320, 260);
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_TOP_LEFT);
      o->hide();
      { Fl_Group* o = new Fl_Group(195, 185, 175, 95, "Position");
        o->box(FL_THIN_DOWN_BOX);
        { Fl_Value_Input* o = WinPosW = new Fl_Value_Input(215, 205, 45, 25, "Width");
          o->tooltip("The width of the window");
          o->maximum(1600);
          o->step(1);
          o->value(8888);
          o->callback((Fl_Callback*)cb_WinPosW, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        { Fl_Value_Input* o = WinPosH = new Fl_Value_Input(285, 205, 45, 25, "Height");
          o->tooltip("The height of the window");
          o->maximum(1600);
          o->step(1);
          o->value(8888);
          o->callback((Fl_Callback*)cb_WinPosH, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        { Fl_Menu_Button* o = WinSizeButton = new Fl_Menu_Button(340, 205, 25, 25);
          o->tooltip("Preset Window sizes");
          o->callback((Fl_Callback*)cb_WinSizeButton, (void*)(this));
          o->menu(menu_WinSizeButton);
        }
        { Fl_Value_Input* o = WinPosX = new Fl_Value_Input(215, 245, 45, 25, "X:");
          o->tooltip("Position of left edge of window (0=leftmost edge of display)");
          o->maximum(1600);
          o->step(1);
          o->value(8888);
          o->callback((Fl_Callback*)cb_WinPosX, (void*)(this));
        }
        { Fl_Value_Input* o = WinPosY = new Fl_Value_Input(285, 245, 45, 25, "Y:");
          o->tooltip("Posiiton of bottom of window (0=bottom of display)");
          o->maximum(1600);
          o->step(1);
          o->value(8888);
          o->callback((Fl_Callback*)cb_WinPosY, (void*)(this));
        }
        o->end();
      }
      { Fl_Check_Button* o = WinCursorToggle = new Fl_Check_Button(275, 330, 25, 25, "Show Cursor");
        o->tooltip("Show the cursor on the Window.");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->callback((Fl_Callback*)cb_WinCursorToggle, (void*)(this));
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Input* o = WinTitle = new Fl_Input(225, 295, 245, 25, "Title:");
        o->tooltip("The title on the Window title bar");
        o->callback((Fl_Callback*)cb_WinTitle, (void*)(this));
      }
      { Fl_Check_Button* o = WinFullScreenToggle = new Fl_Check_Button(275, 350, 25, 25, "Full Screen");
        o->tooltip("Resize the window to full-screen and remove the window border");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_WinFullScreenToggle, (void*)(this));
        o->align(FL_ALIGN_LEFT);
      }
      o->end();
    }
    { Fl_Group* o = SkyBoxGroup = new Fl_Group(60, 155, 430, 229);
      o->hide();
      { Fl_Group* o = new Fl_Group(205, 190, 130, 85, "Base Color");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = SkyBoxBaseRed = new Fl_Value_Input(255, 195, 45, 25, "Red:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_SkyBoxBaseRed, (void*)(this));
        }
        { Fl_Value_Input* o = SkyBoxBaseGreen = new Fl_Value_Input(255, 220, 45, 25, "Green:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_SkyBoxBaseGreen, (void*)(this));
        }
        { Fl_Value_Input* o = SkyBoxBaseBlue = new Fl_Value_Input(255, 245, 45, 25, "Blue:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_SkyBoxBaseBlue, (void*)(this));
        }
        { Fl_Button* o = SkyBoxBaseColorLoadButton = new Fl_Button(305, 195, 25, 75, "...");
          o->callback((Fl_Callback*)cb_SkyBoxBaseColorLoadButton, (void*)(this));
        }
        o->end();
      }
      o->end();
    }
    { Fl_Group* o = EnvironmentGroup = new Fl_Group(70, 145, 450, 285);
      o->box(FL_ENGRAVED_FRAME);
      o->hide();
      { Fl_Group* o = EnvFogColorGroup = new Fl_Group(376, 164, 130, 85, "Fog Color");
        o->box(FL_THIN_DOWN_FRAME);
        o->hide();
        { Fl_Value_Input* o = FogRed = new Fl_Value_Input(426, 169, 45, 25, "Red:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_FogRed, (void*)(this));
        }
        { Fl_Value_Input* o = FogGreen = new Fl_Value_Input(426, 194, 45, 25, "Green:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_FogGreen, (void*)(this));
        }
        { Fl_Value_Input* o = FogBlue = new Fl_Value_Input(426, 219, 45, 25, "Blue:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_FogBlue, (void*)(this));
        }
        { Fl_Button* o = FogColorLoadButton = new Fl_Button(476, 169, 25, 75, "...");
          o->callback((Fl_Callback*)cb_FogColorLoadButton, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = EnvAdvFogGroup = new Fl_Group(374, 170, 126, 87, "Adv Fog");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = AdvFogTurbidity = new Fl_Value_Input(425, 174, 68, 22, "Turb:");
          o->tooltip("Quality of the Air (~1.0 is a good choice)");
          o->minimum(0.01);
          o->maximum(64);
          o->step(0.01);
          o->value(88.88);
          o->callback((Fl_Callback*)cb_AdvFogTurbidity, (void*)(this));
        }
        { Fl_Value_Input* o = AdvFogEnergy = new Fl_Value_Input(426, 201, 67, 25, "Engy:");
          o->tooltip("Energy passed to the atmosphere (0=dark; + = brighter)");
          o->minimum(0.1);
          o->maximum(100);
          o->step(0.01);
          o->value(888.88);
          o->callback((Fl_Callback*)cb_AdvFogEnergy, (void*)(this));
        }
        { Fl_Value_Input* o = AdvFogMolecules = new Fl_Value_Input(426, 228, 67, 25, "Vis:");
          o->tooltip("Visibility ratio (0=no visibility; + = increased visibility)");
          o->maximum(100);
          o->step(0.01);
          o->value(888.88);
          o->callback((Fl_Callback*)cb_AdvFogMolecules, (void*)(this));
        }
        o->end();
      }
      { Fl_Value_Input* o = EnvFogVis = new Fl_Value_Input(265, 156, 61, 25, "Visibility Distance:");
        o->maximum(500000);
        o->step(1);
        o->value(88888);
        o->callback((Fl_Callback*)cb_EnvFogVis, (void*)(this));
      }
      { Fl_Value_Input* o = EnvFogNear = new Fl_Value_Input(265, 183, 61, 25, "Fog Start:");
        o->tooltip("Start of fog (only used for Linear fog)");
        o->maximum(99999);
        o->step(1);
        o->value(88888);
        o->callback((Fl_Callback*)cb_EnvFogNear, (void*)(this));
      }
      { Fl_Choice* o = EnvFogMode = new Fl_Choice(244, 212, 101, 25, "Fog Mode:");
        o->down_box(FL_BORDER_BOX);
        o->callback((Fl_Callback*)cb_EnvFogMode, (void*)(this));
        o->menu(menu_EnvFogMode);
      }
      { Fl_Check_Button* o = EnvFogEnable = new Fl_Check_Button(121, 213, 45, 25, "Fog:");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->callback((Fl_Callback*)cb_EnvFogEnable, (void*)(this));
        o->align(FL_ALIGN_LEFT);
      }
      { Fl_Group* o = new Fl_Group(380, 339, 130, 85, "Sky Color");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = SkyRed = new Fl_Value_Input(430, 344, 45, 25, "Red:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_SkyRed, (void*)(this));
        }
        { Fl_Value_Input* o = SkyGreen = new Fl_Value_Input(430, 369, 45, 25, "Green:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_SkyGreen, (void*)(this));
        }
        { Fl_Value_Input* o = SkyBlue = new Fl_Value_Input(430, 394, 45, 25, "Blue:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_SkyBlue, (void*)(this));
        }
        { Fl_Button* o = SkyColorLoadButton = new Fl_Button(480, 344, 25, 75, "...");
          o->callback((Fl_Callback*)cb_SkyColorLoadButton, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(234, 340, 109, 85, "Sun Color");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = EnvSunRed = new Fl_Value_Input(284, 345, 45, 25, "Red:");
          o->step(0.01);
          o->value(8.888);
          o->user_data((void*)(this));
        }
        { Fl_Value_Input* o = EnvSunGreen = new Fl_Value_Input(284, 370, 45, 25, "Green:");
          o->step(0.01);
          o->value(8.888);
          o->user_data((void*)(this));
        }
        { Fl_Value_Input* o = EnvSunBlue = new Fl_Value_Input(284, 395, 45, 25, "Blue:");
          o->step(0.01);
          o->value(8.888);
          o->user_data((void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(78, 340, 109, 85, "Ref Position");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = EnvRefLat = new Fl_Value_Input(119, 345, 60, 25, "Lat:");
          o->tooltip("Ephemeris Reference Lattitude (deg)");
          o->minimum(-90);
          o->maximum(90);
          o->step(0.001);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_EnvRefLat, (void*)(this));
        }
        { Fl_Value_Input* o = EnvRefLong = new Fl_Value_Input(119, 370, 60, 25, "Long:");
          o->tooltip("Ephemeris Reference Longitude (deg)");
          o->minimum(-180);
          o->maximum(180);
          o->step(0.001);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_EnvRefLong, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(105, 260, 315, 60, "Date/Time");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Slider* o = EnvTimeOfDay = new Fl_Value_Slider(154, 293, 241, 23, "Time");
          o->type(5);
          o->maximum(24);
          o->value(12);
          o->callback((Fl_Callback*)cb_EnvTimeOfDay, (void*)(this));
          o->align(FL_ALIGN_LEFT);
        }
        { Fl_Value_Input* o = EnvYear = new Fl_Value_Input(168, 266, 45, 23, "Year:");
          o->tooltip("Year (1970-2023)");
          o->minimum(1970);
          o->maximum(2023);
          o->step(1);
          o->value(8888);
          o->callback((Fl_Callback*)cb_EnvYear, (void*)(this));
        }
        { Fl_Value_Input* o = EnvMonth = new Fl_Value_Input(273, 266, 35, 23, "Month:");
          o->tooltip("Month (1-12)");
          o->minimum(1);
          o->maximum(12);
          o->step(1);
          o->value(88);
          o->callback((Fl_Callback*)cb_EnvMonth, (void*)(this));
        }
        { Fl_Value_Input* o = EnvDay = new Fl_Value_Input(361, 266, 30, 23, "Day:");
          o->tooltip("Day (1-31)");
          o->minimum(1);
          o->maximum(31);
          o->step(1);
          o->value(88);
          o->callback((Fl_Callback*)cb_EnvDay, (void*)(this));
        }
        o->end();
      }
      o->end();
    }
    { Fl_Group* o = InfTerrainGroup = new Fl_Group(70, 145, 450, 285);
      o->box(FL_ENGRAVED_FRAME);
      o->hide();
      { Fl_Value_Input* o = InfBuildDistance = new Fl_Value_Input(300, 200, 65, 25, "Build Distance:");
        o->tooltip("How far (meters) into the distance should there be terrain");
        o->minimum(1);
        o->maximum(999999);
        o->value(888888);
      }
      { Fl_Value_Input* o = InfSegSize = new Fl_Value_Input(300, 225, 65, 25, "Seg Size:");
        o->tooltip("The size (meters) of each side of a block of terrain");
        o->minimum(1);
        o->maximum(999999);
        o->value(888888);
      }
      { Fl_Value_Input* o = InfSegDivisions = new Fl_Value_Input(300, 250, 65, 25, "Seg Divisions:");
        o->tooltip("The number of divisions in each block of terrain");
        o->minimum(1);
        o->maximum(999999);
        o->value(888888);
      }
      { Fl_Value_Input* o = InfVertScale = new Fl_Value_Input(300, 275, 65, 25, "Vertical Scale:");
        o->tooltip("The vertical scaling factor of the terrain");
        o->minimum(1);
        o->maximum(999999);
        o->value(888888);
      }
      { Fl_Value_Input* o = InfHorizScale = new Fl_Value_Input(300, 300, 65, 25, "Horiz Scale:");
        o->tooltip("The horizontal scaling factor of the terrain (spreads out the terrain feature\
s)");
        o->minimum(1);
        o->maximum(999999);
        o->value(888888);
      }
      { Fl_Button* o = InfRegenerateButton = new Fl_Button(280, 335, 90, 30, "Regenerate!");
        o->callback((Fl_Callback*)cb_InfRegenerateButton, (void*)(this));
      }
      { Fl_Check_Button* o = InfSmoothCollision = new Fl_Check_Button(280, 385, 20, 25, "Smooth Collisions");
        o->tooltip("Enables smoothed collision detection");
        o->down_box(FL_DOWN_BOX);
        o->callback((Fl_Callback*)cb_InfSmoothCollision, (void*)(this));
        o->align(FL_ALIGN_LEFT);
      }
      o->end();
    }
    { Fl_Group* o = CloudEditor = new Fl_Group(30, 165, 500, 260, "Cloud Shaders Properties");
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->hide();
      { Fl_Group* o = new Fl_Group(45, 200, 215, 225, "Parameters");
        o->labeltype(FL_EMBOSSED_LABEL);
        { Fl_Value_Slider* o = cScale = new Fl_Value_Slider(45, 215, 200, 25, "Scale");
          o->tooltip("Scale the noise texture");
          o->type(5);
          o->step(0.001);
          o->value(0.2);
          o->callback((Fl_Callback*)cb_cScale, (void*)(this));
        }
        { Fl_Value_Slider* o = cCutoff = new Fl_Value_Slider(45, 268, 200, 25, "Cutoff");
          o->tooltip("Cloud coverage");
          o->type(5);
          o->step(0.001);
          o->value(0.5);
          o->callback((Fl_Callback*)cb_cCutoff, (void*)(this));
        }
        { Fl_Value_Slider* o = cExponent = new Fl_Value_Slider(45, 321, 200, 25, "Exponent");
          o->tooltip("Saturation of the clouds");
          o->type(5);
          o->minimum(1);
          o->maximum(10);
          o->step(1);
          o->value(5);
          o->callback((Fl_Callback*)cb_cExponent, (void*)(this));
        }
        { Fl_Value_Slider* o = cBias = new Fl_Value_Slider(45, 375, 200, 25, "Bias");
          o->tooltip("Cloud brightness");
          o->type(5);
          o->maximum(2);
          o->value(1.2);
          o->callback((Fl_Callback*)cb_cBias, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(440, 200, 70, 90, "Cloud Color");
        o->box(FL_FLAT_BOX);
        o->labeltype(FL_EMBOSSED_LABEL);
        { Fl_Value_Input* o = CloudRed = new Fl_Value_Input(462, 215, 25, 25, "Red:");
          o->step(0.1);
          o->value(1);
          o->callback((Fl_Callback*)cb_CloudRed, (void*)(this));
        }
        { Fl_Value_Input* o = CloudGreen = new Fl_Value_Input(462, 240, 25, 25, "Green:");
          o->step(0.1);
          o->value(1);
          o->callback((Fl_Callback*)cb_CloudGreen, (void*)(this));
        }
        { Fl_Value_Input* o = CloudBlue = new Fl_Value_Input(462, 265, 25, 25, "Blue:");
          o->step(0.1);
          o->value(1);
          o->callback((Fl_Callback*)cb_CloudBlue, (void*)(this));
        }
        { Fl_Button* o = CloudColorLoadButton = new Fl_Button(485, 215, 25, 75, "...");
          o->callback((Fl_Callback*)cb_CloudColorLoadButton, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(285, 200, 105, 95, "Cloud Speed");
        o->labeltype(FL_EMBOSSED_LABEL);
        { Fl_Value_Slider* o = cSpeedX = new Fl_Value_Slider(285, 215, 100, 25, "X speed");
          o->type(5);
          o->maximum(5);
          o->step(0.1);
          o->value(0.1);
          o->callback((Fl_Callback*)cb_cSpeedX, (void*)(this));
        }
        { Fl_Value_Slider* o = cSpeedY = new Fl_Value_Slider(285, 260, 100, 25, "Y speed");
          o->type(5);
          o->maximum(5);
          o->step(0.1);
          o->value(0.1);
          o->callback((Fl_Callback*)cb_cSpeedY, (void*)(this));
        }
        o->end();
      }
      { Fl_Check_Button* o = cEnable = new Fl_Check_Button(400, 380, 25, 25, "Shader Enabled");
        o->tooltip("Enables/Disables the cloud shader");
        o->down_box(FL_DOWN_BOX);
        o->value(1);
        o->labeltype(FL_EMBOSSED_LABEL);
        o->callback((Fl_Callback*)cb_cEnable, (void*)(this));
      }
      o->end();
    }
    { Fl_Group* o = WeatherGroup = new Fl_Group(31, 165, 500, 260);
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->user_data((void*)(this));
      o->hide();
      { Fl_Choice* o = WeatherTimePeriodChoice = new Fl_Choice(270, 185, 90, 30, "Time:");
        o->down_box(FL_BORDER_BOX);
        o->callback((Fl_Callback*)cb_WeatherTimePeriodChoice, (void*)(this));
        o->menu(menu_WeatherTimePeriodChoice);
      }
      { Fl_Choice* o = WeatherSeasonChoice = new Fl_Choice(425, 185, 90, 30, "Season:");
        o->down_box(FL_BORDER_BOX);
        o->callback((Fl_Callback*)cb_WeatherSeasonChoice, (void*)(this));
        o->menu(menu_WeatherSeasonChoice);
      }
      { Fl_Group* o = WeatherCustomGroup = new Fl_Group(115, 335, 405, 67, "Custom");
        o->box(FL_EMBOSSED_FRAME);
        o->align(FL_ALIGN_LEFT);
        { Fl_Slider* o = WeatherCloudSlider = new Fl_Slider(131, 366, 120, 25, "Cloud");
          o->type(1);
          o->maximum(4);
          o->step(1);
          o->callback((Fl_Callback*)cb_WeatherCloudSlider, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        { Fl_Slider* o = WeatherWindSlider = new Fl_Slider(265, 366, 120, 25, "Wind");
          o->type(1);
          o->maximum(5);
          o->step(1);
          o->callback((Fl_Callback*)cb_WeatherWindSlider, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        { Fl_Slider* o = WeatherVisSlider = new Fl_Slider(395, 366, 120, 25, "Visibility");
          o->type(1);
          o->maximum(4);
          o->step(1);
          o->callback((Fl_Callback*)cb_WeatherVisSlider, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(45, 235, 25, 150);
        o->user_data((void*)(this));
        { Fl_Round_Button* o = WeatherThemeOption = new Fl_Round_Button(45, 235, 25, 25);
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_WeatherThemeOption, (void*)(this));
        }
        { Fl_Round_Button* o = WeatherCustomOption = new Fl_Round_Button(45, 360, 25, 25);
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_WeatherCustomOption, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = WeatherThemeGroup = new Fl_Group(115, 185, 92, 145, "Theme:");
        o->box(FL_EMBOSSED_FRAME);
        o->align(FL_ALIGN_LEFT);
        { Fl_Round_Button* o = WeatherThemeClearOption = new Fl_Round_Button(117, 213, 80, 25, "Clear");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_WeatherThemeClearOption, (void*)(this));
        }
        { Fl_Round_Button* o = WeatherThemeFairOption = new Fl_Round_Button(117, 243, 80, 25, "Fair");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_WeatherThemeFairOption, (void*)(this));
        }
        { Fl_Round_Button* o = WeatherThemeFoggyOption = new Fl_Round_Button(117, 273, 80, 25, "Foggy");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_WeatherThemeFoggyOption, (void*)(this));
        }
        { Fl_Round_Button* o = WeatherThemeRainyOption = new Fl_Round_Button(117, 301, 80, 25, "Rainy");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_WeatherThemeRainyOption, (void*)(this));
        }
        { Fl_Round_Button* o = WeatherThemeCustomOption = new Fl_Round_Button(115, 185, 80, 25, "Custom");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_WeatherThemeCustomOption, (void*)(this));
        }
        o->end();
      }
      { Fl_Value_Slider* o = WeatherRateOfChangeSlider = new Fl_Value_Slider(310, 240, 140, 25, "Rate of Change");
        o->type(1);
        o->minimum(-1);
        o->callback((Fl_Callback*)cb_WeatherRateOfChangeSlider, (void*)(this));
      }
      o->end();
    }
    { Fl_Group* o = LightGroup = new Fl_Group(15, 255, 520, 180);
      o->box(FL_ENGRAVED_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->user_data((void*)(this));
      o->hide();
      { Fl_Value_Input* o = LightNumberInput = new Fl_Value_Input(81, 280, 25, 25, "Light Number");
        o->minimum(1);
        o->maximum(8);
        o->step(1);
        o->callback((Fl_Callback*)cb_LightNumberInput, (void*)(this));
        o->align(132);
      }
      { Fl_Group* o = new Fl_Group(455, 353, 65, 45, "Mode");
        o->box(FL_ENGRAVED_FRAME);
        { Fl_Round_Button* o = LightModeLocal = new Fl_Round_Button(455, 353, 65, 25, "Local");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->callback((Fl_Callback*)cb_LightModeLocal, (void*)(this));
        }
        { Fl_Round_Button* o = LightModeGlobal = new Fl_Round_Button(455, 373, 65, 25, "Global");
          o->type(102);
          o->down_box(FL_ROUND_DOWN_BOX);
          o->value(1);
          o->callback((Fl_Callback*)cb_LightModeGlobal, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(294, 274, 215, 50, "Attenuation");
        o->box(FL_THIN_DOWN_BOX);
        { Fl_Value_Input* o = LightConstAtt = new Fl_Value_Input(298, 295, 60, 25, "Constant");
          o->maximum(100);
          o->step(0.001);
          o->callback((Fl_Callback*)cb_LightConstAtt, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        { Fl_Value_Input* o = LightLinAtt = new Fl_Value_Input(373, 293, 60, 25, "Linear");
          o->maximum(100);
          o->step(0.001);
          o->callback((Fl_Callback*)cb_LightLinAtt, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        { Fl_Value_Input* o = LightQuadAtt = new Fl_Value_Input(444, 294, 60, 25, "Quadratic");
          o->maximum(100);
          o->step(0.001);
          o->callback((Fl_Callback*)cb_LightQuadAtt, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(29, 344, 130, 85, "Diffuse");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = LightDifRed = new Fl_Value_Input(79, 349, 45, 25, "Red:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightDifRed, (void*)(this));
        }
        { Fl_Value_Input* o = LightDifGreen = new Fl_Value_Input(79, 374, 45, 25, "Green:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightDifGreen, (void*)(this));
        }
        { Fl_Value_Input* o = LightDifBlue = new Fl_Value_Input(79, 399, 45, 25, "Blue:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightDifBlue, (void*)(this));
        }
        { Fl_Button* o = LightDifColorLoadButton = new Fl_Button(129, 349, 25, 75, "...");
          o->callback((Fl_Callback*)cb_LightDifColorLoadButton, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(170, 344, 130, 85, "Ambient");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = LightAmbRed = new Fl_Value_Input(220, 349, 45, 25, "Red:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightAmbRed, (void*)(this));
        }
        { Fl_Value_Input* o = LightAmbGreen = new Fl_Value_Input(220, 374, 45, 25, "Green:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightAmbGreen, (void*)(this));
        }
        { Fl_Value_Input* o = LightAmbBlue = new Fl_Value_Input(220, 399, 45, 25, "Blue:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightAmbBlue, (void*)(this));
        }
        { Fl_Button* o = LightAmbColorLoadButton = new Fl_Button(270, 349, 25, 75, "...");
          o->callback((Fl_Callback*)cb_LightAmbColorLoadButton, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(310, 343, 130, 85, "Specular");
        o->box(FL_THIN_DOWN_FRAME);
        { Fl_Value_Input* o = LightSpecRed = new Fl_Value_Input(360, 348, 45, 25, "Red:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightSpecRed, (void*)(this));
        }
        { Fl_Value_Input* o = LightSpecGreen = new Fl_Value_Input(360, 373, 45, 25, "Green:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightSpecGreen, (void*)(this));
        }
        { Fl_Value_Input* o = LightSpecBlue = new Fl_Value_Input(360, 398, 45, 25, "Blue:");
          o->step(0.01);
          o->value(8.888);
          o->callback((Fl_Callback*)cb_LightSpecBlue, (void*)(this));
        }
        { Fl_Button* o = LightSpecColorLoadButton = new Fl_Button(410, 348, 25, 75, "...");
          o->callback((Fl_Callback*)cb_LightSpecColorLoadButton, (void*)(this));
        }
        o->end();
      }
      { Fl_Group* o = new Fl_Group(125, 274, 139, 50, "Spot");
        o->box(FL_THIN_DOWN_BOX);
        { Fl_Value_Input* o = LightExponentInput = new Fl_Value_Input(197, 295, 60, 25, "Exp");
          o->maximum(500000);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_LightExponentInput, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        { Fl_Value_Input* o = LightCutoffInput = new Fl_Value_Input(129, 295, 60, 25, "Cutoff");
          o->maximum(500000);
          o->step(0.1);
          o->callback((Fl_Callback*)cb_LightCutoffInput, (void*)(this));
          o->align(FL_ALIGN_TOP);
        }
        o->end();
      }
      o->end();
    }
    o->end();
  }
  { Fl_Double_Window* o = SelectWindow = new Fl_Double_Window(274, 249, "Add Child");
    w = o;
    o->user_data((void*)(this));
    SelectList = new Fl_Check_Browser(20, 15, 205, 160);
    SelectWinAddButton = new Fl_Return_Button(170, 190, 70, 40, "Add");
    SelectWinCancelButton = new Fl_Button(40, 190, 55, 40, "Cancel");
    o->set_modal();
    o->end();
  }
  return w;
}
