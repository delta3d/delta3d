import os

Import('*')

#####################
# Delcare src files #
#####################

if CheckForBoost() and OS != 'darwin' :

   pythonSrcs = { 
   
      'dtCore' :[    'basebindings.cpp',
                     'camerabindings.cpp',
                     'clouddomebindings.cpp',
                     'cloudplanebindings.cpp',
                     'compassbindings.cpp',
                     'deltadrawablebindings.cpp',
                     'deltawinbindings.cpp',
                     'dtcorebindings.cpp',
                     'effectmanagerbindings.cpp',
                     'enveffectbindings.cpp',
                     'environmentbindings.cpp',
                     'flymotionmodelbindings.cpp',
                     'infinitelightbindings.cpp',
                     'infiniteterrainbindings.cpp',
                     'inputdevicebindings.cpp',
                     'inputmapperbindings.cpp',
                     'isectorbindings.cpp',
                     'joystickbindings.cpp',
                     'keyboardbindings.cpp',
                     'lightbindings.cpp',
                     'loadablebindings.cpp',
                     'logicalinputdevicebindings.cpp',
                     'motionmodelbindings.cpp',
                     'mousebindings.cpp',
                     'objectbindings.cpp',
                     'orbitmotionmodelbindings.cpp',
                     'osgvec3.cpp',
                     'osgvec4.cpp',
                     'osgmath.cpp',
                     'osgmatrix.cpp',
                     'particlesystembindings.cpp',
                     'physicalbindings.cpp',
                     'pointaxisbindings.cpp',
                     'positionallightbindings.cpp',
                     'recorderbindings.cpp',
                     'scenebindings.cpp',
                     'skyboxbindings.cpp',
                     'skydomebindings.cpp',
                     'spotlightbindings.cpp',
                     'systembindings.cpp',
                     'terrainbindings.cpp',
                     'trackerbindings.cpp',
                     'transformablebindings.cpp',
                     'transformbindings.cpp',
                     'tripodbindings.cpp',
                     'ufomotionmodelbindings.cpp',
                     'walkmotionmodelbindings.cpp' ],
   
   'dtABC' : [ 'applicationbindings.cpp', 'baseabcbindings.cpp', 'dtabcbindings.cpp', 'weatherbindings.cpp', 'widgetbindings.cpp' ],
    
   'dtAudio' : [ 'audiomanagerbindings.cpp', 'dtaudiobindings.cpp', 'listenerbindings.cpp', 'soundeffectbinderbindings.cpp' ],
    
   'dtChar' : [ 'characterbindings.cpp', 'dtcharbindings.cpp' ],

   'dtDAL'  : [ 'actorproxybindings.cpp' ],
    
   'dtInspector' : [ 'dtinspectorbindings.cpp' ],
    
   'dtHLA' : [ 'distypebindings.cpp', 'dthlabindings.cpp', 'entitybindings.cpp', 'rticonnectionbindings.cpp' ],
    
   'dtSOARX' : [ 'dtsoarxbindings.cpp', 'soarxterrainbindings.cpp' ] }
   
   #TODO: remove this once these compile on win32
   if OS == 'windows' :
      for file in ['osgvec3.cpp','osgmath.cpp','osgmatrix.cpp'] :
         pythonSrcs['dtCore'].remove(file)
    
   ##############
   # Build libs #
   ##############
      
   if OS == 'windows' and mode == 'debug' :
      boostLib = 'boost_python_debug'
   else :
      boostLib = 'boost_python'

   pythonDeps = [ 'python' ]
   
   if OS == 'windows' :
      pythonDeps += [  'User32' ] 
      
   pythonDeps = [ extLibs[lib] for lib in pythonDeps if extLibs.has_key(lib) ] + [boostLib]
   
   if OS == 'windows' and mode == 'debug' :
      dtCoreBindingsTarget = 'dtCoreBindingsd'
      dtAbcBindingsTarget = 'dtABCBindingsd'
      dtAudioBindingsTarget = 'dtAudioBindingsd'
      dtCharBindingsTarget = 'dtCharBindingsd'
      dtDALBindingsTarget = 'dtDALBindingsd'
      dtInspectorBindingsTarget = 'dtInspectorBindingsd'
      dtHlaBindingsTarget = 'dtHLABindingsd'
      dtSoarxBindingsTarget = 'dtSOARXBindingsd'
   else :
      dtCoreBindingsTarget = 'dtCoreBindings'
      dtAbcBindingsTarget = 'dtABCBindings'
      dtAudioBindingsTarget = 'dtAudioBindings'
      dtCharBindingsTarget = 'dtCharBindings'
      dtDALBindingsTarget = 'dtDALBindings'
      dtInspectorBindingsTarget = 'dtInspectorBindings'
      dtHlaBindingsTarget = 'dtHLABindings'
      dtSoarxBindingsTarget = 'dtSOARXBindings'
   
   pythonDtCoreLib = env.SharedLibrary(  dtCoreBindingsTarget,    pythonSrcs['dtCore'],   LIBS = pythonDeps + [dtLibs['dtCore']] )
   pythonDtAbcLib = env.SharedLibrary(   dtAbcBindingsTarget,     pythonSrcs['dtABC'],    LIBS = pythonDeps + [dtLibs['dtABC']] )
   pythonDtAudioLib = env.SharedLibrary( dtAudioBindingsTarget,   pythonSrcs['dtAudio'],  LIBS = pythonDeps + [dtLibs['dtAudio']] )
   pythonDtCharLib = env.SharedLibrary(  dtCharBindingsTarget,    pythonSrcs['dtChar'],   LIBS = pythonDeps + [dtLibs['dtChar']] )
   pythonDtDALLib = env.SharedLibrary(  dtDALBindingsTarget,    pythonSrcs['dtDAL'],   LIBS = pythonDeps + [dtLibs['dtDAL']] )
   pythonDtInspectorLib = env.SharedLibrary(  dtInspectorBindingsTarget,  pythonSrcs['dtInspector'],   LIBS = pythonDeps + [dtLibs['dtInspector']] )

   env.Precious( pythonDtCoreLib, pythonDtAbcLib, pythonDtAudioLib, pythonDtCharLib, pythonDtDALLib, pythonDtInspectorLib )
   
   if env.get('rti') != 0 :
      pythonDtHlaLib = env.SharedLibrary( dtHlaBindingsTarget, pythonSrcs['dtHLA'], LIBS = pythonDeps + [dtLibs[ 'dtHLA' ]] )
      env.Precious( pythonDtHlaLib )
   else :
      pythonDtHlaLib = None

   if OS == 'windows' :
      pythonDtSoarxLib = env.SharedLibrary( dtSoarxBindingsTarget, pythonSrcs['dtSOARX'], LIBS = pythonDeps + [dtLibs[ 'dtSOARX' ]] )
      env.Precious( pythonDtSoarxLib )

   ################
   # Install libs #
   ################

   if OS == 'windows' :
      dir = 'bin'
      suffix = 'pyd'
   else :
      dir = 'lib'
      suffix = 'so'

   if mode == 'debug' :
      dtCorePydTarget = '#'+dir+'/PyDtCored.'+suffix
      dtAbcPydTarget = '#'+dir+'/PyDtABCd.'+suffix
      dtAudioPydTarget = '#'+dir+'/PyDtAudiod.'+suffix
      dtCharPydTarget = '#'+dir+'/PyDtChard.'+suffix
      dtDALPydTarget = '#'+dir+'/PyDtDALd.'+suffix
      dtInspectorPydTarget = '#'+dir+'/PyDtInspectord.'+suffix
      dtSoarxPydTarget = '#'+dir+'/PyDtSOARXd.'+suffix
      dtHlaPydTarget = '#'+dir+'/PyDtHLAd.'+suffix
   elif mode == 'release' :
      dtCorePydTarget = '#'+dir+'/PyDtCore.'+suffix
      dtAbcPydTarget = '#'+dir+'/PyDtABC.'+suffix
      dtAudioPydTarget = '#'+dir+'/PyDtAudio.'+suffix
      dtCharPydTarget = '#'+dir+'/PyDtChar.'+suffix
      dtDALPydTarget = '#'+dir+'/PyDtDAL.'+suffix
      dtInspectorPydTarget = '#'+dir+'/PyDtInspector.'+suffix
      dtSoarxPydTarget = '#'+dir+'/PyDtSOARX.'+suffix
      dtHlaPydTarget = '#'+dir+'/PyDtHLA.'+suffix
  
   env.InstallAs( [  dtCorePydTarget, \
                     dtAbcPydTarget, \
                     dtAudioPydTarget, \
                     dtCharPydTarget, \
                     dtDALPydTarget, \
                     dtInspectorPydTarget ], \
                  [  pythonDtCoreLib[0], \
                     pythonDtAbcLib[0], \
                     pythonDtAudioLib[0], \
                     pythonDtCharLib[0], \
                     pythonDtDALLib[0], \
                     pythonDtInspectorLib[0] ] )

   if pythonDtHlaLib is not None:
         env.InstallAs( dtHlaPydTarget, pythonDtHlaLib[0] )

   if OS == 'windows' :
      
      env.InstallAs( dtSoarxPydTarget , pythonDtSoarxLib[0] )
      
      env.Install( '#/lib', [ pythonDtCoreLib[1:], \
                              pythonDtAbcLib[1:], \
                              pythonDtAudioLib[1:], \
                              pythonDtCharLib[1:], \
                              pythonDtDALLib[1:], \
                              pythonDtInspectorLib[1:], \
                              pythonDtSoarxLib[1:] ] )

      if pythonDtHlaLib is not None:
         env.Install( '#/lib', pythonDtHlaLib[1:] )
