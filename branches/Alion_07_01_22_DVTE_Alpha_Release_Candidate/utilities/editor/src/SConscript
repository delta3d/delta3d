# Build script for actual level editor application.
import glob
import sys
import re
import os
import string

# Import the variables defined in the global SConstruct build script.
Import ('*')

if 'qt' in env['TOOLS'] :

   EditorEnv = env.Copy(tools = ['qt'])

   # The function returns a list of header files that contain the Q_OBJECT macro.  These
   # are then passed on the the moc builder.
   def getQObjectHeaders(headers) :
      passed = []
      pattern = re.compile("Q_OBJECT")

      #windows has issues with file paths, and since the headers are based
      # on the build path, we need to adjust.
      path = string.replace(GetBuildPath('SConscript'),  'SConscript', '')
   
      headersFixed = []
      for i in headers:
         headersFixed.append(path + i) 

      for header in headersFixed:
         f = open(header)
         while 1 :
            l = f.readline()
            if not l :
               break
            if re.search(pattern,l):
               passed.append(header)
               break   
         f.close()
   
      return passed
   
   # Environment settings for Qt
   qtdir = EditorEnv['QTDIR']
   
   EditorEnv['QT_AUTOSCAN'] = 0
   EditorEnv['QT_LIB'] = ''
   EditorEnv['CXXFILESUFFIX'] = '.cpp'
   EditorEnv.Append(CPPDEFINES = ['QT_THREAD_SUPPORT',
                   'QT_CORE_LIB',
                   'QT_GUI_LIB',
                   'QT_SHARED'])
   
   if env['OS'] == 'linux':
      EditorEnv.Append(CPPDEFINES = ['_REENTRANT'])
   elif env['OS'] == 'darwin':
      EditorEnv.Append(CPPDEFINES = ['_REENTRANT'])
   
   if env['OS'] == 'darwin':
      EditorEnv.Append(CPPPATH = ['#/utilities/editor/inc'] )
   else:
      EditorEnv.Append(CPPPATH = [qtdir + '/include','#/utilities/editor/inc'] )
   
   if mode == 'debug':
      if env['OS'] == 'windows':
         EditorEnv.Append(LIBS = ['QtCored4','QtGuid4','QtOpenGLd4','dtDALd','dtAId','dtCored','dtUtild','dtAudiod','dtChard','dtABCd','dtGamed'])   
      elif env['OS'] == 'darwin':
         EditorEnv.Append(LIBS = ['dtDAL','dtAI','dtCore','dtUtil','dtAudio','dtChar','dtABC','dtGame','plibul'])
         EditorEnv.Append(LINKFLAGS = ' -F' + qtdir + '/lib' )
         EditorEnv.Append(FRAMEWORKS = [ 'QtCore', 'QtGui', 'QtOpenGL' ])
      else:
         EditorEnv.Append(LIBS = ['QtCore','QtGui','QtOpenGL','dtDAL','dtAI','dtCore','dtUtil','dtAudio','dtChar','dtABC','dtGame','plibul'])   
   else:
      if env['OS'] == 'windows':
         EditorEnv.Append(LIBS = ['QtCore4','QtGui4','QtOpenGL4','dtDAL','dtAI','dtCore','dtAudio','dtChar','dtUtil','dtABC','dtGame'])
      elif env['OS'] == 'darwin':
         EditorEnv.Append(LIBS = ['dtDAL','dtAI','dtCore','dtUtil','dtAudio','dtChar','dtABC','dtGame','plibul']) 
         EditorEnv.Append(LINKFLAGS = ' -F' + qtdir + '/lib -framework QtCore -framework QtGui -framework QtOpenGL ' )   
      else:
         EditorEnv.Append(LIBS = ['QtCore','QtGui','QtOpenGL','dtDAL','dtAI','dtCore','dtUtil','dtAudio','dtChar','dtABC','dtGame','plibul']) 
   
   # First, glob the header directory to obtain a list of potential files to run
   # the moc builder on.
   if env['OS'] == 'windows':
      moc_headers = env.SGlob('..\inc\dtEditQt\*.h')
   else:
      moc_headers = env.SGlob('../inc/dtEditQt/*.h')

   # Next, grep each header file for the Q_OBJECT macro to determine if moc should be run on 
   # it.
   moc_headers = getQObjectHeaders(moc_headers)
   
   # We want the resulting moc files put in a moc subdirectory under the dtEditQt source
   # directory so we need to modify the pathnames of the sources to create the target output
   # file names.
   moc_targets = []
   for currHeader in moc_headers :
      if env['OS'] == 'windows':
         parts = currHeader.split("\\")
      else:
         parts = currHeader.split("/")
         
      target = parts[len(parts)-1][:-2]
         
      EditorEnv['QT_MOCFROMHFLAGS'] =['-Iutilities/editor/inc']
      moc_targets.append(EditorEnv.Moc(target=target, source=currHeader))

   initialSources = env.SGlob('*.cpp')

   if "precomp.cpp" in initialSources:
      initialSources.remove("precomp.cpp")

   #must be built separately.

   if EditorEnv.get('fastBuild'):
      if "taskuiplugin.cpp" in initalSources:
         initialSources.remove("taskuiplugin.cpp")
      
      path = string.replace(EditorEnv.GetBuildPath('SConscript'),  'SConscript', '')
      cxxFileName = "STAGE.cxx"
      cxxFile = open(path + cxxFileName, "w")
      for srcFile in initalSources :
         cxxFile.write("#include \"" + srcFile + "\"\n")   
      
      sources = [cxxFileName, "taskuiplugin.cpp"] + moc_targets
   else:
      sources = initialSources + moc_targets

   # Hack to avoid Qt warning about unused file. This should probably just be removed
   # from CVS.
   #if env['OS'] == 'windows':
   #   charBrowserHeader = '..\inc\dtEditQt\characterbrowser.h'

   #   if charBrowserHeader in moc_headers:
   #      moc_headers.remove(charBrowserHeader)
      
   #  sources.remove("characterbrowser.cpp")

   # Hack to avoid Qt warning about unused file. This should probably just be removed
   # from CVS.
   #charBrowserSrc = 'characterbrowser.cpp'
   #if charBrowserSrc in sources:      
   #   sources.remove(charBrowserSrc)
         
   # Build the icon
   if env['OS'] == 'windows' :
      sources += env.RES( '#utilities\editor\dtEditQt.rc' )
   
   if mode == 'debug' and env['OS'] == 'windows' :
      app = EditorEnv.Program('#/bin/STAGEd', sources)
   else:   
       prefixHeader = "inc/prefix/dtstageprefix.h"

       if len(prefixHeader) > 0 and EditorEnv.get('pch'):
          EditorEnv['CPPDEFINES'] += ['DELTA_PCH']
          if env['OS'] == 'darwin' or env['OS'] == 'linux':
             oldCxxFlags = EditorEnv['CXXFLAGS'] + ""
             EditorEnv['CXXFLAGS'] += " -include " + prefixHeader
             srcHeader = (prefixHeader[0:-2]) + "-src.h"
             outputGCH = "#" + prefixHeader + ".gch/stage"
             EditorEnv['Gch'] = EditorEnv.Gch(outputGCH, "#" + srcHeader, CXXFLAGS=oldCxxFlags)[0]             
          elif env['OS'] == 'windows':
             EditorEnv['PCH'] = EditorEnv.PCH("precomp.cpp")[0]
       
    
       app = EditorEnv.Program('#/bin/STAGE', sources)
      
   if (app == '[]') :
      result = 'false'
   else :
      result = 'true'
   
   if (result == 'false') :
      errorLog.write("Failed to build the level editor application.\n")
   
   Return('result')
